	/**
     * Method main
     *
     * Given 1 argument takes that as the filename, inputs it and dumps the
     * cell values/types out to sys.out.<br>
     *
     * given 2 arguments where the second argument is the word "write" and the
     * first is the filename - writes out a sample (test) spreadsheet
     * see {@link HSSFReadWrite#testCreateSampleSheet(String)}.<br>
     *
     * given 2 arguments where the first is an input filename and the second
     * an output filename (not write), attempts to fully read in the
     * spreadsheet and fully write it out.<br>
     *
     * given 3 arguments where the first is an input filename and the second an
     * output filename (not write) and the third is "modify1", attempts to read in the
     * spreadsheet, deletes rows 0-24, 74-99.  Changes cell at row 39, col 3 to
     * "MODIFIED CELL" then writes it out.  Hence this is "modify test 1".  If you
     * take the output from the write test, you'll have a valid scenario.
     */
	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.err.println("At least one argument expected");
			return;
		}

		String fileName = args[0];
		if (args.length < 2) {

			try (HSSFWorkbook wb = HSSFReadWrite.readFile(fileName)) {
				System.out.println("Data dump:\n");

				for (int k = 0; k < wb.getNumberOfSheets(); k++) {
					HSSFSheet sheet = wb.getSheetAt(k);
					int rows = sheet.getPhysicalNumberOfRows();
					System.out.println("Sheet " + k + " \"" + wb.getSheetName(k) + "\" has " + rows	+ " row(s).");
					for (int r = 0; r < rows; r++) {
						HSSFRow row = sheet.getRow(r);
						if (row == null) {
							continue;
						}

						System.out.println("\nROW " + row.getRowNum() + " has " + row.getPhysicalNumberOfCells() + " cell(s).");
						for (int c = 0; c < row.getLastCellNum(); c++) {
							HSSFCell cell = row.getCell(c);
							String value;

							if (cell != null) {
								switch (cell.getCellType()) {

									case FORMULA:
										value = "FORMULA value=" + cell.getCellFormula();
										break;

									case NUMERIC:
										value = "NUMERIC value=" + cell.getNumericCellValue();
										break;

									case STRING:
										value = "STRING value=" + cell.getStringCellValue();
										break;

									case BLANK:
										value = "<BLANK>";
										break;

									case BOOLEAN:
										value = "BOOLEAN value-" + cell.getBooleanCellValue();
										break;

									case ERROR:
										value = "ERROR value=" + cell.getErrorCellValue();
										break;

									default:
										value = "UNKNOWN value of type " + cell.getCellType();
								}
								System.out.println("CELL col=" + cell.getColumnIndex() + " VALUE=" + value);
							}
						}
					}
				}
			}
		} else if (args.length == 2) {
			if ("write".equalsIgnoreCase(args[1])) {
				System.out.println("Write mode");
				long time = System.currentTimeMillis();
				HSSFReadWrite.testCreateSampleSheet(fileName);

				System.out.println("" + (System.currentTimeMillis() - time) + " ms generation time");
			} else {
				System.out.println("readwrite test");
				try (HSSFWorkbook wb = HSSFReadWrite.readFile(fileName);
					 FileOutputStream stream = new FileOutputStream(args[1])) {
					wb.write(stream);
				}
			}
		} else if (args.length == 3 && "modify1".equalsIgnoreCase(args[2])) {
			// delete row 0-24, row 74 - 99 && change cell 3 on row 39 to string "MODIFIED CELL!!"

			try (HSSFWorkbook wb = HSSFReadWrite.readFile(fileName);
				 FileOutputStream stream = new FileOutputStream(args[1])) {
				HSSFSheet sheet = wb.getSheetAt(0);

				for (int k = 0; k < 25; k++) {
					HSSFRow row = sheet.getRow(k);
					sheet.removeRow(row);
				}
				for (int k = 74; k < 100; k++) {
					HSSFRow row = sheet.getRow(k);
					sheet.removeRow(row);
				}
				HSSFRow row = sheet.getRow(39);
				HSSFCell cell = row.getCell(3);
				cell.setCellValue("MODIFIED CELL!!!!!");

				wb.write(stream);
			}
		}
	}

