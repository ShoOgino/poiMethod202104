    private void handleExtractingInternal(File file) throws Exception {
        long length = file.length();
        long modified = file.lastModified();

        POITextExtractor extractor = null;
        String fileAndParentName = file.getParentFile().getName() + "/" + file.getName();
        try {
            // fix windows absolute paths for exception message tracking
            String relPath = file.getPath().replaceAll(".*test-data", "test-data").replace('\\', '/');
            extractor = ExtractorFactory.createExtractor(file);
            assertNotNull(extractor, "Should get a POITextExtractor but had none for file " + relPath);

            assertNotNull(extractor.getText(), "Should get some text but had none for file " + relPath);

            // also try metadata
            @SuppressWarnings("resource")
            POITextExtractor metadataExtractor = extractor.getMetadataTextExtractor();
            assertNotNull(metadataExtractor.getText());

            assertFalse(EXPECTED_EXTRACTOR_FAILURES.contains(fileAndParentName),
                "Expected Extraction to fail for file " + relPath + " and handler " + this + ", but did not fail!");

            assertEquals(length, file.length(), "File should not be modified by extractor");
            assertEquals(modified, file.lastModified(), "File should not be modified by extractor");

            handleExtractingAsStream(file);

            if (extractor instanceof POIOLE2TextExtractor) {
                try (HPSFPropertiesExtractor hpsfExtractor = new HPSFPropertiesExtractor((POIOLE2TextExtractor) extractor)) {
                    assertNotNull(hpsfExtractor.getDocumentSummaryInformationText());
                    assertNotNull(hpsfExtractor.getSummaryInformationText());
                    String text = hpsfExtractor.getText();
                    //System.out.println(text);
                    assertNotNull(text);
                }
            }

            // test again with including formulas and cell-comments as this caused some bugs
            if (extractor instanceof ExcelExtractor &&
                // comment-extraction and formula extraction are not well supported in event based extraction
                !(extractor instanceof EventBasedExcelExtractor)) {
                ((ExcelExtractor) extractor).setFormulasNotResults(true);

                String text = extractor.getText();
                assertNotNull(text);
                // */

                ((ExcelExtractor) extractor).setIncludeCellComments(true);

                text = extractor.getText();
                assertNotNull(text);
            }
        } catch (IOException | POIXMLException e) {
            Exception prevE = e;
            Throwable cause;
            while ((cause = prevE.getCause()) instanceof Exception) {
                if (cause instanceof IOException || cause instanceof POIXMLException) {
                    prevE = (Exception)cause;
                } else {
                    throw (Exception)cause;
                }
            }
            throw e;
        } catch (IllegalArgumentException e) {
            if(!EXPECTED_EXTRACTOR_FAILURES.contains(fileAndParentName)) {
                throw e;
            }
        } catch (EncryptedDocumentException e) {
            String msg = "org.apache.poi.EncryptedDocumentException: Export Restrictions in place - please install JCE Unlimited Strength Jurisdiction Policy files";
            assumeFalse(msg.equals(e.getMessage()));
            throw e;
        } catch (IllegalStateException e) {
            if (!e.getMessage().contains("POI Scratchpad jar missing") || !Boolean.getBoolean("scratchpad.ignore")) {
                throw e;
            }
        } finally {
            IOUtils.closeQuietly(extractor);
        }
    }

