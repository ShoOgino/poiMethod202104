	/**
	 * For the UserEdit Atom
	 */
	protected UserEditAtom(byte[] source, int start, int len) {
		// Sanity Checking
		if(len < 34) { len = 34; }

		int offset = start;
		// Get the header
		_header = Arrays.copyOfRange(source, start, start+8);
		offset += 8;

		// Get the last viewed slide ID
		lastViewedSlideID = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Get the PPT version
		pptVersion = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Get the offset to the previous incremental save's UserEditAtom
		// This will be the byte offset on disk where the previous one
		//  starts, or 0 if this is the first one
		lastUserEditAtomOffset = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Get the offset to the persist pointers
		// This will be the byte offset on disk where the preceding
		//  PersistPtrFullBlock or PersistPtrIncrementalBlock starts
		persistPointersOffset = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Get the persist reference for the document persist object
		// Normally seems to be 1
		docPersistRef = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Maximum number of persist objects written
		maxPersistWritten = LittleEndian.getInt(source,offset);
		offset += LittleEndianConsts.INT_SIZE;

		// Last view type
		lastViewType = LittleEndian.getShort(source,offset);
		offset += LittleEndianConsts.SHORT_SIZE;

		// unused
		unused = LittleEndian.getShort(source,offset);
		offset += LittleEndianConsts.SHORT_SIZE;

		// There might be a few more bytes, which are a reserved field
		if (offset-start<len) {
		    encryptSessionPersistIdRef = LittleEndian.getInt(source,offset);
		    offset += LittleEndianConsts.INT_SIZE;
		}

		assert(offset-start == len);
	}

