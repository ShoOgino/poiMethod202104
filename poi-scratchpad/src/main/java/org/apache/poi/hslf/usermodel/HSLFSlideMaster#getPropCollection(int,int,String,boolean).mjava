    /**
     * Find the master collection for the given txtype/level/name.
     * This is the "workhorse" which returns the default style attributes.
     * If {@code name = "*"} return the current collection, otherwise if the name is not found
     * in the current selection of txtype/level/name, first try lower levels then try parent types,
     * if it wasn't found there return {@code null}.
     * 
     * @param txtype the {@link TextHeaderAtom} type
     * @param level the indent level of the paragraph, if the level is not defined for the found
     *      collection, the highest existing level will be used
     * @param name the property name, 
     * @param isCharacter if {@code true} use character styles, otherwise use paragraph styles
     */
    @Override
    public TextPropCollection getPropCollection(final int txtype, final int level, final String name, final boolean isCharacter) {
        TextPropCollection tpc = getPropHelper(txtype, level, name, isCharacter);
        if (tpc != null) {
            return tpc;
        }

        TextPlaceholder tp = TextPlaceholder.fromNativeId(txtype);
        switch (tp == null ? TextPlaceholder.BODY : tp) {
            case BODY:
            case CENTER_BODY:
            case HALF_BODY:
            case QUARTER_BODY:
                return getPropHelper(TextPlaceholder.BODY.nativeId, level, name, isCharacter);
            case TITLE:
            case CENTER_TITLE:
                return getPropHelper(TextPlaceholder.TITLE.nativeId, level, name, isCharacter);
            default:
                return null;
        }
    }

