    public void dumpCONTENTSguessed(DirectoryNode dir) throws IOException {
        byte[] data = getData(dir, "CONTENTS");

        System.out.println();
        System.out.println("CONTENTS - " + data.length + " bytes long:");

        String[] startType = new String[20];
        String[] endType = new String[20];
        int[] optA = new int[20];
        int[] optB = new int[20];
        int[] optC = new int[20];
        int[] from = new int[20];
        int[] len = new int[20];

        for(int i=0; i<20; i++) {
            int offset = 0x20 + i*24;
            if(data[offset] == 0x18 && data[offset+1] == 0x00) {
                // Has data
                startType[i] = new String(data, offset+2, 4, LocaleUtil.CHARSET_1252);
                optA[i] = LittleEndian.getUShort(data, offset+6);
                optB[i] = LittleEndian.getUShort(data, offset+8);
                optC[i] = LittleEndian.getUShort(data, offset+10);
                endType[i] = new String(data, offset+12, 4, LocaleUtil.CHARSET_1252);
                from[i] = (int)LittleEndian.getUInt(data, offset+16);
                len[i] = (int)LittleEndian.getUInt(data, offset+20);
            } else {
                // Doesn't have data
            }
        }

        String text = StringUtil.getFromUnicodeLE(
                data, from[0], len[0]/2
        );

        // Dump
        for(int i=0; i<20; i++) {
            String num = Integer.toString(i);
            if(i < 10) {
                num = "0" + i;
            }
            System.out.print(num + " ");

            if(startType[i] == null) {
                System.out.println("(not present)");
            } else {
                System.out.println(
                        "\t" +
                        startType[i] + " " +
                        optA[i] + " " +
                        optB[i] + " " +
                        optC[i]
                );
                System.out.println(
                        "\t" +
                        endType[i] + " " +
                        "from: " +
                        Integer.toHexString(from[i]) +
                        " (" + from[i] + ")" +
                        ", len: " +
                        Integer.toHexString(len[i]) +
                        " (" + len[i] + ")"
                );
            }
        }

        // Text
        System.out.println();
        System.out.println("TEXT:");
        System.out.println(text);
        System.out.println();

        // All the others
        for(int i=0; i<20; i++) {
            if(startType[i] == null) {
                continue;
            }
            int start = from[i];

            System.out.println(
                    startType[i] + " -> " + endType[i] +
                    " @ " + Integer.toHexString(start) +
                    " (" + start + ")"
            );
            System.out.println("\t" + dumpBytes(data, start, 4));
            System.out.println("\t" + dumpBytes(data, start+4, 4));
            System.out.println("\t" + dumpBytes(data, start+8, 4));
            System.out.println("\t(etc)");
        }
    }

