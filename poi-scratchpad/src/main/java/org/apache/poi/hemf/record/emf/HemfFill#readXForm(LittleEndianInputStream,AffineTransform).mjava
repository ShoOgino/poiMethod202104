    public static int readXForm(LittleEndianInputStream leis, AffineTransform xform) {
        // mapping <java AffineTransform> = <xform>

        // m00 (scaleX) = eM11 (Horizontal scaling component)
        double m00 = leis.readFloat();

        // m01 (shearX) = eM12 (Horizontal proportionality constant)
        double m01 = leis.readFloat();

        // m10 (shearY) = eM21 (Vertical proportionality constant)
        double m10 = leis.readFloat();

        // m11 (scaleY) = eM22 (Vertical scaling component)
        double m11 = leis.readFloat();

        // m02 (translateX) = eDx (The horizontal translation component, in logical units.)
        double m02 = leis.readFloat();

        // m12 (translateY) = eDy (The vertical translation component, in logical units.)
        double m12 = leis.readFloat();

        // TODO: not sure, why the shearing has to be inverted here,
        // probably because of the different world/user space transformation
        xform.setTransform(m00, -m10, -m01, m11, m02, m12);

        if (xform.isIdentity()) {
            xform.setToIdentity();
        }

        return 6 * LittleEndianConsts.INT_SIZE;
    }

