    /**
     * Adjusts the internal string for deletinging
     * some characters within this.
     *
     * @param start  The start position for the delete, in characters
     * @param length The number of characters to delete
     */
    @Deprecated
    public void adjustForDelete(int start, int length) {
        int myStart = getStart();
        int myEnd = getEnd();
        int end = start + length;

	   /* do we have to delete from this text piece? */
        if (start <= myEnd && end >= myStart) {

		   /* find where the deleted area overlaps with this text piece */
            int overlapStart = Math.max(myStart, start);
            int overlapEnd = Math.min(myEnd, end);

            int bufStart = overlapStart - myStart;
            int bufEnd = overlapEnd - myStart;
            ((StringBuilder) _buf).delete(bufStart, bufEnd);
        }

        // We need to invoke this even if text from this piece is not being
        // deleted because the adjustment must propagate to all subsequent
        // text pieces i.e., if text from tp[n] is being deleted, then
        // tp[n + 1], tp[n + 2], etc. will need to be adjusted.
        // The superclass is expected to use a separate sentry for this.
        super.adjustForDelete(start, length);
    }

