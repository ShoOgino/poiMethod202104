    public String serialiseEncoder( int fieldNumber, String fieldName,
            String size, String type )
    {
        // String javaType = RecordUtil.getType(size, type, 0);
        String javaFieldName = RecordUtil.getFieldName( fieldNumber, fieldName,
                0 );

        String result = "";

        if ( type.equals( "short[]" ) )
            result = "LittleEndian.putShortArray( data, 0x"
                    + Integer.toHexString( offset ) + " + offset, "
                    + javaFieldName + " );";
        else if ( type.equals( "byte[]" ) )
            result = "System.arraycopy( " + javaFieldName + ", 0, data, 0x"
                    + Integer.toHexString( offset ) + " + offset, "
                    + javaFieldName + ".length );";
        else if ( type.equals( "BorderCode" ) )
            result = javaFieldName + ".serialize( data, 0x"
                    + Integer.toHexString( offset ) + " + offset );";
        else if ( type.equals( "Colorref" ) )
            result = javaFieldName + ".serialize( data, 0x"
                    + Integer.toHexString( offset ) + " + offset );";
        else if ( type.equals( "DateAndTime" ) )
            result = javaFieldName + ".serialize( data, 0x"
                    + Integer.toHexString( offset ) + " + offset );";
        else if ( type.equals( "Grfhic" ) )
            result = javaFieldName + ".serialize( data, 0x"
                    + Integer.toHexString( offset ) + " + offset );";
        else if ( size.equals( "2" ) )
            if ( type.equals( "short" ) )
            {
                result = "LittleEndian.putShort( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, "
                        + javaFieldName + " );";
            }
            else if ( type.equals( "int" ) )
            {
                result = "LittleEndian.putUShort( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, "
                        + javaFieldName + " );";
            }
            else
            {
                result = "LittleEndian.putShort( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, (short)"
                        + javaFieldName + " );";
            }
        else if ( size.equals( "4" ) )
            if ( type.equals( "long" ) )
            {
                result = "LittleEndian.putUInt( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, "
                        + javaFieldName + " );";
            }
            else
            {
                result = "LittleEndian.putInt( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, "
                        + javaFieldName + " );";
            }
        else if ( size.equals( "1" ) )
            if ( type.equals( "byte" ) )
            {
                result = "data[ 0x" + Integer.toHexString( offset )
                        + " + offset ] = " + javaFieldName + ";";
            }
            else
            {
                result = "LittleEndian.putUByte( data, 0x"
                        + Integer.toHexString( offset ) + " + offset, "
                        + javaFieldName + " );";
            }
        else if ( type.equals( "double" ) )
            result = "LittleEndian.putDouble(data, 0x"
                    + Integer.toHexString( offset ) + " + offset, "
                    + javaFieldName + " );";

        try
        {
            offset += Integer.parseInt( size );
        }
        catch ( NumberFormatException ignore )
        {
        }
        return result;

    }

