  private static void handleTabs(ParagraphProperties pap, SprmOperation sprm)
  {
    byte[] grpprl = sprm.getGrpprl();
    int offset = sprm.getGrpprlOffset();
    int delSize = grpprl[offset++];
    int[] tabPositions = pap.getRgdxaTab();
    TabDescriptor[] tabDescriptors = pap.getRgtbd();

    Map<Integer, TabDescriptor> tabMap = new HashMap<>();
    for (int x = 0; x < tabPositions.length; x++)
    {
      tabMap.put(tabPositions[x], tabDescriptors[x]);
    }

    for (int x = 0; x < delSize; x++)
    {
      tabMap.remove((int) LittleEndian.getShort(grpprl, offset));
      offset += LittleEndianConsts.SHORT_SIZE;
    }

    int addSize = grpprl[offset++];
    int start = offset;
    for (int x = 0; x < addSize; x++)
    {
      Integer key = (int) LittleEndian.getShort(grpprl, offset);
      TabDescriptor val = new TabDescriptor( grpprl, start + ((TBDAbstractType.getSize() * addSize) + x) );
      tabMap.put(key, val);
      offset += LittleEndianConsts.SHORT_SIZE;
    }

    tabPositions = new int[tabMap.size()];
    tabDescriptors = new TabDescriptor[tabPositions.length];

    List<Integer> list = new ArrayList<>(tabMap.keySet());
    Collections.sort(list);

    for (int x = 0; x < tabPositions.length; x++)
    {
      Integer key = list.get(x);
      tabPositions[x] = key;
      if (tabMap.containsKey( key ))
          tabDescriptors[x] = tabMap.get(key);
      else
          tabDescriptors[x] = new TabDescriptor();
    }

    pap.setRgdxaTab(tabPositions);
    pap.setRgtbd(tabDescriptors);
  }

