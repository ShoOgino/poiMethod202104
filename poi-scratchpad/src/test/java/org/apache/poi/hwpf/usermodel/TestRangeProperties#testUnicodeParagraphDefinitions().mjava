    /**
     * Tests the raw definitions of the paragraphs of
     *  a unicode document
     */
    @Test
    void testUnicodeParagraphDefinitions() {
        Range r = u.getRange();
        String[] p1_parts = u_page_1.split("\r");

        assertEquals(
                u_page_1 + page_break + "\r" + u_page_2,
                r.text()
        );
        assertEquals(
                408, r.text().length()
        );


        assertEquals(1, r.numSections());
        assertEquals(1, u.getSectionTable().getSections().size());
        Section s = r.getSection(0);
        assertEquals(
                u_page_1 +
                page_break + "\r" +
                u_page_2,
                s.text()
        );
        assertEquals(0, s.getStartOffset());
        assertEquals(408, s.getEndOffset());


        List<PAPX> pDefs = r._paragraphs;
        // no PAPX reconstruction
        // assertEquals(36, pDefs.size());
        // with PAPX reconstruction
        assertEquals( 36, pDefs.size() );

        // Check that the last paragraph ends where it should do
        assertEquals(531, u.getOverallRange().text().length());
        PAPX pLast = pDefs.get(34);
        assertEquals(530, pLast.getEnd());

        // Only care about the first few really though
        PAPX p0 = pDefs.get(0);
        PAPX p1 = pDefs.get(1);
        PAPX p2 = pDefs.get(2);
        PAPX p3 = pDefs.get(3);
        PAPX p4 = pDefs.get(4);

        // 5 paragraphs should get us to the end of our text
        assertTrue(p0.getStart() < 408);
        assertTrue(p0.getEnd() < 408);
        assertTrue(p1.getStart() < 408);
        assertTrue(p1.getEnd() < 408);
        assertTrue(p2.getStart() < 408);
        assertTrue(p2.getEnd() < 408);
        assertTrue(p3.getStart() < 408);
        assertTrue(p3.getEnd() < 408);
        assertTrue(p4.getStart() < 408);
        assertTrue(p4.getEnd() < 408);

        // Paragraphs should match with lines
        assertEquals(
                0,
                p0.getStart()
        );
        assertEquals(
                p1_parts[0].length() + 1,
                p0.getEnd()
        );

        assertEquals(
                p1_parts[0].length() + 1,
                p1.getStart()
        );
        assertEquals(
                p1_parts[0].length() + 1 +
                p1_parts[1].length() + 1,
                p1.getEnd()
        );

        assertEquals(
                p1_parts[0].length() + 1 +
                p1_parts[1].length() + 1,
                p2.getStart()
        );
        assertEquals(
                p1_parts[0].length() + 1 +
                p1_parts[1].length() + 1 +
                p1_parts[2].length() + 1,
                p2.getEnd()
        );
	}

