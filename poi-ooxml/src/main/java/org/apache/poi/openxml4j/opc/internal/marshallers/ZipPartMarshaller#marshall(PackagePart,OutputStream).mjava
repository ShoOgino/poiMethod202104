	/**
	 * Save the specified part to the given stream.
	 *
	 * @param part The {@link PackagePart} to save
	 * @param os The stream to write the data to
	 * @return true if saving was successful or there was nothing to save,
	 * 		false if an error occurred.
	 * 		In case of errors, logging via Log4j 2 is used to provide more information.
	 * @throws OpenXML4JException
	 *      Throws if the stream cannot be written to or an internal exception is thrown.
	 */
	@Override
	public boolean marshall(PackagePart part, OutputStream os)
			throws OpenXML4JException {
		if (!(os instanceof ZipArchiveOutputStream)) {
			LOG.atError().log("Unexpected class {}", os.getClass().getName());
			throw new OpenXML4JException("ZipOutputStream expected !");
			// Normally should happen only in development phase, so just throw
			// exception
		}

		// check if there is anything to save for some parts. We don't do this for all parts as some code
		// might depend on empty parts being saved, e.g. some unit tests verify this currently.
		if(part.getSize() == 0 && part.getPartName().getName().equals(XSSFRelation.SHARED_STRINGS.getDefaultFileName())) {
		    return true;
		}

		ZipArchiveOutputStream zos = (ZipArchiveOutputStream) os;
		ZipArchiveEntry partEntry = new ZipArchiveEntry(ZipHelper
				.getZipItemNameFromOPCName(part.getPartName().getURI()
						.getPath()));
		try {
			// Create next zip entry
			zos.putArchiveEntry(partEntry);

			// Saving data in the ZIP file
			try (final InputStream ins = part.getInputStream()) {
				IOUtils.copy(ins, zos);
			} finally {
				zos.closeArchiveEntry();
			}
		} catch (IOException ioe) {
			LOG.atError().withThrowable(ioe).log("Cannot write: {}: in ZIP", part.getPartName());
			return false;
		}

		// Saving relationship part
		if (part.hasRelationships()) {
			PackagePartName relationshipPartName = PackagingURIHelper
					.getRelationshipPartName(part.getPartName());

			marshallRelationshipPart(part.getRelationships(),
					relationshipPartName, zos);
		}

		return true;
	}

