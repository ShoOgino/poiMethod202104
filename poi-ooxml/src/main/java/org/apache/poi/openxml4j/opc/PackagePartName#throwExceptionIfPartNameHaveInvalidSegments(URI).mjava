	/**
	 * Throws an exception if the part name has empty segments. [M1.3]
	 *
	 * Throws an exception if a segment any characters other than pchar
	 * characters. [M1.6]
	 *
	 * Throws an exception if a segment contain percent-encoded forward slash
	 * ('/'), or backward slash ('\') characters. [M1.7]
	 *
	 * Throws an exception if a segment contain percent-encoded unreserved
	 * characters. [M1.8]
	 *
	 * Throws an exception if the specified part name's segments end with a dot
	 * ('.') character. [M1.9]
	 *
	 * Throws an exception if a segment doesn't include at least one non-dot
	 * character. [M1.10]
	 *
	 * @param partUri
	 *            The part name to check.
	 * @throws InvalidFormatException
	 *             if the specified URI contain an empty segments or if one the
	 *             segments contained in the part name, ends with a dot ('.')
	 *             character.
	 */
	private static void throwExceptionIfPartNameHaveInvalidSegments(URI partUri)
			throws InvalidFormatException {
		if (partUri == null) {
			throw new IllegalArgumentException("partUri");
		}

		// Split the URI into several part and analyze each
		String[] segments = partUri.toASCIIString()
	        .replaceFirst("^"+PackagingURIHelper.FORWARD_SLASH_CHAR,"")
	        .split(PackagingURIHelper.FORWARD_SLASH_STRING);
		
		if (segments.length < 1) {
            throw new InvalidFormatException(
				"A part name shall not have empty segments [M1.3]: " + partUri.getPath());
        }

		for (final String seg : segments) {
			if (seg == null || seg.isEmpty()) {
				throw new InvalidFormatException(
					"A part name shall not have empty segments [M1.3]: " + partUri.getPath());
			}

			if (seg.endsWith(".")) {
				throw new InvalidFormatException(
					"A segment shall not end with a dot ('.') character [M1.9]: " + partUri.getPath());
			}

			if (seg.replaceAll("\\\\.", "").isEmpty()) {
				// Normally will never been invoked with the previous
				// implementation rule [M1.9]
				throw new InvalidFormatException(
					"A segment shall include at least one non-dot character. [M1.10]: " + partUri.getPath());
			}

			// Check for rule M1.6, M1.7, M1.8
			checkPCharCompliance(seg);
		}
	}

