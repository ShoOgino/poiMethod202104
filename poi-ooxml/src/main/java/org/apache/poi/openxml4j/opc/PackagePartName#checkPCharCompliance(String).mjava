	/**
	 * Throws an exception if a segment any characters other than pchar
	 * characters. [M1.6]
	 *
	 * Throws an exception if a segment contain percent-encoded forward slash
	 * ('/'), or backward slash ('\') characters. [M1.7]
	 *
	 * Throws an exception if a segment contain percent-encoded unreserved
	 * characters. [M1.8]
	 *
	 * @param segment
	 *            The segment to check
	 */
	private static void checkPCharCompliance(String segment)
			throws InvalidFormatException {
		final int length = segment.length();
		for (int i = 0; i < length; ++i) {
			final char c = segment.charAt(i);

			/* Check rule M1.6 */

			if (
    			// Check for digit or letter
		        isDigitOrLetter(c) ||
                // Check "-", ".", "_", "~"
                RFC3986_PCHAR_UNRESERVED_SUP.indexOf(c) > -1 ||
                // Check ":", "@"
                RFC3986_PCHAR_AUTHORIZED_SUP.indexOf(c) > -1 ||
                // Check "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
                RFC3986_PCHAR_SUB_DELIMS.indexOf(c) > -1
            ) {
			    continue;
			}
			

			if (c != '%') {
	            throw new InvalidFormatException(
                    "A segment shall not hold any characters other than pchar characters. [M1.6]");
			}			    
			    
			// We certainly found an encoded character, check for length
			// now ( '%' HEXDIGIT HEXDIGIT)
			if ((length - i) < 2 || !isHexDigit(segment.charAt(i+1)) || !isHexDigit(segment.charAt(i+2))) {
				throw new InvalidFormatException("The segment " + segment + " contain invalid encoded character !");
			}

			// Decode the encoded character
			final char decodedChar = (char) Integer.parseInt(segment.substring(i + 1, i + 3), 16);
			i += 2;

			/* Check rule M1.7 */
			if (decodedChar == '/' || decodedChar == '\\') {
				throw new InvalidFormatException(
					"A segment shall not contain percent-encoded forward slash ('/'), or backward slash ('\') characters. [M1.7]");
			}

			/* Check rule M1.8 */
			if (
			     // Check for unreserved character like define in RFC3986
		        isDigitOrLetter(decodedChar) ||
		        // Check for unreserved character "-", ".", "_", "~"
		        RFC3986_PCHAR_UNRESERVED_SUP.indexOf(decodedChar) > -1
	        ) {
                throw new InvalidFormatException(
                    "A segment shall not contain percent-encoded unreserved characters. [M1.8]");
			}
		}
	}

