    /**
     * Retrieves the parts from this package. We assume that the package has not
     * been yet inspect to retrieve all the parts, this method will open the
     * archive and look for all parts contain inside it.
     *
     * @return All parts contain in this package.
     * @throws InvalidFormatException if the package is not valid.
     */
    @Override
    protected PackagePartCollection getPartsImpl() throws InvalidFormatException {
        final PackagePartCollection newPartList = new PackagePartCollection();

        if (zipArchive == null) {
            return newPartList;
        }

        // First we need to parse the content type part
        final ZipArchiveEntry contentTypeEntry =
                zipArchive.getEntry(CONTENT_TYPES_PART_NAME);
        if (contentTypeEntry != null) {
            if (this.contentTypeManager != null) {
                throw new InvalidFormatException("ContentTypeManager can only be created once. This must be a cyclic relation?");
            }
            try {
                this.contentTypeManager = new ZipContentTypeManager(
                        zipArchive.getInputStream(contentTypeEntry), this);
            } catch (IOException e) {
                throw new InvalidFormatException(e.getMessage(), e);
            }
        } else {
            // Is it a different Zip-based format?
            final boolean hasMimetype = zipArchive.getEntry(MIMETYPE) != null;
            final boolean hasSettingsXML = zipArchive.getEntry(SETTINGS_XML) != null;
            if (hasMimetype && hasSettingsXML) {
                throw new ODFNotOfficeXmlFileException(
                        "The supplied data appears to be in ODF (Open Document) Format. " +
                                "Formats like these (eg ODS, ODP) are not supported, try Apache ODFToolkit");
            }
            if (!zipArchive.getEntries().hasMoreElements()) {
                throw new NotOfficeXmlFileException(
                        "No valid entries or contents found, this is not a valid OOXML " +
                                "(Office Open XML) file");
            }
            // Fallback exception
            throw new InvalidFormatException(
                    "Package should contain a content type part [M1.13]");
        }

        // Now create all the relationships
        // (Need to create relationships before other
        //  parts, otherwise we might create a part before
        //  its relationship exists, and then it won't tie up)
        final List<EntryTriple> entries =
                Collections.list(zipArchive.getEntries()).stream()
                        .map(zae -> new EntryTriple(zae, contentTypeManager))
                        .filter(mm -> mm.partName != null)
                        .sorted()
                        .collect(Collectors.toList());

        for (final EntryTriple et : entries) {
            et.register(newPartList);
        }

        return newPartList;
    }

