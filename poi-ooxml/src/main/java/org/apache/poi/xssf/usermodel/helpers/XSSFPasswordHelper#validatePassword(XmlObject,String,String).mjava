    /**
     * Validates the password, i.e.
     * calculates the hash of the given password and compares it against the stored hash
     *
     * @param xobj the xmlbeans object which contains the password attributes
     * @param password the password, if null the method will always return false,
     *  even if there's no password set
     * @param prefix the prefix of the password attributes, may be null
     * 
     * @return true, if the hashes match
     */
    public static boolean validatePassword(XmlObject xobj, String password, String prefix) {
        // TODO: is "velvetSweatshop" the default password?
        if (password == null) return false;
        
        XmlCursor cur = xobj.newCursor();
        String xorHashVal = cur.getAttributeText(getAttrName(prefix, "password"));
        String algoName = cur.getAttributeText(getAttrName(prefix, "algorithmName"));
        String hashVal = cur.getAttributeText(getAttrName(prefix, "hashValue"));
        String saltVal = cur.getAttributeText(getAttrName(prefix, "saltValue"));
        String spinCount = cur.getAttributeText(getAttrName(prefix, "spinCount"));
        cur.dispose();

        if (xorHashVal != null) {
            int hash1 = Integer.parseInt(xorHashVal, 16);
            int hash2 = CryptoFunctions.createXorVerifier1(password);
            return hash1 == hash2;
        } else {
            if (hashVal == null || algoName == null || saltVal == null || spinCount == null) {
                return false;
            }

            Base64.Decoder dec64 = Base64.getDecoder();

            byte[] hash1 = dec64.decode(hashVal);
            HashAlgorithm hashAlgo = HashAlgorithm.fromString(algoName);
            byte[] salt = dec64.decode(saltVal);
            int spinCnt = Integer.parseInt(spinCount);
            byte[] hash2 = CryptoFunctions.hashPassword(password, hashAlgo, salt, spinCnt, false);
            return Arrays.equals(hash1, hash2);
        }
    }

