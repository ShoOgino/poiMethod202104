    /**
     * Returns the text from all paragraphs in the shape. Paragraphs are
     * separated by new lines.
     *
     * @return text contained within this shape or empty string
     */
    public String getText() {
        final int MAX_LEVELS = 9;
        StringBuilder out = new StringBuilder();
        List<Integer> levelCount = new ArrayList<>(MAX_LEVELS); // maximum 9
                                                                // levels
        // initialise the levelCount array - this maintains a record of the
        // numbering to be used at each level
        for (int k = 0; k < MAX_LEVELS; k++) {
            levelCount.add(0);
        }

        for (int i = 0; i < _paragraphs.size(); i++) {
            if (out.length() > 0) {
                out.append('\n');
            }
            XSSFTextParagraph p = _paragraphs.get(i);

            if (p.isBullet() && p.getText().length() > 0) {

                int level = Math.min(p.getLevel(), MAX_LEVELS - 1);

                if (p.isBulletAutoNumber()) {
                    i = processAutoNumGroup(i, level, levelCount, out);
                } else {
                    // indent appropriately for the level
                    for (int j = 0; j < level; j++) {
                        out.append('\t');
                    }
                    String character = p.getBulletCharacter();
                    out.append(character.length() > 0 ? character + " " : "- ");
                    out.append(p.getText());
                }
            } else {
                out.append(p.getText());

                // this paragraph is not a bullet, so reset the count array
                for (int k = 0; k < MAX_LEVELS; k++) {
                    levelCount.set(k, 0);
                }
            }
        }

        return out.toString();
    }

