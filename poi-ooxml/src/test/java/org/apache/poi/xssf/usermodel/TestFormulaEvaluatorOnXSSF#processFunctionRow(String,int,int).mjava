	@ParameterizedTest
	@MethodSource("data")
	void processFunctionRow(String targetFunctionName, int formulasRowIdx, int expectedValuesRowIdx) {
	    Row formulasRow = sheet.getRow(formulasRowIdx);
	    Row expectedValuesRow = sheet.getRow(expectedValuesRowIdx);

		short endcolnum = formulasRow.getLastCellNum();

		// iterate across the row for all the evaluation cases
		for (short colnum=SS.COLUMN_INDEX_FIRST_TEST_VALUE; colnum < endcolnum; colnum++) {
			Cell c = formulasRow.getCell(colnum);
			assumeTrue(c != null);
			assumeTrue(c.getCellType() == CellType.FORMULA);
			ignoredFormulaTestCase(c.getCellFormula());

			CellValue actValue = evaluator.evaluate(c);
			Cell expValue = (expectedValuesRow == null) ? null : expectedValuesRow.getCell(colnum);

			String msg = String.format(Locale.ROOT, "Function '%s': Formula: %s @ %d:%d"
		        , targetFunctionName, c.getCellFormula(), formulasRow.getRowNum(), colnum);

			assertNotNull(expValue, msg + " - Bad setup data expected value is null");
			assertNotNull(actValue, msg + " - actual value was null");

	        final CellType expectedCellType = expValue.getCellType();
	        switch (expectedCellType) {
	            case BLANK:
	                assertEquals(CellType.BLANK, actValue.getCellType(), msg);
	                break;
	            case BOOLEAN:
	                assertEquals(CellType.BOOLEAN, actValue.getCellType(), msg);
	                assertEquals(expValue.getBooleanCellValue(), actValue.getBooleanValue(), msg);
	                break;
	            case ERROR:
	                assertEquals(CellType.ERROR, actValue.getCellType(), msg);
//	              if(false) { // TODO: fix ~45 functions which are currently returning incorrect error values
//	                  assertEquals(msg, expValue.getErrorCellValue(), actValue.getErrorValue());
//	              }
	                break;
	            case FORMULA: // will never be used, since we will call method after formula evaluation
	                fail("Cannot expect formula as result of formula evaluation: " + msg);
	            case NUMERIC:
	                assertEquals(CellType.NUMERIC, actValue.getCellType(), msg);
					BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, BaseTestNumeric.DIFF_TOLERANCE_FACTOR);
//	              double delta = Math.abs(expValue.getNumericCellValue()-actValue.getNumberValue());
//	              double pctExpValue = Math.abs(0.00001*expValue.getNumericCellValue());
//	              assertTrue(msg, delta <= pctExpValue);
	                break;
	            case STRING:
	                assertEquals(CellType.STRING, actValue.getCellType(), msg);
	                assertEquals(expValue.getRichStringCellValue().getString(), actValue.getStringValue(), msg);
	                break;
	            default:
	                fail("Unexpected cell type: " + expectedCellType);
	        }
		}
	}

