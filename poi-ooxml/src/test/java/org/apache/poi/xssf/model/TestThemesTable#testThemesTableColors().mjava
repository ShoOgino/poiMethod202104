    @Test
    void testThemesTableColors() throws Exception {
        // Load our two test workbooks
        String testFileSimple = "Themes.xlsx";
        XSSFWorkbook simple = XSSFTestDataSamples.openSampleWorkbook(testFileSimple);
        XSSFWorkbook complex = XSSFTestDataSamples.openSampleWorkbook(testFileComplex);
        // Save and re-load them, to check for stability across that
        XSSFWorkbook simpleRS = XSSFTestDataSamples.writeOutAndReadBack(simple);
        XSSFWorkbook complexRS = XSSFTestDataSamples.writeOutAndReadBack(complex);
        // Fetch fresh copies to test with
        simple.close();
        simple = XSSFTestDataSamples.openSampleWorkbook(testFileSimple);
        complex.close();
        complex = XSSFTestDataSamples.openSampleWorkbook(testFileComplex);
        // Files and descriptions
        Map<String,XSSFWorkbook> workbooks = new LinkedHashMap<>();
        workbooks.put(testFileSimple, simple);
        workbooks.put("Re-Saved_" + testFileSimple, simpleRS);
        workbooks.put(testFileComplex, complex);
        workbooks.put("Re-Saved_" + testFileComplex, complexRS);

        // Sanity check
        assertEquals(12, rgbExpected.length);

        // Check each workbook in turn, and verify that the colours
        //  for the theme-applied cells in Column A are correct
        for (String whatWorkbook : workbooks.keySet()) {
            XSSFWorkbook workbook = workbooks.get(whatWorkbook);
            XSSFSheet sheet = workbook.getSheetAt(0);
            int startRN = 0;
            if (whatWorkbook.endsWith(testFileComplex)) startRN++;

            for (int rn=startRN; rn<rgbExpected.length+startRN; rn++) {
                XSSFRow row = sheet.getRow(rn);
                assertNotNull(row, "Missing row " + rn + " in " + whatWorkbook);
                String ref = (new CellReference(rn, 0)).formatAsString();
                XSSFCell cell = row.getCell(0);
                assertNotNull(cell, "Missing cell " + ref + " in " + whatWorkbook);

                int expectedThemeIdx = rn-startRN;
                ThemeElement themeElem = ThemeElement.byId(expectedThemeIdx);
                assertEquals(themeElem.name.toLowerCase(Locale.ROOT), cell.getStringCellValue(),
                    "Wrong theme at " + ref + " in " + whatWorkbook);

                // Fonts are theme-based in their colours
                XSSFFont font = cell.getCellStyle().getFont();
                CTColor ctColor = font.getCTFont().getColorArray(0);
                assertNotNull(ctColor);
                assertTrue(ctColor.isSetTheme());
                assertEquals(themeElem.idx, ctColor.getTheme());

                // Get the colour, via the theme
                XSSFColor color = font.getXSSFColor();
                // Theme colours aren't tinted
                assertFalse(color.hasTint());
                // Check the RGB part (no tint)
                assertEquals(rgbExpected[expectedThemeIdx], Hex.encodeHexString(color.getRGB()),
                    "Wrong theme colour " + themeElem.name + " on " + whatWorkbook);
                long themeIdx = font.getCTFont().getColorArray(0).getTheme();
                assertEquals(expectedThemeIdx, themeIdx,
                    "Wrong theme index " + expectedThemeIdx + " on " + whatWorkbook);

                if (createFiles) {
                    XSSFCellStyle cs = row.getSheet().getWorkbook().createCellStyle();
                    cs.setFillForegroundColor(color);
                    cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                    row.createCell(1).setCellStyle(cs);
                }
            }

            if (createFiles) {
                FileOutputStream fos = new FileOutputStream("Generated_"+whatWorkbook);
                workbook.write(fos);
                fos.close();
            }
        }

        simpleRS.close();
        simple.close();
        complexRS.close();
        complex.close();
    }

