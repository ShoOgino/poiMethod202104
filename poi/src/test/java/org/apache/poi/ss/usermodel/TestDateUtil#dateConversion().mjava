    /**
     * Checks the date conversion functions in the DateUtil class.
     */
    @Test
    void dateConversion() {

        // Iterating over the hours exposes any rounding issues.
        Calendar cal = LocaleUtil.getLocaleCalendar(2002,JANUARY,1,0,1,1);
        for (int hour = 0; hour < 24; hour++) {
            double excelDate = DateUtil.getExcelDate(cal.getTime(), false);

            assertEquals(cal.getTime().getTime(), DateUtil.getJavaDate(excelDate, false).getTime(),
                "getJavaDate: Checking hour = " + hour);

            LocalDateTime ldt = LocalDateTime.ofInstant(cal.toInstant(), cal.getTimeZone().toZoneId());
            assertEquals(ldt, DateUtil.getLocalDateTime(excelDate, false),
                "getLocalDateTime: Checking hour = " + hour);

            cal.add(Calendar.HOUR_OF_DAY, 1);
        }

        // check 1900 and 1904 date windowing conversions
        double excelDate = 36526.0;
        // with 1900 windowing, excelDate is Jan. 1, 2000
        // with 1904 windowing, excelDate is Jan. 2, 2004
        cal.set(2000,JANUARY,1,0,0,0); // Jan. 1, 2000
        Date dateIf1900 = cal.getTime();
        cal.add(Calendar.YEAR,4); // now Jan. 1, 2004
        cal.add(Calendar.DATE,1); // now Jan. 2, 2004
        Date dateIf1904 = cal.getTime();
        // 1900 windowing
        assertEquals(dateIf1900.getTime(), DateUtil.getJavaDate(excelDate,false).getTime(),
            "Checking 1900 Date Windowing");
        // 1904 windowing
        assertEquals(dateIf1904.getTime(), DateUtil.getJavaDate(excelDate,true).getTime(),
            "Checking 1904 Date Windowing");
        // 1900 windowing (LocalDateTime)
        assertEquals(LocalDateTime.of(2000,1,1,0,0), DateUtil.getLocalDateTime(excelDate,false),
            "Checking 1900 Date Windowing");
        // 1904 windowing (LocalDateTime)
        assertEquals(LocalDateTime.of(2004,1,2,0,0), DateUtil.getLocalDateTime(excelDate,true),
            "Checking 1904 Date Windowing");
    }

