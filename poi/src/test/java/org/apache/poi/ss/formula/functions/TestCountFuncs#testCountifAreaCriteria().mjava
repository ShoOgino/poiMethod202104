	/**
	 * the criteria arg is mostly handled by {@link OperandResolver#getSingleValue(org.apache.poi.ss.formula.eval.ValueEval, int, int)}}
	 */
	@Test
	void testCountifAreaCriteria() {
		int srcColIx = 2; // anything but column A

		ValueEval v0 = new NumberEval(2.0);
		ValueEval v1 = new StringEval("abc");
		ValueEval v2 = ErrorEval.DIV_ZERO;

		AreaEval ev = EvalFactory.createAreaEval("A10:A12", new ValueEval[] { v0, v1, v2, });

		I_MatchPredicate mp;
		mp = Countif.createCriteriaPredicate(ev, 9, srcColIx);
		assertNotNull(mp);
		confirmPredicate(true, mp, srcColIx);
		confirmPredicate(false, mp, "abc");
		confirmPredicate(false, mp, ErrorEval.DIV_ZERO);

		mp = Countif.createCriteriaPredicate(ev, 10, srcColIx);
		assertNotNull(mp);
		confirmPredicate(false, mp, srcColIx);
		confirmPredicate(true, mp, "abc");
		confirmPredicate(false, mp, ErrorEval.DIV_ZERO);

		mp = Countif.createCriteriaPredicate(ev, 11, srcColIx);
		assertNotNull(mp);
		confirmPredicate(false, mp, srcColIx);
		confirmPredicate(false, mp, "abc");
		confirmPredicate(true, mp, ErrorEval.DIV_ZERO);
		confirmPredicate(false, mp, ErrorEval.VALUE_INVALID);

		// tricky: indexing outside of A10:A12
		// even this #VALUE! error gets used by COUNTIF as valid criteria
		mp = Countif.createCriteriaPredicate(ev, 12, srcColIx);
		assertNotNull(mp);
		confirmPredicate(false, mp, srcColIx);
		confirmPredicate(false, mp, "abc");
		confirmPredicate(false, mp, ErrorEval.DIV_ZERO);
		confirmPredicate(true, mp, ErrorEval.VALUE_INVALID);
	}

