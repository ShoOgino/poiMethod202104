	/**
	 * Shows a basic use-case for {@link ForkedEvaluator}
	 */
	@Test
	void testBasic() throws IOException {
		try (Workbook wb = createWorkbook()) {

			// The stability classifier is useful to reduce memory consumption of caching logic
			IStabilityClassifier stabilityClassifier = (sheetIndex, rowIndex, columnIndex) -> sheetIndex == 1;

			ForkedEvaluator fe1 = ForkedEvaluator.create(wb, stabilityClassifier, null);
			ForkedEvaluator fe2 = ForkedEvaluator.create(wb, stabilityClassifier, null);

			// fe1 and fe2 can be used concurrently on separate threads

			fe1.updateCell("Inputs", 0, 0, new NumberEval(4.0));
			fe1.updateCell("Inputs", 0, 1, new NumberEval(1.1));

			fe2.updateCell("Inputs", 0, 0, new NumberEval(1.2));
			fe2.updateCell("Inputs", 0, 1, new NumberEval(2.0));

			NumberEval eval1 = (NumberEval) fe1.evaluate("Calculations", 0, 0);
			assertNotNull(eval1);
			assertEquals(18.9, eval1.getNumberValue(), 0.0);
			NumberEval eval2 = (NumberEval) fe2.evaluate("Calculations", 0, 0);
			assertNotNull(eval2);
			assertEquals(4.0, eval2.getNumberValue(), 0.0);
			fe1.updateCell("Inputs", 0, 0, new NumberEval(3.0));
			eval1 = (NumberEval) fe1.evaluate("Calculations", 0, 0);
			assertNotNull(eval1);
			assertEquals(13.9, eval1.getNumberValue(), 0.0);
		}
	}

