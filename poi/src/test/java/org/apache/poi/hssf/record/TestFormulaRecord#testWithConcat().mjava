	@Test
	void testWithConcat() {
		// =CHOOSE(2,A2,A3,A4)
		byte[] data = {
				1, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 57,
				64, 0, 0, 12, 0, 12, -4, 46, 0,
				30, 2, 0,	// Int - 2
				25, 4, 3, 0, // Attr
					8, 0, 17, 0, 26, 0, // jumpTable
					35, 0, // chooseOffset
				36, 1, 0, 0, -64, // Ref - A2
				25, 8, 21, 0, // Attr
				36, 2, 0, 0, -64, // Ref - A3
				25,	8, 12, 0, // Attr
				36, 3, 0, 0, -64, // Ref - A4
				25, 8, 3, 0,  // Attr
				66, 4, 100, 0 // CHOOSE
		};
		RecordInputStream inp = TestcaseRecordInputStream.create(FormatRecord.sid, data);

		FormulaRecord fr = new FormulaRecord(inp);

		Ptg[] ptgs = fr.getParsedExpression();
		assertEquals(9, ptgs.length);
		assertEquals(IntPtg.class,	   ptgs[0].getClass());
		assertEquals(AttrPtg.class,	  ptgs[1].getClass());
		assertEquals(RefPtg.class, ptgs[2].getClass());
		assertEquals(AttrPtg.class,	  ptgs[3].getClass());
		assertEquals(RefPtg.class, ptgs[4].getClass());
		assertEquals(AttrPtg.class,	  ptgs[5].getClass());
		assertEquals(RefPtg.class, ptgs[6].getClass());
		assertEquals(AttrPtg.class,	  ptgs[7].getClass());
		assertEquals(FuncVarPtg.class,   ptgs[8].getClass());

		FuncVarPtg choose = (FuncVarPtg)ptgs[8];
		assertEquals("CHOOSE", choose.getName());
	}

