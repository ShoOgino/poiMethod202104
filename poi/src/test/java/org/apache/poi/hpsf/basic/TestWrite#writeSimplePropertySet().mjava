    /**
     * <p>Writes a simple property set with a SummaryInformation section to a
     * POIFS and reads it back in.</p>
     *
     * @exception IOException if an I/O exception occurs
     * @exception UnsupportedVariantTypeException if HPSF does not yet support
     * a variant type to be written
     */
    @Test
    void writeSimplePropertySet()
    throws IOException, UnsupportedVariantTypeException {
        final String AUTHOR = "Rainer Klute";
        final String TITLE = "Test Document";
        final File dataDir = _samples.getFile("");
        final File filename = new File(dataDir, POI_FS);
        filename.deleteOnExit();
        try (OutputStream out = new FileOutputStream(filename);
            POIFSFileSystem poiFs = new POIFSFileSystem()) {

            final PropertySet ps = new PropertySet();
            final Section si = new Section();
            si.setFormatID(SummaryInformation.FORMAT_ID);
            ps.clearSections();
            ps.addSection(si);

            final Property p = new Property();
            p.setID(PropertyIDMap.PID_AUTHOR);
            p.setType(Variant.VT_LPWSTR);
            p.setValue(AUTHOR);
            si.setProperty(p);
            si.setProperty(PropertyIDMap.PID_TITLE, Variant.VT_LPSTR, TITLE);

            poiFs.createDocument(ps.toInputStream(), SummaryInformation.DEFAULT_STREAM_NAME);
            poiFs.writeFilesystem(out);
        }

        /* Read the POIFS: */
        final List<PropertySet> psa = new ArrayList<>();
        final POIFSReader r = new POIFSReader();
        r.registerListener(getListener(psa), SummaryInformation.DEFAULT_STREAM_NAME);
        r.read(filename);
        assertEquals(1, psa.size());
        assertTrue(psa.get(0).isSummaryInformation());

        final Section s = psa.get(0).getSections().get(0);
        Object p1 = s.getProperty(PropertyIDMap.PID_AUTHOR);
        Object p2 = s.getProperty(PropertyIDMap.PID_TITLE);
        assertEquals(AUTHOR, p1);
        assertEquals(TITLE, p2);
    }

