    /**
     * Writes and reads back various variant types and checks whether the
     * stuff that has been read back equals the stuff that was written.
     */
    @Test
    void variantTypes() throws Exception {
        final int codepage = CODEPAGE_DEFAULT;
        Assumptions.assumeTrue(hasProperDefaultCharset(), IMPROPER_DEFAULT_CHARSET_MESSAGE);

        check(Variant.VT_EMPTY, null, codepage);
        check(Variant.VT_BOOL, Boolean.TRUE, codepage);
        check(Variant.VT_BOOL, Boolean.FALSE, codepage);
        check( Variant.VT_CF, new byte[] { 8, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3, 4 }, codepage );
        check(Variant.VT_I4, 27, codepage);
        check(Variant.VT_I8, 28L, codepage);
        check(Variant.VT_R8, 29.0d, codepage);
        check(Variant.VT_I4, -27, codepage);
        check(Variant.VT_I8, -28L, codepage);
        check(Variant.VT_R8, -29.0d, codepage);
        check(Variant.VT_FILETIME, new Date(), codepage);
        check(Variant.VT_I4, Integer.MAX_VALUE, codepage);
        check(Variant.VT_I4, Integer.MIN_VALUE, codepage);
        check(Variant.VT_I8, Long.MAX_VALUE, codepage);
        check(Variant.VT_I8, Long.MIN_VALUE, codepage);
        check(Variant.VT_R8, Double.MAX_VALUE, codepage);
        check(Variant.VT_R8, Double.MIN_VALUE, codepage);
        checkString(Variant.VT_LPSTR, "\u00e4\u00f6\u00fc\u00df\u00c4\u00d6\u00dc", codepage);
        checkString(Variant.VT_LPWSTR, "\u00e4\u00f6\u00fc\u00df\u00c4\u00d6\u00dc", codepage);
    }

