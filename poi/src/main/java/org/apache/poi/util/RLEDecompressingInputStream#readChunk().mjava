    /**
     * Reads a single chunk from the underlying inputstream.
     *
     * @return number of bytes that were read, or -1 if the end of the stream was reached.
     * @throws IOException
     */
    private int readChunk() throws IOException {
        pos = 0;
        int w = readShort(in);
        if (w == -1 || w == 0) {
            return -1;
        }
        int chunkSize = (w & 0x0FFF) + 1; // plus 3 bytes minus 2 for the length
        if ((w & 0x7000) != 0x3000) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Chunksize header A should be 0x3000, received 0x%04X", w & 0xE000));
        }
        boolean rawChunk = (w & 0x8000) == 0;
        if (rawChunk) {
            if (IOUtils.readFully(in, buf, 0, chunkSize) < chunkSize) {
                throw new IllegalStateException(String.format(Locale.ROOT, "Not enough bytes read, expected %d", chunkSize));
            }
            return chunkSize;
        } else {
            int inOffset = 0;
            int outOffset = 0;
            while (inOffset < chunkSize) {
                int tokenFlags = in.read();
                inOffset++;
                if (tokenFlags == -1) {
                    break;
                }
                for (int n = 0; n < 8; n++) {
                    if (inOffset >= chunkSize) {
                        break;
                    }
                    if ((tokenFlags & POWER2[n]) == 0) {
                        // literal
                        final int b = in.read();
                        if (b == -1) {
                            return -1;
                        }
                        buf[outOffset++] = (byte) b;
                        inOffset++;
                    } else {
                        // compressed token
                        int token = readShort(in);
                        if (token == -1) {
                            return -1;
                        }
                        inOffset += 2;
                        int copyLenBits = getCopyLenBits(outOffset - 1);
                        int copyOffset = (token >> (copyLenBits)) + 1;
                        int copyLen = (token & (POWER2[copyLenBits] - 1)) + 3;
                        int startPos = outOffset - copyOffset;
                        int endPos = startPos + copyLen;
                        for (int i = startPos; i < endPos; i++) {
                            buf[outOffset++] = buf[i];
                        }
                    }
                }
            }
            return outOffset;
        }
    }

