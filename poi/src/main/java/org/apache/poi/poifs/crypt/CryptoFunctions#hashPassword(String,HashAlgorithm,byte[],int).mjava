    /**
     * <p><cite>2.3.4.7 ECMA-376 Document Encryption Key Generation (Standard Encryption)<br>
     * 2.3.4.11 Encryption Key Generation (Agile Encryption)</cite></p>
     *
     * <p>The encryption key for ECMA-376 document encryption [ECMA-376] using agile
     * encryption MUST be generated by using the following method, which is derived from PKCS #5:
     * <a href="https://www.ietf.org/rfc/rfc2898.txt">Password-Based Cryptography Version 2.0 [RFC2898]</a>.</p>
     *
     * <p>Let H() be a hashing algorithm as determined by the PasswordKeyEncryptor.hashAlgorithm
     * element, H_n be the hash data of the n-th iteration, and a plus sign (+) represent concatenation.
     * The password MUST be provided as an array of Unicode characters. Limitations on the length of the
     * password and the characters used by the password are implementation-dependent.
     * The initial password hash is generated as follows:</p>
     *
     *
     * <pre>H_0 = H(salt + password)</pre>
     *
     * <p>The salt used MUST be generated randomly. The salt MUST be stored in the
     * PasswordKeyEncryptor.saltValue element contained within the \EncryptionInfo stream as
     * specified in section 2.3.4.10. The hash is then iterated by using the following approach:</p>
     *
     * <pre>H_n = H(iterator + H_n-1)</pre>
     *
     * <p>where iterator is an unsigned 32-bit value that is initially set to 0x00000000 and then incremented
     * monotonically on each iteration until PasswordKey.spinCount iterations have been performed.
     * The value of iterator on the last iteration MUST be one less than PasswordKey.spinCount.</p>
     *
     * <p>For POI, H_final will be calculated by {@link #generateKey(byte[],HashAlgorithm,byte[],int)}</p>
     *
     * @param password the password
     * @param hashAlgorithm the hash algorithm
     * @param salt the initial salt value
     * @param spinCount the repetition count
     * @return the hashed password
     */
    public static byte[] hashPassword(String password, HashAlgorithm hashAlgorithm, byte[] salt, int spinCount) {
        return hashPassword(password, hashAlgorithm, salt, spinCount, true);
    }

