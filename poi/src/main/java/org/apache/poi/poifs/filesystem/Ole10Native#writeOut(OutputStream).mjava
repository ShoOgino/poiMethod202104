    /**
     * Have the contents printer out into an OutputStream, used when writing a
     * file back out to disk (Normally, atom classes will keep their bytes
     * around, but non atom classes will just request the bytes from their
     * children, then chuck on their header and return)
     */
    public void writeOut(OutputStream out) throws IOException {
        // byte intbuf[] = new byte[LittleEndianConsts.INT_SIZE];
        // byte shortbuf[] = new byte[LittleEndianConsts.SHORT_SIZE];

        @SuppressWarnings("resource")
        LittleEndianOutputStream leosOut = new LittleEndianOutputStream(out);

        switch (mode) {
            case parsed: {
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                try (LittleEndianOutputStream leos = new LittleEndianOutputStream(bos)) {
                    // total size, will be determined later ..

                    leos.writeShort(getFlags1());
                    leos.write(getLabel().getBytes(ISO1));
                    leos.write(0);
                    leos.write(getFileName().getBytes(ISO1));
                    leos.write(0);
                    leos.writeShort(getFlags2());
                    leos.writeShort(getUnknown1());
                    leos.writeInt(getCommand().length() + 1);
                    leos.write(getCommand().getBytes(ISO1));
                    leos.write(0);
                    leos.writeInt(getDataSize());
                    leos.write(getDataBuffer());

                    if (command2 == null || label2 == null || fileName2 == null) {
                        leos.writeShort(0);
                    } else {
                        leos.writeUInt(command2.length());
                        leos.write(StringUtil.getToUnicodeLE(command2));
                        leos.writeUInt(label2.length());
                        leos.write(StringUtil.getToUnicodeLE(label2));
                        leos.writeUInt(fileName2.length());
                        leos.write(StringUtil.getToUnicodeLE(fileName2));
                    }
                }

                // total size
                leosOut.writeInt(bos.size());
                bos.writeTo(out);
                break;
            }

            case compact:
                leosOut.writeInt(getDataSize() + LittleEndianConsts.SHORT_SIZE);
                leosOut.writeShort(getFlags1());
                out.write(getDataBuffer());
                break;

            default:
            case unparsed:
                leosOut.writeInt(getDataSize());
                out.write(getDataBuffer());
                break;
        }

    }

