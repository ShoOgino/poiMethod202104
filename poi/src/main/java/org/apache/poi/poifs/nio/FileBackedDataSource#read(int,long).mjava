    @Override
    public ByteBuffer read(int length, long position) throws IOException {
        if (position >= size()) {
            throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");
        }

        // TODO Could we do the read-only case with MapMode.PRIVATE instead?
        // See https://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.MapMode.html#PRIVATE
        // Or should we have 3 modes instead of the current boolean -
        //  read-write, read-only, read-to-write-elsewhere?

        // Do we read or map (for read/write)?
        ByteBuffer dst;
        if (writable) {
            dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);

            // remember this buffer for cleanup
            buffersToClean.put(dst,dst);
        } else {
            channel.position(position);

            // allocate the buffer on the heap if we cannot map the data in directly
            dst = ByteBuffer.allocate(length);

            // Read the contents and check that we could read some data
            int worked = IOUtils.readFully(channel, dst);
            if (worked == -1) {
                throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");
            }
        }

        // make it ready for reading
        dst.position(0);

        // All done
        return dst;
    }

