    @Override
    public void drawContent(Graphics2D graphics) {
        TextShape<?,?> s = getShape();

        Rectangle2D anchor = DrawShape.getAnchor(graphics, s);
        if(anchor == null) {
            return;
        }

        Insets2D insets = s.getInsets();
        double x = anchor.getX() + insets.left;
        double y = anchor.getY();

        // remember the initial transform
        AffineTransform tx = graphics.getTransform();

        // Transform of text in flipped shapes is special.
        // At this point the flip and rotation transform is already applied
        // (see DrawShape#applyTransform ), but we need to restore it to avoid painting "upside down".
        // See Bugzilla 54210.

        boolean vertFlip = s.getFlipVertical();
        boolean horzFlip = s.getFlipHorizontal();
        ShapeContainer<?,?> sc = s.getParent();
        while (sc instanceof PlaceableShape) {
            PlaceableShape<?,?> ps = (PlaceableShape<?,?>)sc;
            vertFlip ^= ps.getFlipVertical();
            horzFlip ^= ps.getFlipHorizontal();
            sc = ps.getParent();
        }

        // Horizontal flipping applies only to shape outline and not to the text in the shape.
        // Applying flip second time restores the original not-flipped transform
        if (horzFlip ^ vertFlip) {
            final double ax = anchor.getX();
            final double ay = anchor.getY();
            graphics.translate(ax + anchor.getWidth(), ay);
            graphics.scale(-1, 1);
            graphics.translate(-ax, -ay);
        }

        Double textRot = s.getTextRotation();
        if (textRot != null && textRot != 0) {
            final double cx = anchor.getCenterX();
            final double cy = anchor.getCenterY();
            graphics.translate(cx, cy);
            graphics.rotate(Math.toRadians(textRot));
            graphics.translate(-cx, -cy);
        }

        // first dry-run to calculate the total height of the text
        double textHeight;

        switch (s.getVerticalAlignment()){
            default:
            case TOP:
                y += insets.top;
                break;
            case BOTTOM:
                textHeight = getTextHeight(graphics);
                y += anchor.getHeight() - textHeight - insets.bottom;
                break;
            case MIDDLE:
                textHeight = getTextHeight(graphics);
                double delta = anchor.getHeight() - textHeight - insets.top - insets.bottom;
                y += insets.top + delta/2;
                break;
        }

        TextDirection textDir = s.getTextDirection();
        if (textDir == TextDirection.VERTICAL || textDir == TextDirection.VERTICAL_270) {
            final double deg = (textDir == TextDirection.VERTICAL) ? 90 : 270;
            final double cx = anchor.getCenterX();
            final double cy = anchor.getCenterY();
            graphics.translate(cx, cy);
            graphics.rotate(Math.toRadians(deg));
            graphics.translate(-cx, -cy);

            // old top/left edge is now bottom/left or top/right - as we operate on the already
            // rotated drawing context, both verticals can be moved in the same direction
            final double w = anchor.getWidth();
            final double h = anchor.getHeight();
            final double dx = (w-h)/2d;
            graphics.translate(dx,-dx);
        }

        drawParagraphs(graphics, x, y);

        // restore the transform
        graphics.setTransform(tx);
    }

