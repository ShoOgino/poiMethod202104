	public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {
		int nInnerArgs = args.length-1; // -1: first arg is used to select from a basic aggregate function
		if (nInnerArgs < 1) {
			return ErrorEval.VALUE_INVALID;
		}

		final Function innerFunc;
		int functionCode = 0;
		try {
			ValueEval ve = OperandResolver.getSingleValue(args[0], srcRowIndex, srcColumnIndex);
            functionCode = OperandResolver.coerceValueToInt(ve);
			innerFunc = findFunction(functionCode);
		} catch (EvaluationException e) {
			return e.getErrorEval();
		}

		// ignore the first arg, this is the function-type, we check for the length above
		final List<ValueEval> list = new ArrayList<>(Arrays.asList(args).subList(1, args.length));

		Iterator<ValueEval> it = list.iterator();

		// See https://support.office.com/en-us/article/SUBTOTAL-function-7b027003-f060-4ade-9040-e478765b9939
		// "If there are other subtotals within ref1, ref2,... (or nested subtotals), these nested subtotals are ignored to avoid double counting."
		// For array references it is handled in other evaluation steps, but we need to handle this here for references to subtotal-functions
		while(it.hasNext()) {
			ValueEval eval = it.next();
			if(eval instanceof LazyRefEval) {
				LazyRefEval lazyRefEval = (LazyRefEval) eval;
				if(lazyRefEval.isSubTotal()) {
					it.remove();
				}
				if (functionCode > 100 && lazyRefEval.isRowHidden()) {
				    it.remove();
				}
			}
		}

		return innerFunc.evaluate(list.toArray(new ValueEval[0]), srcRowIndex, srcColumnIndex);
	}

