    public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval number, ValueEval places) {
        ValueEval veText1;
        try {
            veText1 = OperandResolver.getSingleValue(number, srcRowIndex, srcColumnIndex);
        } catch (EvaluationException e) {
            return e.getErrorEval();
        }
        String strText1 = OperandResolver.coerceValueToString(veText1);
        Double number1 = OperandResolver.parseDouble(strText1);

        //If this number argument is non numeric, this function returns the #VALUE! error value.
        if (number1 == null) {
            return ErrorEval.VALUE_INVALID;
        }

        //If number < -549,755,813,888 or if number > 549,755,813,887, this function returns the #NUM! error value.
        if (number1.longValue() < MIN_VALUE || number1.longValue() > MAX_VALUE)  {
            return ErrorEval.NUM_ERROR;
        }

        int placesNumber = 0;
        if (number1 < 0) {
            placesNumber = DEFAULT_PLACES_VALUE;
        }
        else if (places != null) {
            ValueEval placesValueEval;
            try {
                placesValueEval = OperandResolver.getSingleValue(places, srcRowIndex, srcColumnIndex);
            } catch (EvaluationException e) {
                return e.getErrorEval();
            }
            String placesStr = OperandResolver.coerceValueToString(placesValueEval);
            Double placesNumberDouble = OperandResolver.parseDouble(placesStr);

            //non numeric value
            if (placesNumberDouble == null) {
                return ErrorEval.VALUE_INVALID;
            }

            //If this argument contains a decimal value, this function ignores the numbers to the right side of the decimal point.
            placesNumber = placesNumberDouble.intValue();

            if (placesNumber < 0)  {
                return ErrorEval.NUM_ERROR;
            }
        }

        String hex;
        if (placesNumber != 0) {
            hex = String.format(Locale.ROOT, "%0"+placesNumber+"X", number1.intValue());
        }
        else {
            hex = Long.toHexString(number1.longValue());
        }

        if (number1 < 0) {
            hex =  "FF"+  hex.substring(2);
        }

        return new StringEval(hex.toUpperCase(Locale.ROOT));
    }

