	private static Function findFunction(int functionCode) throws EvaluationException {
        switch (functionCode) {
			case 1: return subtotalInstance(AggregateFunction.AVERAGE, true);
			case 2: return Count.subtotalInstance(true);
			case 3: return Counta.subtotalInstance(true);
			case 4: return subtotalInstance(AggregateFunction.MAX, true);
			case 5: return subtotalInstance(AggregateFunction.MIN, true);
			case 6: return subtotalInstance(AggregateFunction.PRODUCT, true);
			case 7: return subtotalInstance(AggregateFunction.STDEV, true);
			case 8: throw new NotImplementedFunctionException("STDEVP");
			case 9: return subtotalInstance(AggregateFunction.SUM, true);
			case 10: throw new NotImplementedFunctionException("VAR");
			case 11: throw new NotImplementedFunctionException("VARP");
			case 101: return subtotalInstance(AggregateFunction.AVERAGE, false);
			case 102: return Count.subtotalInstance(false);
			case 103: return Counta.subtotalInstance(false);
			case 104: return subtotalInstance(AggregateFunction.MAX, false);
			case 105: return subtotalInstance(AggregateFunction.MIN, false);
			case 106: return subtotalInstance(AggregateFunction.PRODUCT, false);
			case 107: return subtotalInstance(AggregateFunction.STDEV, false);
			case 108: throw new NotImplementedFunctionException("STDEVP SUBTOTAL with 'exclude hidden values' option");
			case 109: return subtotalInstance(AggregateFunction.SUM, false);
			case 110: throw new NotImplementedFunctionException("VAR SUBTOTAL with 'exclude hidden values' option");
			case 111: throw new NotImplementedFunctionException("VARP SUBTOTAL with 'exclude hidden values' option");
		}
		throw EvaluationException.invalidValue();
	}

