	private boolean calculate(ValueEval[] args) throws EvaluationException {

		boolean result = getInitialResultValue();
		boolean atLeastOneNonBlank = false;

		/*
		 * Note: no short-circuit boolean loop exit because any ErrorEvals will override the result
		 */
		for (final ValueEval arg : args) {
            Boolean tempVe;
			if (arg instanceof TwoDEval) {
				TwoDEval ae = (TwoDEval) arg;
				int height = ae.getHeight();
				int width = ae.getWidth();
				for (int rrIx=0; rrIx<height; rrIx++) {
					for (int rcIx=0; rcIx<width; rcIx++) {
						ValueEval ve = ae.getValue(rrIx, rcIx);
						tempVe = OperandResolver.coerceValueToBoolean(ve, true);
						if (tempVe != null) {
							result = partialEvaluate(result, tempVe);
							atLeastOneNonBlank = true;
						}
					}
				}
				continue;
			}
            if (arg instanceof RefEval) {
                RefEval re = (RefEval) arg;
                final int firstSheetIndex = re.getFirstSheetIndex();
                final int lastSheetIndex = re.getLastSheetIndex();
                for (int sIx = firstSheetIndex; sIx <= lastSheetIndex; sIx++) {
                    ValueEval ve = re.getInnerValueEval(sIx);
                    tempVe = OperandResolver.coerceValueToBoolean(ve, true);
                    if (tempVe != null) {
                        result = partialEvaluate(result, tempVe);
                        atLeastOneNonBlank = true;
                    }
                }
                continue;
            }

			if (arg == MissingArgEval.instance) {
				tempVe = false;		// missing parameters are treated as FALSE
			} else {
				tempVe = OperandResolver.coerceValueToBoolean(arg, false);
			}

			if (tempVe != null) {
				result = partialEvaluate(result, tempVe);
				atLeastOneNonBlank = true;
			}
		}

		if (!atLeastOneNonBlank) {
			throw new EvaluationException(ErrorEval.VALUE_INVALID);
		}
		return result;
	}

