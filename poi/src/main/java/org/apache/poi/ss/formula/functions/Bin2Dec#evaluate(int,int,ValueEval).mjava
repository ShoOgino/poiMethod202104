    public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval numberVE) {
        final String number;
        if (numberVE instanceof RefEval) {
            RefEval re = (RefEval) numberVE;
            number = OperandResolver.coerceValueToString(re.getInnerValueEval(re.getFirstSheetIndex()));
        } else {
            number = OperandResolver.coerceValueToString(numberVE);
        }
        if (number.length() > 10) {
            return ErrorEval.NUM_ERROR;
        }

        String unsigned;

        //If the leftmost bit is 0 -- number is positive.
        boolean isPositive;
        if (number.length() < 10) {
            unsigned = number;
            isPositive = true;
        } else {
            unsigned = number.substring(1);
            isPositive = number.startsWith("0");
        }

        String value;
        try {
            if (isPositive) {
                //bit9*2^8 + bit8*2^7 + bit7*2^6 + bit6*2^5 + bit5*2^4+ bit3*2^2+ bit2*2^1+ bit1*2^0
                int sum = getDecimalValue(unsigned);
                value = String.valueOf(sum);
            } else {
                //The leftmost bit is 1 -- this is negative number
                //Inverse bits [1-9]
                String inverted = toggleBits(unsigned);
                // Calculate decimal number
                int sum = getDecimalValue(inverted);
    
                //Add 1 to obtained number
                sum++;
    
                value = "-" + sum;
            }
        } catch (NumberFormatException e) {
            return ErrorEval.NUM_ERROR;
        }

        return new NumberEval(Long.parseLong(value));
    }

