    /**
     * Returns an instance of a condition object.
     *
     * @param opString The operator as a string.  One of {@code <},
     *                 {@code <=}, {@code >}, {@code >=},
     *                 {@code =}, {@code ==}, {@code !=} or
     *                 {@code <>}.
     * @param constStr The constant (such as {@code 12}).
     *
     * @return A condition object for the given condition.
     */
    public static CellFormatCondition getInstance(String opString,
            String constStr) {

        if (!TESTS.containsKey(opString))
            throw new IllegalArgumentException("Unknown test: " + opString);
        int test = TESTS.get(opString);

        final double c = Double.parseDouble(constStr);

        switch (test) {
        case LT:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value < c;
                }
            };
        case LE:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value <= c;
                }
            };
        case GT:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value > c;
                }
            };
        case GE:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value >= c;
                }
            };
        case EQ:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value == c;
                }
            };
        case NE:
            return new CellFormatCondition() {
                public boolean pass(double value) {
                    return value != c;
                }
            };
        default:
            throw new IllegalArgumentException(
                    "Cannot create for test number " + test + "(\"" + opString +
                            "\")");
        }
    }

