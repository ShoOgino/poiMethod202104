    /**
     * Return the cell, taking account of merged regions. Allows you to find the
     *  cell who's contents are shown in a given position in the sheet.
     *
     * <p>If the cell at the given co-ordinates is a merged cell, this will
     *  return the primary (top-left) most cell of the merged region.
     * <p>If the cell at the given co-ordinates is not in a merged region,
     *  then will return the cell itself.
     * <p>If there is no cell defined at the given co-ordinates, will return
     *  null.
     *
     * @param sheet The workbook sheet to look at.
     * @param rowIx The 0-based index of the row.
     * @param colIx The 0-based index of the cell.
     * @return cell at the given location, its base merged cell, or null if not defined
     * @throws NullPointerException if sheet is null
     */
    public static Cell getCellWithMerges(Sheet sheet, int rowIx, int colIx) {
        final Cell c = getCell(sheet, rowIx, colIx);
        if (c != null) return c;

        for (CellRangeAddress mergedRegion : sheet.getMergedRegions()) {
            if (mergedRegion.isInRange(rowIx, colIx)) {
                // The cell wanted is in this merged range
                // Return the primary (top-left) cell for the range
                Row r = sheet.getRow(mergedRegion.getFirstRow());
                if (r != null) {
                    return r.getCell(mergedRegion.getFirstColumn());
                }
            }
        }

        // If we get here, then the cell isn't defined, and doesn't
        //  live within any merged regions
        return null;
    }

