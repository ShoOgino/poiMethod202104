    public static double convertToDecimal(String value, int base, int maxNumberOfPlaces) throws IllegalArgumentException {
        if (value == null || value.length() == 0) {
            return 0.0;
        }

        long stringLength = value.length();
        if (stringLength > maxNumberOfPlaces) {
            throw new IllegalArgumentException();
        }

        double decimalValue = 0.0;

        long signedDigit = 0;
        boolean hasSignedDigit = true;
        char[] characters = value.toCharArray();
        for (char character : characters) {
            long digit;

            if ('0' <= character && character <= '9') {
                digit = (long)character - '0';
            } else if ('A' <= character && character <= 'Z') {
                digit = 10L + (character - 'A');
            } else if ('a' <= character && character <= 'z') {
                digit = 10L + (character - 'a');
            } else {
                digit = base;
            }

            if (digit < base) {
                if (hasSignedDigit) {
                    hasSignedDigit = false;
                    signedDigit = digit;
                }
                decimalValue = decimalValue * base + digit;
            } else {
                throw new IllegalArgumentException("character not allowed");
            }
        }

        boolean isNegative = (!hasSignedDigit && stringLength == maxNumberOfPlaces  && (signedDigit >= base / 2));
        if (isNegative) {
            decimalValue = getTwoComplement(base, maxNumberOfPlaces, decimalValue);
            decimalValue = decimalValue * -1.0;
        }

        return decimalValue;
    }

