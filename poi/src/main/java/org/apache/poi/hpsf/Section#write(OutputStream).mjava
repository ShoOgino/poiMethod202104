    /**
     * Writes this section into an output stream.<p>
     *
     * Internally this is done by writing into three byte array output
     * streams: one for the properties, one for the property list and one for
     * the section as such. The two former are appended to the latter when they
     * have received all their data.
     *
     * @param out The stream to write into.
     *
     * @return The number of bytes written, i.e. the section's size.
     * @exception IOException if an I/O error occurs
     * @exception WritingNotSupportedException if HPSF does not yet support
     * writing a property's variant type.
     */
    public int write(final OutputStream out) throws WritingNotSupportedException, IOException {
        /* Check whether we have already generated the bytes making out the
         * section. */
        if (sectionBytes.size() > 0) {
            sectionBytes.writeTo(out);
            return sectionBytes.size();
        }

        /* Writing the section's dictionary it tricky. If there is a dictionary
         * (property 0) the codepage property (property 1) must be set, too. */
        int codepage = getCodepage();
        if (codepage == -1) {
            LOG.atWarn().log("The codepage property is not set although a dictionary is present. " +
                    "Defaulting to ISO-8859-1.");
            codepage = Property.DEFAULT_CODEPAGE;
        }

        final int[][] offsets = new int[properties.size()][2];
        final ByteArrayOutputStream bos = new ByteArrayOutputStream();
        final LittleEndianOutputStream leos = new LittleEndianOutputStream(bos);

        /* Write the section's length - dummy value, fixed later */
        leos.writeInt(-1);

        /* Write the section's number of properties: */
        leos.writeInt(properties.size());

        int propCnt = 0;
        for (Property p : properties.values()) {
            /* Write the property list entry. */
            leos.writeUInt(p.getID());
            // dummy offset to be fixed later
            offsets[propCnt++][0] = bos.size();
            leos.writeInt(-1);
        }


        /* Write the properties and the property list into their respective
         * streams: */
        propCnt = 0;
        for (Property p : properties.values()) {
            offsets[propCnt++][1] = bos.size();
            /* If the property ID is not equal 0 we write the property and all
             * is fine. However, if it equals 0 we have to write the section's
             * dictionary which has an implicit type only and an explicit
             * value. */
            if (p.getID() != 0) {
                /* Write the property and update the position to the next
                 * property. */
                p.write(bos, codepage);
            } else {
                writeDictionary(bos, codepage);
            }
        }

        byte[] result = bos.toByteArray();
        LittleEndian.putInt(result, 0, bos.size());

        for (int[] off : offsets) {
            LittleEndian.putUInt(result, off[0], off[1]);
        }

        out.write(result);

        return bos.size();
    }

