    /**
     * Adds a named property.
     *
     * @param key The property's name.
     * @param value The property's value.
     * @return the property that was stored under the specified name before, or
     *         {@code null} if there was no such property before.
     */
    @Override
    public Object put(String key, Object value) {
        int variantType;
        if (value instanceof String) {
            variantType = Variant.VT_LPSTR;
        } else if (value instanceof Short) {
            variantType = Variant.VT_I2;
        } else if (value instanceof Integer) {
            variantType = Variant.VT_I4;
        } else if (value instanceof Long) {
            variantType = Variant.VT_I8;
        } else if (value instanceof Float) {
            variantType = Variant.VT_R4;
        } else if (value instanceof Double) {
            variantType = Variant.VT_R8;
        } else if (value instanceof Boolean) {
            variantType = Variant.VT_BOOL;
        } else if (value instanceof BigInteger
            && ((BigInteger)value).bitLength() <= 64
            && ((BigInteger)value).compareTo(BigInteger.ZERO) >= 0) {
            variantType = Variant.VT_UI8;
        } else if (value instanceof Date) {
            variantType = Variant.VT_FILETIME;
        } else {
            throw new IllegalStateException("unsupported datatype - currently String,Short,Integer,Long,Float,Double,Boolean,BigInteger(unsigned long),Date can be processed.");
        }
        final Property p = new Property(-1, variantType, value);
        return put(new CustomProperty(p, key));
    }

