    /**
     *
     */
    private int processAutoNumGroup(int index, int level, List<Integer> levelCount, StringBuilder out) {
        XSSFTextParagraph p = _paragraphs.get(index);

        // The rules for generating the auto numbers are as follows. If the
        // following paragraph is also
        // an auto-number, has the same type/scheme (and startAt if defined on
        // this paragraph) then they are
        // considered part of the same group. An empty bullet paragraph is
        // counted as part of the same
        // group but does not increment the count for the group. A change of
        // type, startAt or the paragraph
        // not being a bullet resets the count for that level to 1.

        // first auto-number paragraph so initialise to 1 or the bullets startAt
        // if present
        int startAt = p.getBulletAutoNumberStart();
        ListAutoNumber scheme = p.getBulletAutoNumberScheme();
        if (levelCount.get(level) == 0) {
            levelCount.set(level, startAt == 0 ? 1 : startAt);
        }
        // indent appropriately for the level
        for (int j = 0; j < level; j++) {
            out.append('\t');
        }
        if (p.getText().length() > 0) {
            out.append(getBulletPrefix(scheme, levelCount.get(level)));
            out.append(p.getText());
        }
        while (true) {
            XSSFTextParagraph nextp = (index + 1) == _paragraphs.size() ? null : _paragraphs.get(index + 1);
            if (nextp == null) {
                break; // out of paragraphs
            }
            if (!(nextp.isBullet() && p.isBulletAutoNumber())) {
                break; // not an auto-number bullet
            }
            if (nextp.getLevel() > level) {
                // recurse into the new level group
                if (out.length() > 0) {
                    out.append('\n');
                }
                index = processAutoNumGroup(index + 1, nextp.getLevel(), levelCount, out);
                continue; // restart the loop given the new index
            } else if (nextp.getLevel() < level) {
                break; // changed level
            }
            ListAutoNumber nextScheme = nextp.getBulletAutoNumberScheme();
            int nextStartAt = nextp.getBulletAutoNumberStart();

            if (nextScheme == scheme && nextStartAt == startAt) {
                // bullet is valid, so increment i
                ++index;
                if (out.length() > 0) {
                    out.append('\n');
                }
                // indent for the level
                for (int j = 0; j < level; j++) {
                    out.append('\t');
                }
                // check for empty text - only output a bullet if there is text,
                // but it is still part of the group
                if (nextp.getText().length() > 0) {
                    // increment the count for this level
                    levelCount.set(level, levelCount.get(level) + 1);
                    out.append(getBulletPrefix(nextScheme, levelCount.get(level)));
                    out.append(nextp.getText());
                }
            } else {
                // something doesn't match so stop
                break;
            }
        }
        // end of the group so reset the count for this level
        levelCount.set(level, 0);

        return index;
    }

