    /**
     * Sets the XORed or hashed password 
     *
     * @param xobj the xmlbeans object which contains the password attributes
     * @param password the password, if null, the password attributes will be removed
     * @param hashAlgo the hash algorithm, if null the password will be XORed
     * @param prefix the prefix of the password attributes, may be null
     */
    public static void setPassword(XmlObject xobj, String password, HashAlgorithm hashAlgo, String prefix) {
        XmlCursor cur = xobj.newCursor();

        if (password == null) {
            cur.removeAttribute(getAttrName(prefix, "password"));
            cur.removeAttribute(getAttrName(prefix, "algorithmName"));
            cur.removeAttribute(getAttrName(prefix, "hashValue"));
            cur.removeAttribute(getAttrName(prefix, "saltValue"));
            cur.removeAttribute(getAttrName(prefix, "spinCount"));
            return;
        } 
        
        cur.toFirstContentToken();
        if (hashAlgo == null) {
            int hash = CryptoFunctions.createXorVerifier1(password);
            cur.insertAttributeWithValue(getAttrName(prefix, "password"),
                                         String.format(Locale.ROOT, "%04X", hash).toUpperCase(Locale.ROOT));
        } else {
            SecureRandom random = new SecureRandom();
            byte[] salt = random.generateSeed(16);
    
            // Iterations specifies the number of times the hashing function shall be iteratively run (using each
            // iteration's result as the input for the next iteration).
            int spinCount = 100000;

            // Implementation Notes List:
            // --> In this third stage, the reversed byte order legacy hash from the second stage shall
            //     be converted to Unicode hex string representation
            byte[] hash = CryptoFunctions.hashPassword(password, hashAlgo, salt, spinCount, false);

            Base64.Encoder enc64 = Base64.getEncoder();

            cur.insertAttributeWithValue(getAttrName(prefix, "algorithmName"), hashAlgo.jceId); 
            cur.insertAttributeWithValue(getAttrName(prefix, "hashValue"), enc64.encodeToString(hash));
            cur.insertAttributeWithValue(getAttrName(prefix, "saltValue"), enc64.encodeToString(salt));
            cur.insertAttributeWithValue(getAttrName(prefix, "spinCount"), ""+spinCount);
        }
        cur.dispose();
    }

