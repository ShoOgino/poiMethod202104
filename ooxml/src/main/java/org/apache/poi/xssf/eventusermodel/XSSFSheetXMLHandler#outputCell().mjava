   private void outputCell() {
       String thisStr = null;

       // Process the value contents as required, now we have it all
       switch (nextDataType) {
           case BOOLEAN:
               char first = value.charAt(0);
               thisStr = first == '0' ? "FALSE" : "TRUE";
               break;

           case ERROR:
               thisStr = "ERROR:" + value;
               break;

           case FORMULA:
               if(formulasNotResults) {
                   thisStr = formula.toString();
               } else {
                   String fv = value.toString();

                   if (this.formatString != null) {
                       try {
                           // Try to use the value as a formattable number
                           double d = Double.parseDouble(fv);
                           thisStr = formatter.formatRawCellContents(d, this.formatIndex, this.formatString);
                       } catch(NumberFormatException e) {
                           // Formula is a String result not a Numeric one
                           thisStr = fv;
                       }
                   } else {
                       // No formatting applied, just do raw value in all cases
                       thisStr = fv;
                   }
               }
               break;

           case INLINE_STRING:
               // TODO: Can these ever have formatting on them?
               XSSFRichTextString rtsi = new XSSFRichTextString(value.toString());
               thisStr = rtsi.toString();
               break;

           case SST_STRING:
               String sstIndex = value.toString();
               try {
                   int idx = Integer.parseInt(sstIndex);
                   RichTextString rtss = sharedStringsTable.getItemAt(idx);
                   thisStr = rtss.toString();
               }
               catch (NumberFormatException ex) {
                   LOG.atError().withThrowable(ex).log("Failed to parse SST index '{}'", sstIndex);
               }
               break;

           case NUMBER:
               String n = value.toString();
               if (this.formatString != null && n.length() > 0)
                   thisStr = formatter.formatRawCellContents(Double.parseDouble(n), this.formatIndex, this.formatString);
               else
                   thisStr = n;
               break;

           default:
               thisStr = "(TODO: Unexpected type: " + nextDataType + ")";
               break;
       }

       // Do we have a comment for this cell?
       checkForEmptyCellComments(EmptyCellCommentsCheckType.CELL);
       XSSFComment comment = comments != null ? comments.findCellComment(new CellAddress(cellRef)) : null;

       // Output
       output.cell(cellRef, thisStr, comment);
   }

