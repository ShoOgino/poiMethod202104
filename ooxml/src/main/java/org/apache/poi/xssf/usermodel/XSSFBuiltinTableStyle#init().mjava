    /**
     * Only init once - thus the synchronized.  Lazy, after creating instances,
     * and only when a style is actually needed, to avoid overhead for uses
     * that don't need the actual style definitions.
     * <p>
     * Public so clients can initialize the map on startup rather than lazily
     * during evaluation if desired.
     */
    public static synchronized void init() {
        if (!styleMap.isEmpty()) return;

        /*
         * initialize map.  Every built-in has this format:
         * <styleName>
         *   <dxfs>
         *     <dxf>...</dxf>
         *     ...
         *   </dxfs>
         *   <tableStyles count="1">
         *     <tableStyle>...</tableStyle>
         *   </tableStyles>
         * </styleName>
         */
        try {
            final InputStream is = XSSFBuiltinTableStyle.class.getResourceAsStream("presetTableStyles.xml");
            try {
                final Document doc = DocumentHelper.readDocument(is);

                final NodeList styleNodes = doc.getDocumentElement().getChildNodes();
                for (int i = 0; i < styleNodes.getLength(); i++) {
                    final Node node = styleNodes.item(i);
                    if (node.getNodeType() != Node.ELEMENT_NODE) continue; // only care about elements
                    final Element tag = (Element) node;
                    String styleName = tag.getTagName();
                    XSSFBuiltinTableStyle builtIn = XSSFBuiltinTableStyle.valueOf(styleName);

                    Node dxfsNode = tag.getElementsByTagName("dxfs").item(0);
                    Node tableStyleNode = tag.getElementsByTagName("tableStyles").item(0);

                    // hack because I can't figure out how to get XMLBeans to parse a sub-element in a standalone manner
                    // - build a fake styles.xml file with just this built-in
                    StylesTable styles = new StylesTable();
                    styles.readFrom(new ByteArrayInputStream(styleXML(dxfsNode, tableStyleNode).getBytes(StandardCharsets.UTF_8)));
                    styleMap.put(builtIn, new XSSFBuiltinTypeStyleStyle(builtIn, styles.getExplicitTableStyle(styleName)));
                }
            } finally {
                IOUtils.closeQuietly(is);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

