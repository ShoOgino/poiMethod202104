    // returns this object as a line that extends between the boundaries of
    // the document
    public Path2D.Double getPath() {
        Path2D.Double path = new Path2D.Double();

        // this is a bit of a hack, but it works
        double max_val = 100000;

        // compute slope..
        double x0 = getX();
        double y0 = getY();
        double x1 = getA(); // second x
        double y1 = getB(); // second y

        if (x0 == x1) {
            path.moveTo(x0, -max_val);
            path.lineTo(x0, max_val);
        } else if (y0 == y1) {
            path.moveTo(-max_val, y0);
            path.lineTo(max_val, y0);
        } else {

            // normal case: compute slope/intercept
            double m = (y1 - y0) / (x1 - x0);
            double c = y0 - m * x0;

            // y = mx + c

            path.moveTo(max_val, m * max_val + c);
            path.lineTo(max_val, (max_val - c) / m);
        }

        return path;
    }

