    @Test
    void testGroupingTest() throws IOException {
        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook("GroupTest.xlsx")) {

            assertEquals(31, wb.getSheetAt(0).getLastRowNum());

            // NOTE: This is currently based on current behavior of POI, somehow
            // what POI returns in the calls to collapsed/hidden is not fully matching
            // the examples in the spec or I did not fully understand how POI stores the data internally...
            checkWorkbookGrouping(wb,
                    new Boolean[]{
                            // 0-4
                            false, false, false, false, false, null, null,
                            // 7-11
                            false, false, true, true, true, null, null,
                            // 14-18
                            false, false, true, false, false, null,
                            // 20-24
                            false, false, true, true, false, null, null,
                            // 27-31
                            false, false, false, true, false},
                    new boolean[]{
                            // 0-4
                            false, false, false, false, false, false, false,
                            // 7-11
                            true, true, true, true, false, false, false,
                            // 14-18
                            true, true, false, false, false, false,
                            // 20-24
                            true, true, true, false, false, false, false,
                            // 27-31
                            true, true, true, true, false},
                    // outlineLevel
                    new int[]{
                            // 0-4
                            3, 3, 2, 1, 0, 0, 0,
                            // 7-11
                            3, 3, 2, 1, 0, 0, 0,
                            // 14-18
                            3, 3, 2, 1, 0, 0,
                            // 20-24
                            3, 3, 2, 1, 0, 0, 0,
                            // 27-31
                            3, 3, 2, 1, 0,
                    }
            );
        }
        /*
Row: 0: Level: 3 Collapsed: false Hidden: false
Row: 1: Level: 3 Collapsed: false Hidden: false
Row: 2: Level: 2 Collapsed: false Hidden: false
Row: 3: Level: 1 Collapsed: false Hidden: false
Row: 4: Level: 0 Collapsed: false Hidden: false
Row: 7: Level: 3 Collapsed: false Hidden: true
Row: 8: Level: 3 Collapsed: false Hidden: true
Row: 9: Level: 2 Collapsed: true Hidden: true
Row: 10: Level: 1 Collapsed: true Hidden: true
Row: 11: Level: 0 Collapsed: true Hidden: false
Row: 14: Level: 3 Collapsed: false Hidden: true
Row: 15: Level: 3 Collapsed: false Hidden: true
Row: 16: Level: 2 Collapsed: true Hidden: false
Row: 17: Level: 1 Collapsed: false Hidden: false
Row: 18: Level: 0 Collapsed: false Hidden: false
Row: 20: Level: 3 Collapsed: false Hidden: true
Row: 21: Level: 3 Collapsed: false Hidden: true
Row: 22: Level: 2 Collapsed: true Hidden: true
Row: 23: Level: 1 Collapsed: true Hidden: false
Row: 24: Level: 0 Collapsed: false Hidden: false
Row: 27: Level: 3 Collapsed: false Hidden: true
Row: 28: Level: 3 Collapsed: false Hidden: true
Row: 29: Level: 2 Collapsed: false Hidden: true
Row: 30: Level: 1 Collapsed: true Hidden: true
Row: 31: Level: 0 Collapsed: true Hidden: false
         */
    }

