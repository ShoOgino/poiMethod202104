    /**
     * Collapses the drawing records into an aggregate.
     * read Drawing, Obj, TxtObj, Note and Continue records into single byte array,
     * create Escher tree from byte array, create map &lt;EscherRecord, Record&gt;
     *
     * @param records - list of all records inside sheet
     * @param locFirstDrawingRecord - location of the first DrawingRecord inside sheet
     * @return new EscherAggregate create from all aggregated records which belong to drawing layer
     */
    public static EscherAggregate createAggregate(final List<RecordBase> records, final int locFirstDrawingRecord) {
        EscherAggregate agg = new EscherAggregate(false);

        ShapeCollector recordFactory = new ShapeCollector();
        List<Record> objectRecords = new ArrayList<>();

        int nextIdx = locFirstDrawingRecord;
        for (RecordBase rb : records.subList(locFirstDrawingRecord, records.size())) {
            nextIdx++;
            switch (sid(rb)) {
                case DrawingRecord.sid:
                    recordFactory.addBytes(((DrawingRecord)rb).getRecordData());
                    continue;
                case ContinueRecord.sid:
                    recordFactory.addBytes(((ContinueRecord)rb).getData());
                    continue;
                case ObjRecord.sid:
                case TextObjectRecord.sid:
                    objectRecords.add((org.apache.poi.hssf.record.Record)rb);
                    continue;
                case NoteRecord.sid:
                    // any NoteRecords that follow the drawing block must be aggregated and saved in the tailRec collection
                    NoteRecord r = (NoteRecord)rb;
                    agg.tailRec.put(r.getShapeId(), r);
                    continue;
                default:
                    nextIdx--;
                    break;
            }
            break;
        }

        // replace drawing block with the created EscherAggregate
        records.set(locFirstDrawingRecord, agg);
        if (locFirstDrawingRecord+1 <= nextIdx) {
            records.subList(locFirstDrawingRecord + 1, nextIdx).clear();
        }

        // Decode the shapes
        Iterator<EscherRecord> shapeIter = recordFactory.parse(agg).iterator();

        // Associate the object records with the shapes
        objectRecords.forEach(or -> agg.shapeToObj.put(shapeIter.next(), or));

        return agg;
    }

