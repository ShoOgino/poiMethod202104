    public ObjRecord(RecordInputStream in) {
        // TODO - problems with OBJ sub-records stream
        // MS spec says first sub-record is always CommonObjectDataSubRecord,
        // and last is always EndSubRecord. OOO spec does not mention ObjRecord(0x005D).
        // Existing POI test data seems to violate that rule. Some test data
        // seems to contain garbage, and a crash is only averted by stopping at
                // what looks like the 'EndSubRecord'

        // Check if this can be continued, if so then the
        // following wont work properly
        byte[] subRecordData = in.readRemainder();
        if (LittleEndian.getUShort(subRecordData, 0) != CommonObjectDataSubRecord.sid) {
            // seems to occur in just one junit on "OddStyleRecord.xls" (file created by CrystalReports)
            // Excel tolerates the funny ObjRecord, and replaces it with a corrected version
            // The exact logic/reasoning is not yet understood
            _uninterpretedData = subRecordData;
            return;
        }

        //YK: files produced by OO violate the condition below
        /*
        if (subRecordData.length % 2 != 0) {
            String msg = "Unexpected length of subRecordData : " + HexDump.toHex(subRecordData);
            throw new RecordFormatException(msg);
        }
        */

        LittleEndianByteArrayInputStream subRecStream = new LittleEndianByteArrayInputStream(subRecordData);
        CommonObjectDataSubRecord cmo = (CommonObjectDataSubRecord)SubRecord.createSubRecord(subRecStream, 0);
        subrecords.add(cmo);
        while (true) {
            SubRecord subRecord = SubRecord.createSubRecord(subRecStream, cmo.getObjectType());
            subrecords.add(subRecord);
            if (subRecord.isTerminating()) {
                break;
            }
        }
        final int nRemainingBytes = subRecordData.length-subRecStream.getReadIndex();
        if (nRemainingBytes > 0) {
            // At present (Oct-2008), most unit test samples have (subRecordData.length % 2 == 0)
            _isPaddedToQuadByteMultiple = subRecordData.length % MAX_PAD_ALIGNMENT == 0;
            if (nRemainingBytes >= (_isPaddedToQuadByteMultiple ? MAX_PAD_ALIGNMENT : NORMAL_PAD_ALIGNMENT)) {
                if (!canPaddingBeDiscarded(subRecordData, nRemainingBytes)) {
                    String msg = "Leftover " + nRemainingBytes
                        + " bytes in subrecord data " + HexDump.toHex(subRecordData);
                    throw new RecordFormatException(msg);
                }
                _isPaddedToQuadByteMultiple = false;
            }

        } else {
            _isPaddedToQuadByteMultiple = false;
        }
        _uninterpretedData = null;
    }

