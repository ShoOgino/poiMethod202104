	private static ValueEval evaluateAreaSumProduct(ValueEval[] evalArgs) throws EvaluationException {
		int maxN = evalArgs.length;
		TwoDEval[] args;
		try {
			args = Arrays.copyOf(evalArgs, maxN, TwoDEval[].class);
		} catch (ArrayStoreException e) {
			// one of the other args was not an AreaRef
			return ErrorEval.VALUE_INVALID;
		}


		TwoDEval firstArg = args[0];

		int height = firstArg.getHeight();
		int width = firstArg.getWidth(); // TODO - junit

		// first check dimensions
		if (!areasAllSameSize(args, height, width)) {
			// normally this results in #VALUE!,
			// but errors in individual cells take precedence
			for (int i = 1; i < args.length; i++) {
				throwFirstError(args[i]);
			}
			return ErrorEval.VALUE_INVALID;
		}

		double acc = 0;

		for (int rrIx=0; rrIx<height; rrIx++) {
			for (int rcIx=0; rcIx<width; rcIx++) {
				double term = 1D;
				for(int n=0; n<maxN; n++) {
					double val = getProductTerm(args[n].getValue(rrIx, rcIx), false);
					term *= val;
				}
				acc += term;
			}
		}

		return new NumberEval(acc);
	}

