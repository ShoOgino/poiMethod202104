	@Override
	public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {
		// complex rules to choose lookupVector and resultVector from the single area ref
		
		try {
			/*
			The array form of LOOKUP is very similar to the HLOOKUP and VLOOKUP functions. The difference is that HLOOKUP searches for the value of lookup_value in the first row, VLOOKUP searches in the first column, and LOOKUP searches according to the dimensions of array.
			If array covers an area that is wider than it is tall (more columns than rows), LOOKUP searches for the value of lookup_value in the first row.
			If an array is square or is taller than it is wide (more rows than columns), LOOKUP searches in the first column.
			With the HLOOKUP and VLOOKUP functions, you can index down or across, but LOOKUP always selects the last value in the row or column.
			 */
			ValueEval lookupValue = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);
			TwoDEval lookupArray = LookupUtils.resolveTableArrayArg(arg1);
			ValueVector lookupVector;
			ValueVector resultVector;
	
			if (lookupArray.getWidth() > lookupArray.getHeight()) {
				// If array covers an area that is wider than it is tall (more columns than rows), LOOKUP searches for the value of lookup_value in the first row.
				lookupVector = createVector(lookupArray.getRow(0));
				resultVector = createVector(lookupArray.getRow(lookupArray.getHeight() - 1));
			} else {
				// If an array is square or is taller than it is wide (more rows than columns), LOOKUP searches in the first column.
				lookupVector = createVector(lookupArray.getColumn(0));
				resultVector = createVector(lookupArray.getColumn(lookupArray.getWidth() - 1));
			}
			// if a rectangular area reference was passed in as arg1, lookupVector and resultVector should be the same size
			assert (lookupVector.getSize() == resultVector.getSize());
			
			int index = LookupUtils.lookupIndexOfValue(lookupValue, lookupVector, true);
			return resultVector.getItem(index);
		} catch (final EvaluationException e) {
			return e.getErrorEval();
		}
	}

