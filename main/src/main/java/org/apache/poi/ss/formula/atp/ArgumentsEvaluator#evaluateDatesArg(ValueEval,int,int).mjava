    /**
     * Evaluate a generic {@link ValueEval} argument to an array of double values that represents dates in POI.
     * 
     * @param arg {@link ValueEval} an argument.
     * @param srcCellRow number cell row.
     * @param srcCellCol number cell column.
     * @return an array of doubles representing dates in POI.
     * @throws EvaluationException exception upon argument evaluation.
     */
    public double[] evaluateDatesArg(ValueEval arg, int srcCellRow, int srcCellCol) throws EvaluationException {
        if (arg == null) {
            return new double[0];
        }

        if (arg instanceof StringEval) {
            return new double[]{ evaluateDateArg(arg, srcCellRow, srcCellCol) };
        } else if (arg instanceof AreaEvalBase) {
            List<Double> valuesList = new ArrayList<>();
            AreaEvalBase area = (AreaEvalBase) arg;
            for (int i = area.getFirstRow(); i <= area.getLastRow(); i++) {
                for (int j = area.getFirstColumn(); j <= area.getLastColumn(); j++) {
                    // getValue() is replaced with getAbsoluteValue() because loop variables i, j are
                    // absolute indexes values, but getValue() works with relative indexes values
                    valuesList.add(evaluateDateArg(area.getAbsoluteValue(i, j), i, j));
                }
            }
            double[] values = new double[valuesList.size()];
            for (int i = 0; i < valuesList.size(); i++) {
                values[i] = valuesList.get(i).doubleValue();
            }
            return values;
        }
        return new double[]{ OperandResolver.coerceValueToDouble(arg) };
    }

