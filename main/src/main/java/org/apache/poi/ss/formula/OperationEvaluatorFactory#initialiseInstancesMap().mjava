	private static Map<Byte, Function> initialiseInstancesMap() {
		Map<Byte, Function> m = new HashMap<>(32);

		m.put(AddPtg.instance.getSid(), TwoOperandNumericOperation.AddEval); // 0x03
		m.put(SubtractPtg.instance.getSid(), TwoOperandNumericOperation.SubtractEval); // 0x04
		m.put(MultiplyPtg.instance.getSid(), TwoOperandNumericOperation.MultiplyEval); // 0x05
		m.put(DividePtg.instance.getSid(), TwoOperandNumericOperation.DivideEval); // 0x06
		m.put(PowerPtg.instance.getSid(), TwoOperandNumericOperation.PowerEval); // 0x07
		m.put(ConcatPtg.instance.getSid(), ConcatEval.instance); // 0x08
		m.put(LessThanPtg.instance.getSid(), RelationalOperationEval.LessThanEval); // 0x09
		m.put(LessEqualPtg.instance.getSid(), RelationalOperationEval.LessEqualEval); // 0x0a
		m.put(EqualPtg.instance.getSid(), RelationalOperationEval.EqualEval); // 0x0b
		m.put(GreaterEqualPtg.instance.getSid(), RelationalOperationEval.GreaterEqualEval); // 0x0c
		m.put(GreaterThanPtg.instance.getSid(), RelationalOperationEval.GreaterThanEval); // 0x0D
		m.put(NotEqualPtg.instance.getSid(), RelationalOperationEval.NotEqualEval); // 0x0e
		m.put(IntersectionPtg.instance.getSid(), IntersectionEval.instance); // 0x0f
		m.put(RangePtg.instance.getSid(), RangeEval.instance); // 0x11
		m.put(UnaryPlusPtg.instance.getSid(), UnaryPlusEval.instance); // 0x12
		m.put(UnaryMinusPtg.instance.getSid(), UnaryMinusEval.instance); // 0x13
		m.put(PercentPtg.instance.getSid(), PercentEval.instance); // 0x14

		return m;
	}

