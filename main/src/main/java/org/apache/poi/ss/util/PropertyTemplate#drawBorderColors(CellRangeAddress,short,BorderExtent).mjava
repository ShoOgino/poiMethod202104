    /**
     * Sets the color for a group of cell borders for a cell range. The borders
     * are not applied to the cells at this time, just the template is drawn. If
     * the borders do not exist, a BORDER_THIN border is used. To apply the
     * drawn borders to a sheet, use {@link #applyBorders}.
     *
     * @param range
     *            - {@link CellRangeAddress} range of cells on which colors are
     *            set.
     * @param color
     *            - Color index from {@link IndexedColors} used to draw the
     *            borders.
     * @param extent
     *            - {@link BorderExtent} of the borders for which
     *            colors are set.
     */
    public void drawBorderColors(CellRangeAddress range, short color,
            BorderExtent extent) {
        switch (extent) {
        case NONE:
            removeBorderColors(range);
            break;
        case ALL:
            drawHorizontalBorderColors(range, color, BorderExtent.ALL);
            drawVerticalBorderColors(range, color, BorderExtent.ALL);
            break;
        case INSIDE:
            drawHorizontalBorderColors(range, color, BorderExtent.INSIDE);
            drawVerticalBorderColors(range, color, BorderExtent.INSIDE);
            break;
        case OUTSIDE:
            drawOutsideBorderColors(range, color, BorderExtent.ALL);
            break;
        case TOP:
            drawTopBorderColor(range, color);
            break;
        case BOTTOM:
            drawBottomBorderColor(range, color);
            break;
        case LEFT:
            drawLeftBorderColor(range, color);
            break;
        case RIGHT:
            drawRightBorderColor(range, color);
            break;
        case HORIZONTAL:
            drawHorizontalBorderColors(range, color, BorderExtent.ALL);
            break;
        case INSIDE_HORIZONTAL:
            drawHorizontalBorderColors(range, color, BorderExtent.INSIDE);
            break;
        case OUTSIDE_HORIZONTAL:
            drawOutsideBorderColors(range, color, BorderExtent.HORIZONTAL);
            break;
        case VERTICAL:
            drawVerticalBorderColors(range, color, BorderExtent.ALL);
            break;
        case INSIDE_VERTICAL:
            drawVerticalBorderColors(range, color, BorderExtent.INSIDE);
            break;
        case OUTSIDE_VERTICAL:
            drawOutsideBorderColors(range, color, BorderExtent.VERTICAL);
            break;
        }
    }

