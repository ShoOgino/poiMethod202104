    @Override
    public void draw(Graphics2D graphics) {
        if (getAnchor(graphics, getShape()) == null) {
            return;
        }

        Paint oldPaint = graphics.getPaint();
        Stroke oldStroke = graphics.getStroke();
        Color oldColor = graphics.getColor();

        Paint fill = getFillPaint(graphics);
        Paint line = getLinePaint(graphics);
        BasicStroke stroke = getStroke(); // the stroke applies both to the shadow and the shape
        graphics.setStroke(stroke);

        Collection<Outline> elems = computeOutlines(graphics);

        // first paint the shadow
        drawShadow(graphics, elems, fill, line);

        // then fill the shape interior
        if (fill != null) {
            final Path2D area = new Path2D.Double();
            graphics.setRenderingHint(Drawable.GRADIENT_SHAPE, area);

            Consumer<PaintModifier> fun = (pm) -> fillArea(graphics, pm, area);

            PaintModifier pm = null;
            for (Outline o : elems) {
                Path path = o.getPath();
                if (path.isFilled()) {
                    PaintModifier pmOld = pm;
                    pm = path.getFill();
                    if (pmOld != null && pmOld != pm) {
                        fun.accept(pmOld);
                        area.reset();
                    } else {
                        area.append(o.getOutline(), false);
                    }
                }
            }

            if (area.getCurrentPoint() != null) {
                fun.accept(pm);
            }
        }

        // then draw any content within this shape (text, image, etc.)
        drawContent(graphics);

        // then stroke the shape outline
        if(line != null) {
            graphics.setPaint(line);
            graphics.setStroke(stroke);
            for(Outline o : elems){
                if(o.getPath().isStroked()){
                    java.awt.Shape s = o.getOutline();
                    graphics.setRenderingHint(Drawable.GRADIENT_SHAPE, s);
                    graphics.draw(s);
                }
            }
        }

        // draw line decorations
        drawDecoration(graphics, line, stroke);

        graphics.setColor(oldColor);
        graphics.setPaint(oldPaint);
        graphics.setStroke(oldStroke);
    }

