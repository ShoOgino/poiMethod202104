   /**
    * Creates a filter round the specified directory, which
    *  will exclude entries such as "MyNode" and "MyDir/IgnoreNode".
    * The excludes can stretch into children, if they contain a /.
    *
    * @param directory The Directory to filter
    * @param excludes The Entries to exclude
    * @throws IllegalArgumentException if directory is null
    */
   public FilteringDirectoryNode(DirectoryEntry directory, Collection<String> excludes) {
      if (directory == null) {
         throw new IllegalArgumentException("directory cannot be null");
      }
      this.directory = directory;

      // Process the excludes
      this.excludes = new HashSet<>();
      this.childExcludes = new HashMap<>();
      for (String excl : excludes) {
         int splitAt = excl.indexOf('/');
         if (splitAt == -1) {
            // Applies to us
            this.excludes.add(excl);
         } else {
            // Applies to a child
            String child = excl.substring(0, splitAt);
            String childExcl = excl.substring(splitAt+1);
            if (! this.childExcludes.containsKey(child)) {
               this.childExcludes.put(child, new ArrayList<>());
            }
            this.childExcludes.get(child).add(childExcl);
         }
      }
   }

