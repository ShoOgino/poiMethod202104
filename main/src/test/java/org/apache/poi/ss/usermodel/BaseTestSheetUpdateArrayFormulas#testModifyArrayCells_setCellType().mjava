    @Test
    void testModifyArrayCells_setCellType() throws IOException {
        try (Workbook workbook = _testDataProvider.createWorkbook()) {
            Sheet sheet = workbook.createSheet();

            // single-cell array formulas behave just like normal cells -
            // changing cell type removes the array formula and associated cached result
            CellRange<? extends Cell> srange =
                    sheet.setArrayFormula("SUM(A4:A6,B4:B6)", CellRangeAddress.valueOf("B5"));
            Cell scell = srange.getTopLeftCell();
            assertEquals(CellType.FORMULA, scell.getCellType());
            assertEquals(0.0, scell.getNumericCellValue(), 0);
            scell.setCellType(CellType.STRING);
            assertEquals(CellType.STRING, scell.getCellType());
            scell.setCellValue("string cell");
            assertEquals("string cell", scell.getStringCellValue());

            //once you create a multi-cell array formula, you cannot change the type of its cells
            CellRange<? extends Cell> mrange =
                    sheet.setArrayFormula("A1:A3*B1:B3", CellRangeAddress.valueOf("C1:C3"));
            for (Cell mcell : mrange) {
                assertEquals(CellType.FORMULA, mcell.getCellType());
                IllegalStateException e = assertThrows(IllegalStateException.class, () -> mcell.setCellType(CellType.NUMERIC));
                CellReference ref = new CellReference(mcell);
                String msg = "Cell " + ref.formatAsString() + " is part of a multi-cell array formula. You cannot change part of an array.";
                assertEquals(msg, e.getMessage());

                // a failed invocation of Cell.setCellType leaves the cell
                // in the state that it was in prior to the invocation
                assertEquals(CellType.FORMULA, mcell.getCellType());
                assertTrue(mcell.isPartOfArrayFormulaGroup());
            }
        }
    }

