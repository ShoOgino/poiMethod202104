    @Test
    void testSetValues() throws Exception {
        try (Workbook book = _testDataProvider.createWorkbook()) {
            Sheet sheet = book.createSheet("test");
            Row row = sheet.createRow(0);

            CreationHelper factory = book.getCreationHelper();
            Cell cell = row.createCell(0);

            cell.setCellValue(1.2);
            assertEquals(1.2, cell.getNumericCellValue(), 0.0001);
            assertEquals(CellType.NUMERIC, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.BOOLEAN, CellType.STRING,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellValue(false);
            assertFalse(cell.getBooleanCellValue());
            assertEquals(CellType.BOOLEAN, cell.getCellType());
            cell.setCellValue(true);
            assertTrue(cell.getBooleanCellValue());
            assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.STRING, CellType.BOOLEAN,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellValue(factory.createRichTextString("Foo"));
            assertEquals("Foo", cell.getRichStringCellValue().getString());
            assertEquals("Foo", cell.getStringCellValue());
            assertEquals(CellType.STRING, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.BOOLEAN,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellValue("345");
            assertEquals("345", cell.getRichStringCellValue().getString());
            assertEquals("345", cell.getStringCellValue());
            assertEquals(CellType.STRING, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.BOOLEAN,
                                        CellType.FORMULA, CellType.ERROR);

            Calendar c = LocaleUtil.getLocaleCalendar();
            c.setTimeInMillis(123456789);
            cell.setCellValue(c.getTime());
            assertEquals(c.getTime().getTime(), cell.getDateCellValue().getTime());
            assertEquals(CellType.NUMERIC, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.BOOLEAN, CellType.STRING,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellValue(c);
            assertEquals(c.getTime().getTime(), cell.getDateCellValue().getTime());
            assertEquals(CellType.NUMERIC, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.BOOLEAN, CellType.STRING,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellErrorValue(FormulaError.NA.getCode());
            assertEquals(FormulaError.NA.getCode(), cell.getErrorCellValue());
            assertEquals(CellType.ERROR, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.BOOLEAN,
                                        CellType.FORMULA, CellType.STRING);

            LocalDateTime ldt = DateUtil.toLocalDateTime(c);
            cell.setCellValue(ldt);
            assertEquals(ldt, cell.getLocalDateTimeCellValue());
            assertEquals(CellType.NUMERIC, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.BOOLEAN, CellType.STRING,
                                        CellType.FORMULA, CellType.ERROR);

            LocalDate ld = ldt.toLocalDate();
            cell.setCellValue(ld);
            assertEquals(ld, cell.getLocalDateTimeCellValue().toLocalDate());
            assertEquals(CellType.NUMERIC, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.BOOLEAN, CellType.STRING,
                                        CellType.FORMULA, CellType.ERROR);

            cell.setCellValue((String)null);
            assertEquals("", cell.getStringCellValue());
            assertEquals(CellType.BLANK, cell.getCellType());

            cell.setCellValue((LocalDate)null);
            assertNull(cell.getLocalDateTimeCellValue());
            assertEquals(CellType.BLANK, cell.getCellType());

            cell.setCellValue((LocalDateTime)null);
            assertNull(cell.getLocalDateTimeCellValue());
            assertEquals(CellType.BLANK, cell.getCellType());

            cell.setCellErrorValue(FormulaError.NA.getCode());
            assertEquals(FormulaError.NA.getCode(), cell.getErrorCellValue());
            assertEquals(CellType.ERROR, cell.getCellType());
            assertProhibitedValueAccess(cell, CellType.NUMERIC, CellType.BOOLEAN,
                                        CellType.FORMULA, CellType.STRING);
        }
    }

