    private static void confirmAreaRowCopy(AreaPtg aptg,
                                           int firstRowCopied, int lastRowCopied, int rowOffset,
                                           int expectedFirstRow, int expectedLastRow, boolean expectedChanged) {
        // clone so we can re-use aptg in calling method
        final AreaPtg copyPtg = aptg.copy();
        final Ptg[] ptgs = { copyPtg, };
        final FormulaShifter fs = FormulaShifter.createForRowCopy(0, null, firstRowCopied, lastRowCopied, rowOffset, SpreadsheetVersion.EXCEL2007);
        final boolean actualChanged = fs.adjustFormula(ptgs, 0);

        // DeletedAreaRef
        if (expectedFirstRow < 0 || expectedLastRow < 0) {
            assertEquals(AreaErrPtg.class, ptgs[0].getClass(), "Reference should have shifted off worksheet, producing #REF! error: " + ptgs[0]);
            return;
        }

        assertEquals(expectedChanged, actualChanged, "Should this AreaPtg change due to row copy?");
        // expected to change in place (although this is not a strict requirement)
        assertEquals(copyPtg, ptgs[0], "AreaPtgs should be modified in-place when a row containing the AreaPtg is copied");
        assertEquals(expectedFirstRow, copyPtg.getFirstRow(), "AreaPtg first row");
        assertEquals(expectedLastRow, copyPtg.getLastRow(), "AreaPtg last row");

    }

