    /**
     * Writes to a new stream in the file
     */
    @Test
    void testWriteNewStream() throws Exception {
        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream("BlockSize512.zvi"));

        // 100 is our first free one
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(100));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));


        // Add a single block one
        byte[] data = new byte[512];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) (i % 256);
        }

        POIFSStream stream = new POIFSStream(fs);
        stream.updateContents(data);

        // Check it was allocated properly
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));

        // And check the contents
        Iterator<ByteBuffer> it = stream.getBlockIterator();
        int count = 0;
        while (it.hasNext()) {
            ByteBuffer b = it.next();
            data = new byte[512];
            b.get(data);
            for (int i = 0; i < data.length; i++) {
                byte exp = (byte) (i % 256);
                assertEquals(exp, data[i]);
            }
            count++;
        }
        assertEquals(1, count);


        // And a multi block one
        data = new byte[512 * 3];
        for (int i = 0; i < data.length; i++) {
            data[i] = (byte) (i % 256);
        }

        stream = new POIFSStream(fs);
        stream.updateContents(data);

        // Check it was allocated properly
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));
        assertEquals(102, fs.getNextBlock(101));
        assertEquals(103, fs.getNextBlock(102));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(103));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));

        // And check the contents
        it = stream.getBlockIterator();
        count = 0;
        while (it.hasNext()) {
            ByteBuffer b = it.next();
            data = new byte[512];
            b.get(data);
            for (int i = 0; i < data.length; i++) {
                byte exp = (byte) (i % 256);
                assertEquals(exp, data[i]);
            }
            count++;
        }
        assertEquals(3, count);

        // Free it
        stream.free();
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));

        fs.close();
    }

