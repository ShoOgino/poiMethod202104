	/**
	 * TEST NAME:  Test Creating ContinueRecords After Unknown Records From An InputStream <P>
	 * OBJECTIVE:  Test that the RecordFactory given an InputStream
	 *             constructs the expected array of records.<P>
	 * SUCCESS:	Record factory creates the expected records.<P>
	 * FAILURE:	The wrong records are created or contain the wrong values <P>
	 */
    @Test
	void testContinuedUnknownRecord() {
		byte[] data = {
			0, -1, 0, 0, // an unknown record with 0 length
			0x3C , 0, 3, 0, 1, 2, 3, // a continuation record with 3 bytes of data
			0x3C , 0, 1, 0, 4 // one more continuation record with 1 byte of data
		};

		ByteArrayInputStream bois = new ByteArrayInputStream(data);
		Record[] records = RecordFactory.createRecords(bois).toArray(new Record[0]);
		assertEquals(3, records.length, "Created record count");
		assertEquals(UnknownRecord.class.getName(), records[ 0 ].getClass().getName(), "1st record's type");
		assertEquals((short)-256, records[0].getSid(), "1st record's sid");
		assertEquals(ContinueRecord.class.getName(), records[ 1 ].getClass().getName(), "2nd record's type");
		ContinueRecord record = (ContinueRecord) records[1];
		assertEquals(0x3C, record.getSid(), "2nd record's sid");
		assertEquals(1, record.getData()[ 0 ], "1st data byte");
		assertEquals(2, record.getData()[ 1 ], "2nd data byte");
		assertEquals(3, record.getData()[ 2 ], "3rd data byte");
		assertEquals(ContinueRecord.class.getName(), records[ 2 ].getClass().getName(), "3rd record's type");
		record = (ContinueRecord) records[2];
		assertEquals(0x3C, record.getSid(), "3nd record's sid");
		assertEquals(4, record.getData()[ 0 ], "4th data byte");
	}

