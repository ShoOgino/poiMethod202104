    /**
     * Verifies that a custom palette can be created, saved, and reloaded
     */
    @Test
    void testCustomPalette() {
        //reading sample xls
        HSSFWorkbook book = HSSFTestDataSamples.openSampleWorkbook("Simple.xls");

        //creating custom palette
        HSSFPalette palette = book.getCustomPalette();
        palette.setColorAtIndex((short) 0x12, (byte) 101, (byte) 230, (byte) 100);
        palette.setColorAtIndex((short) 0x3b, (byte) 0, (byte) 255, (byte) 52);

        //writing to disk; reading in and verifying palette
        book = HSSFTestDataSamples.writeOutAndReadBack(book);

        palette = book.getCustomPalette();
        HSSFColor color = palette.getColor(HSSFColorPredefined.CORAL.getIndex());  //unmodified
        assertNotNull(color, "Unexpected null in custom palette (unmodified index)");
        short[] expectedRGB = HSSFColorPredefined.CORAL.getTriplet();
        short[] actualRGB = color.getTriplet();
        String msg = "Expected palette position to remain unmodified";
        assertEquals(expectedRGB[0], actualRGB[0], msg);
        assertEquals(expectedRGB[1], actualRGB[1], msg);
        assertEquals(expectedRGB[2], actualRGB[2], msg);

        color = palette.getColor((short) 0x12);
        assertNotNull(color, "Unexpected null in custom palette (modified)");
        actualRGB = color.getTriplet();
        msg = "Expected palette modification to be preserved across save";
        assertEquals((short) 101, actualRGB[0], msg);
        assertEquals((short) 230, actualRGB[1], msg);
        assertEquals((short) 100, actualRGB[2], msg);
    }

