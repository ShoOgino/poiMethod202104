    @Test
    void columnWidthA() throws IOException {
        // check we can correctly read column widths from a reference workbook
        try (HSSFWorkbook wb = HSSFTestDataSamples.openSampleWorkbook("colwidth.xls")) {

            //reference values
            int[] ref = {365, 548, 731, 914, 1097, 1280, 1462, 1645, 1828, 2011, 2194, 2377, 2560, 2742, 2925, 3108, 3291, 3474, 3657};

            HSSFSheet sh = wb.getSheetAt(0);
            for (char i = 'A'; i <= 'S'; i++) {
                int idx = i - 'A';
                int w = sh.getColumnWidth(idx);
                assertEquals(ref[idx], w);
            }

            //the second sheet doesn't have overridden column widths
            sh = wb.getSheetAt(1);
            int def_width = sh.getDefaultColumnWidth();
            for (char i = 'A'; i <= 'S'; i++) {
                int idx = i - 'A';
                int w = sh.getColumnWidth(idx);
                //getDefaultColumnWidth returns width measured in characters
                //getColumnWidth returns width measured in 1/256th units
                assertEquals(def_width * 256, w);
            }
        }

        // test new workbook
        try (HSSFWorkbook wb1 = new HSSFWorkbook()) {
            HSSFSheet sh = wb1.createSheet();
            sh.setDefaultColumnWidth(10);
            assertEquals(10, sh.getDefaultColumnWidth());
            assertEquals(256 * 10, sh.getColumnWidth(0));
            assertEquals(256 * 10, sh.getColumnWidth(1));
            assertEquals(256 * 10, sh.getColumnWidth(2));
            for (char i = 'D'; i <= 'F'; i++) {
                short w = (256 * 12);
                sh.setColumnWidth(i, w);
                assertEquals(w, sh.getColumnWidth(i));
            }

            //serialize and read again
            try (HSSFWorkbook wb2 = writeOutAndReadBack(wb1)) {
                sh = wb2.getSheetAt(0);
                assertEquals(10, sh.getDefaultColumnWidth());
                //columns A-C have default width
                assertEquals(256 * 10, sh.getColumnWidth(0));
                assertEquals(256 * 10, sh.getColumnWidth(1));
                assertEquals(256 * 10, sh.getColumnWidth(2));
                //columns D-F have custom width
                for (char i = 'D'; i <= 'F'; i++) {
                    short w = (256 * 12);
                    assertEquals(w, sh.getColumnWidth(i));
                }

                // check for 16-bit signed/unsigned error:
                sh.setColumnWidth(0, 40000);
                assertEquals(40000, sh.getColumnWidth(0));
            }
        }
    }

