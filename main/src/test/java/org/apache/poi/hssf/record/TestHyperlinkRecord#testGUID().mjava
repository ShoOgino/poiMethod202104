    @Test
	void testGUID() throws IOException {
		ClassID g;
		g = new ClassID("3F2504E0-4F89-11D3-9A0C-0305E82C3301");
		confirmGUID(g, 0x3F2504E0, 0x4F89, 0x11D3, 0x9A0C0305E82C3301L);
		assertEquals("{3F2504E0-4F89-11D3-9A0C-0305E82C3301}", g.toString());

		g = new ClassID("13579BDF-0246-8ACE-0123-456789ABCDEF");
		confirmGUID(g, 0x13579BDF, 0x0246, 0x8ACE, 0x0123456789ABCDEFL);
		assertEquals("{13579BDF-0246-8ACE-0123-456789ABCDEF}", g.toString());

		byte[] buf = new byte[16];
		g.write(new LittleEndianByteArrayOutputStream(buf, 0));
		String expectedDump = "[DF, 9B, 57, 13, 46, 02, CE, 8A, 01, 23, 45, 67, 89, AB, CD, EF]";
		assertEquals(expectedDump, HexDump.toHex(buf));

		// STD Moniker
		g = createFromStreamDump("[D0, C9, EA, 79, F9, BA, CE, 11, 8C, 82, 00, AA, 00, 4B, A9, 0B]");
		assertEquals("{79EAC9D0-BAF9-11CE-8C82-00AA004BA90B}", g.toString());
		// URL Moniker
		g = createFromStreamDump("[E0, C9, EA, 79, F9, BA, CE, 11, 8C, 82, 00, AA, 00, 4B, A9, 0B]");
		assertEquals("{79EAC9E0-BAF9-11CE-8C82-00AA004BA90B}", g.toString());
		// File Moniker
		g = createFromStreamDump("[03, 03, 00, 00, 00, 00, 00, 00, C0, 00, 00, 00, 00, 00, 00, 46]");
		assertEquals("{00000303-0000-0000-C000-000000000046}", g.toString());
	}

