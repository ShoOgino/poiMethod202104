    private void cellListToArray() {
        List<HSLFTableCell> htc = new ArrayList<>();
        for (HSLFShape h : getShapes()) {
            if (h instanceof HSLFTableCell) {
                htc.add((HSLFTableCell)h);
            }
        }

        if (htc.isEmpty()) {
            throw new IllegalStateException("HSLFTable without HSLFTableCells");
        }
        
        SortedSet<Double> colSet = new TreeSet<>();
        SortedSet<Double> rowSet = new TreeSet<>();
        
        // #1 pass - determine cols and rows
        for (HSLFTableCell sh : htc) {
            Rectangle2D anchor = sh.getAnchor();
            colSet.add(anchor.getX());
            rowSet.add(anchor.getY());
        }
        cells = new HSLFTableCell[rowSet.size()][colSet.size()];
        
        List<Double> colLst = new ArrayList<>(colSet);
        List<Double> rowLst = new ArrayList<>(rowSet);
        
        // #2 pass - assign shape to table cells
        for (HSLFTableCell sh : htc) {
            Rectangle2D anchor = sh.getAnchor();
            int row = rowLst.indexOf(anchor.getY());
            int col = colLst.indexOf(anchor.getX());
            assert(row != -1 && col != -1);
            cells[row][col] = sh;
            
            // determine gridSpan / rowSpan
            int gridSpan = calcSpan(colLst, anchor.getWidth(), col);
            int rowSpan = calcSpan(rowLst, anchor.getHeight(), row);
            
            sh.setGridSpan(gridSpan);
            sh.setRowSpan(rowSpan);
        }        
    }

