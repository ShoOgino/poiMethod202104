    /**
     * Constructs the link related atom record from its
     *  source data.
     *
     * @param source the source data as a byte array.
     * @param start the start offset into the byte array.
     * @param len the length of the slice in the byte array.
     */
    protected StyleTextProp9Atom(byte[] source, int start, int len) {
        // Get the header.
        final List<TextPFException9> schemes = new LinkedList<>();
        header = Arrays.copyOfRange(source, start, start+8);
        this.version  = LittleEndian.getShort(header, 0);
        this.recordId = LittleEndian.getShort(header, 2);
        this.length   = LittleEndian.getInt(header, 4);

        // Get the record data.
        data = IOUtils.safelyClone(source,  start+8, len-8, MAX_RECORD_LENGTH);
        for (int i = 0; i < data.length; ) {
            final TextPFException9 item = new TextPFException9(data, i);
            schemes.add(item);
            i += item.getRecordLength();

            if (i+4 >= data.length) {
                break;
            }
            int textCfException9 = LittleEndian.getInt(data, i );
            i += 4;
            //TODO analyze textCfException when have some test data

            if (i+4 >= data.length) {
                break;
            }
            int textSiException = LittleEndian.getInt(data, i );
            i += 4;//TextCFException9 + SIException

            if (0 != (textSiException & 0x40)) {
                i += 2; //skip fBidi
            }
            if (i+4 >= data.length) {
                break;
            }
        }
        this.autoNumberSchemes = schemes.toArray(new TextPFException9[0]);
    }

