    /**
     * Write the contents of the record back, so it can be written
     * to disk
     *
     * @param out the output stream to write to.
     * @throws java.io.IOException if an error occurs.
     */
    public void writeOut(OutputStream out) throws IOException {
        final byte[] buf = new byte[4];
        LittleEndian.putInt(buf, 0, length);
        out.write(buf);
        LittleEndian.putInt(buf, 0, mask);
        out.write(buf);
        Object[] flds = {
                spellFld, spellInfo, "spell info",
                langFld, langId, "lang id",
                altLangFld, altLangId, "alt lang id",
                bidiFld, bidi, "bidi",
                pp10extFld, pp10extMask, "pp10 extension field",
                smartTagFld, smartTagsBytes, "smart tags"
        };

        for (int i=0; i<flds.length-1; i+=3) {
            BitField fld = (BitField)flds[i+0];
            Object valO = flds[i+1];
            if (!fld.isSet(mask)) {
                continue;
            }
            boolean valid;
            if (valO instanceof byte[]) {
                byte[] bufB = (byte[]) valO;
                valid = bufB.length > 0;
                out.write(bufB);
            } else if (valO instanceof Integer) {
                int valI = ((Integer)valO);
                valid = (valI != -1);
                LittleEndian.putInt(buf, 0, valI);
                out.write(buf);
            } else if (valO instanceof Short) {
                short valS = ((Short)valO);
                valid = (valS != -1);
                LittleEndian.putShort(buf, 0, valS);
                out.write(buf, 0, 2);
            } else {
                valid = false;
            }
            if (!valid) {
                Object fval = (i + 2) < flds.length ? flds[i + 2] : null;
                throw new IOException(fval + " is activated, but its value is invalid");
            }
        }
    }

