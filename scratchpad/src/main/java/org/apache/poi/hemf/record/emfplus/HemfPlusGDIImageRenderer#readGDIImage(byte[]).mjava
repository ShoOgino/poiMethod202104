    /**
     * Converts the gdi pixel data to a buffered image
     * @param data the image data of all EmfPlusImage parts
     * @return the BufferedImage
     */
    public BufferedImage readGDIImage(final byte[] data) {
        int[] nBits, bOffs;
        switch (pixelFormat) {
            case ARGB_32BPP:
                nBits = new int[]{8, 8, 8, 8};
                bOffs = new int[]{2, 1, 0, 3};
                break;
            case RGB_24BPP:
                nBits = new int[]{8, 8, 8};
                bOffs = new int[]{2, 1, 0};
                break;
            default:
                throw new RuntimeException("not yet implemented");
        }

        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
        ComponentColorModel cm = new ComponentColorModel
            (cs, nBits, pixelFormat.isAlpha(), pixelFormat.isPreMultiplied(), Transparency.TRANSLUCENT, DataBuffer.TYPE_BYTE);
        PixelInterleavedSampleModel csm =
            new PixelInterleavedSampleModel(cm.getTransferType(), width, height, cm.getNumComponents(), stride, bOffs);

        DataBufferByte dbb = new DataBufferByte(data, data.length);
        WritableRaster raster = (WritableRaster) Raster.createRaster(csm, dbb, null);

        return new BufferedImage(cm, raster, cm.isAlphaPremultiplied(), null);
    }

