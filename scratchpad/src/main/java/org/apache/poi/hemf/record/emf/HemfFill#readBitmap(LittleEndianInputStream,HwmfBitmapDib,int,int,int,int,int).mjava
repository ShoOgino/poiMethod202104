    static long readBitmap(final LittleEndianInputStream leis, final HwmfBitmapDib bitmap,
            final int startIdx, final int offBmi, final int cbBmi, final int offBits, int cbBits)
    throws IOException {
        if (offBmi == 0) {
            return 0;
        }

        final int offCurr = leis.getReadIndex()-(startIdx-HEADER_SIZE);
        final int undefinedSpace1 = offBmi-offCurr;
        if (undefinedSpace1 < 0) {
            return 0;
        }

        final int undefinedSpace2 = offBits-offCurr-cbBmi-undefinedSpace1;
        assert(undefinedSpace2 >= 0);

        leis.skipFully(undefinedSpace1);

        if (cbBmi == 0 || cbBits == 0) {
            return undefinedSpace1;
        }

        final int dibSize = cbBmi+cbBits;
        if (undefinedSpace2 == 0) {
            return (long)undefinedSpace1 + bitmap.init(leis, dibSize);
        }

        final ByteArrayOutputStream bos = new ByteArrayOutputStream(cbBmi+cbBits);
        final long cbBmiSrcAct = IOUtils.copy(leis, bos, cbBmi);
        assert (cbBmiSrcAct == cbBmi);
        leis.skipFully(undefinedSpace2);
        final long cbBitsSrcAct = IOUtils.copy(leis, bos, cbBits);
        assert (cbBitsSrcAct == cbBits);

        final LittleEndianInputStream leisDib = new LittleEndianInputStream(new ByteArrayInputStream(bos.toByteArray()));
        final int dibSizeAct = bitmap.init(leisDib, dibSize);
        assert (dibSizeAct <= dibSize);
        return (long)undefinedSpace1 + cbBmi + undefinedSpace2 + cbBits;
    }

