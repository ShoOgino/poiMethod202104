    /**
     * Creates a byte array representation of this data structure. Suitable for
     * writing to a Word document.
     *
     * @param dataStream required if PAPX is too big to fit in FKP
     *
     * @return A byte array representing this data structure.
     * @throws IOException
     *             if an I/O error occurs.
     */
    protected byte[] toByteArray( ByteArrayOutputStream dataStream,
            CharIndexTranslator translator ) throws IOException
    {
        byte[] buf = new byte[512];
        int size = _papxList.size();
        int grpprlOffset = 0;
        int bxOffset = 0;
        int fcOffset = 0;
        byte[] lastGrpprl = new byte[0];

        // total size is currently the size of one FC
        int totalSize = FC_SIZE;

        int index = 0;
        for ( ; index < size; index++ )
        {
            byte[] grpprl = _papxList.get( index ).getGrpprl();
            int grpprlLength = grpprl.length;

            // is grpprl huge?
            if ( grpprlLength > 488 )
            {
                grpprlLength = 8; // set equal to size of sprmPHugePapx grpprl
            }

            // check to see if we have enough room for an FC, a BX, and the
            // grpprl
            // and the 1 byte size of the grpprl.
            int addition = 0;
            if ( !Arrays.equals( grpprl, lastGrpprl ) )
            {
                addition = ( FC_SIZE + BX_SIZE + grpprlLength + 1 );
            }
            else
            {
                addition = ( FC_SIZE + BX_SIZE );
            }

            totalSize += addition;

            // if size is uneven we will have to add one so the first grpprl
            // falls
            // on a word boundary
            if ( totalSize > 511 + ( index % 2 ) )
            {
                totalSize -= addition;
                break;
            }

            // grpprls must fall on word boundaries
            if ( grpprlLength % 2 > 0 )
            {
                totalSize += 1;
            }
            else
            {
                totalSize += 2;
            }
            lastGrpprl = grpprl;
        }

        // see if we couldn't fit some
        if ( index != size )
        {
            _overFlow = new ArrayList<>();
            _overFlow.addAll( _papxList.subList( index, size ) );
        }

        // index should equal number of papxs that will be in this fkp now.
        buf[511] = (byte) index;

        bxOffset = ( FC_SIZE * index ) + FC_SIZE;
        grpprlOffset = 511;

        PAPX papx = null;
        lastGrpprl = new byte[0];
        for ( int x = 0; x < index; x++ )
        {
            papx = _papxList.get( x );
            byte[] phe = papx.getParagraphHeight().toByteArray();
            byte[] grpprl = papx.getGrpprl();

            // is grpprl huge?
            if ( grpprl.length > 488 )
            {
                // if so do we have storage at getHugeGrpprlOffset()
                // int hugeGrpprlOffset = papx.getHugeGrpprlOffset();
                // if ( hugeGrpprlOffset == -1 ) // then we have no storage...
                // {
                // throw new UnsupportedOperationException(
                // "This Paragraph has no dataStream storage." );
                // }
                // we have some storage...

                // get the size of the existing storage
                // int maxHugeGrpprlSize = LittleEndian.getUShort( dataStream,
                // hugeGrpprlOffset );
                //
                // if ( maxHugeGrpprlSize < grpprl.length - 2 )
                // { // grpprl.length-2 because we don't store the istd
                // throw new UnsupportedOperationException(
                // "This Paragraph's dataStream storage is too small." );
                // }

                // store grpprl at hugeGrpprlOffset
                // grpprl.length-2 because we don't store the istd
                // System.arraycopy( grpprl, 2, dataStream, hugeGrpprlOffset +
                // 2,
                // grpprl.length - 2 );
                // LittleEndian.putUShort( dataStream, hugeGrpprlOffset,
                // grpprl.length - 2 );

                byte[] hugePapx = Arrays.copyOfRange(grpprl, 2, grpprl.length);
                int dataStreamOffset = dataStream.size();
                dataStream.write( hugePapx );

                // grpprl = grpprl containing only a sprmPHugePapx2
                int istd = LittleEndian.getUShort( grpprl, 0 );

                grpprl = new byte[8];
                LittleEndian.putUShort( grpprl, 0, istd );
                LittleEndian.putUShort( grpprl, 2, 0x6646 ); // sprmPHugePapx2
                LittleEndian.putInt( grpprl, 4, dataStreamOffset );
            }

            boolean same = Arrays.equals( lastGrpprl, grpprl );
            if ( !same )
            {
                grpprlOffset -= ( grpprl.length + ( 2 - grpprl.length % 2 ) );
                grpprlOffset -= ( grpprlOffset % 2 );
            }
            // LittleEndian.putInt( buf, fcOffset, papx.getStartBytes() );
            LittleEndian.putInt( buf, fcOffset,
                    translator.getByteIndex( papx.getStart() ) );
            buf[bxOffset] = (byte) ( grpprlOffset / 2 );
            System.arraycopy( phe, 0, buf, bxOffset + 1, phe.length );

            /*
             * refer to the section on PAPX in the spec. Places a size on the
             * front of the PAPX. Has to do with how the grpprl stays on word
             * boundaries.
             */
            if ( !same )
            {
                int copyOffset = grpprlOffset;
                if ( ( grpprl.length % 2 ) > 0 )
                {
                    buf[copyOffset++] = (byte) ( ( grpprl.length + 1 ) / 2 );
                }
                else
                {
                    buf[++copyOffset] = (byte) ( ( grpprl.length ) / 2 );
                    copyOffset++;
                }
                System.arraycopy( grpprl, 0, buf, copyOffset, grpprl.length );
                lastGrpprl = grpprl;
            }

            bxOffset += BX_SIZE;
            fcOffset += FC_SIZE;

        }

        if (papx != null) {
            // LittleEndian.putInt(buf, fcOffset, papx.getEndBytes() + fcMin);
            LittleEndian.putInt(buf, fcOffset, translator.getByteIndex(papx.getEnd()));
        }
        return buf;
    }

