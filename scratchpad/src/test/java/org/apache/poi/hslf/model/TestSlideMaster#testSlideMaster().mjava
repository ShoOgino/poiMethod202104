    /**
     * The reference ppt has two masters.
     * Check we can read their attributes.
     */
    @Test
    void testSlideMaster() throws IOException {
        final HSLFSlideShow ppt = new HSLFSlideShow(_slTests.openResourceAsStream("slide_master.ppt"));

        final Environment env = ppt.getDocumentRecord().getEnvironment();

        assertEquals(2, ppt.getSlideMasters().size());

        //character attributes
        assertEquals(40, getMasterVal(ppt, 0, TITLE, "font.size", true));
        assertEquals(48, getMasterVal(ppt, 1, TITLE, "font.size", true));

        int font1 = getMasterVal(ppt, 0, TITLE, "font.index", true);
        int font2 = getMasterVal(ppt, 1, TITLE, "font.index", true);
        assertEquals("Arial", env.getFontCollection().getFontInfo(font1).getTypeface());
        assertEquals("Georgia", env.getFontCollection().getFontInfo(font2).getTypeface());

        CharFlagsTextProp prop1 = getMasterProp(ppt, 0, TITLE, "char_flags", true);
        assertFalse(prop1.getSubValue(CharFlagsTextProp.BOLD_IDX));
        assertFalse(prop1.getSubValue(CharFlagsTextProp.ITALIC_IDX));
        assertTrue(prop1.getSubValue(CharFlagsTextProp.UNDERLINE_IDX));

        CharFlagsTextProp prop2 = getMasterProp(ppt, 1, TITLE, "char_flags", true);
        assertFalse(prop2.getSubValue(CharFlagsTextProp.BOLD_IDX));
        assertTrue(prop2.getSubValue(CharFlagsTextProp.ITALIC_IDX));
        assertFalse(prop2.getSubValue(CharFlagsTextProp.UNDERLINE_IDX));

        //now paragraph attributes
        assertEquals(0x266B, getMasterVal(ppt, 0, BODY, "bullet.char", false));
        assertEquals(0x2022, getMasterVal(ppt, 1, BODY, "bullet.char", false));

        int b1 = getMasterVal(ppt, 0, BODY, "bullet.font", false);
        int b2 = getMasterVal(ppt, 1, BODY, "bullet.font", false);
        assertEquals("Arial", env.getFontCollection().getFontInfo(b1).getTypeface());
        assertEquals("Georgia", env.getFontCollection().getFontInfo(b2).getTypeface());

        ppt.close();
    }

