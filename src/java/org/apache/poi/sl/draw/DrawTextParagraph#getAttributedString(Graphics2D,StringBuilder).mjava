    protected List<AttributedStringData> getAttributedString(Graphics2D graphics, StringBuilder text) {
        if (text == null) {
            text = new StringBuilder();
        }

        final DrawPaint dp = new DrawPaint(getParagraphShape());
        DrawFontManager dfm = DrawFactory.getInstance(graphics).getFontManager(graphics);
        assert(dfm != null);

        final Map<Attribute,Object> att = new HashMap<>();
        final List<AttributedStringData> attList = new ArrayList<>();

        for (TextRun run : paragraph){
            String runText = getRenderableText(graphics, run);
            // skip empty runs
            if (runText.isEmpty()) {
                continue;
            }

            att.clear();

            // user can pass an custom object to convert fonts
            FontInfo fontInfo = run.getFontInfo(null);
            runText = dfm.mapFontCharset(graphics, fontInfo, runText);
            final int beginIndex = text.length();
            text.append(runText);
            final int endIndex = text.length();

            PaintStyle fgPaintStyle = run.getFontColor();
            Paint fgPaint = dp.getPaint(graphics, fgPaintStyle);

            att.put(TextAttribute.FOREGROUND, fgPaint);

            Double fontSz = run.getFontSize();
            if (fontSz == null) {
                fontSz = paragraph.getDefaultFontSize();
            }
            att.put(TextAttribute.SIZE, fontSz.floatValue());

            if(run.isBold()) {
                att.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
            }
            if(run.isItalic()) {
                att.put(TextAttribute.POSTURE, TextAttribute.POSTURE_OBLIQUE);
            }
            if(run.isUnderlined()) {
                att.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
                att.put(TextAttribute.INPUT_METHOD_UNDERLINE, TextAttribute.UNDERLINE_LOW_TWO_PIXEL);
            }
            if(run.isStrikethrough()) {
                att.put(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON);
            }
            if(run.isSubscript()) {
                att.put(TextAttribute.SUPERSCRIPT, TextAttribute.SUPERSCRIPT_SUB);
            }
            if(run.isSuperscript()) {
                att.put(TextAttribute.SUPERSCRIPT, TextAttribute.SUPERSCRIPT_SUPER);
            }

            Hyperlink<?,?> hl = run.getHyperlink();
            if (hl != null) {
                att.put(HYPERLINK_HREF, hl.getAddress());
                att.put(HYPERLINK_LABEL, hl.getLabel());
            }

            if (fontInfo != null) {
                att.put(TextAttribute.FAMILY, fontInfo.getTypeface());
            } else {
                att.put(TextAttribute.FAMILY, paragraph.getDefaultFontFamily());
            }

            att.put(TextAttribute.FONT, new Font(att));

            att.forEach((k,v) -> attList.add(new AttributedStringData(k,v,beginIndex,endIndex)));

            processGlyphs(graphics, dfm, attList, beginIndex, run, runText);
        }

        // ensure that the paragraph contains at least one character
        // We need this trick to correctly measure text
        if (text.length() == 0) {
            text.append(" ");

            Double fontSz = paragraph.getDefaultFontSize();
            att.put(TextAttribute.SIZE, fontSz.floatValue());
            att.put(TextAttribute.FAMILY, paragraph.getDefaultFontFamily());
            att.put(TextAttribute.FONT, new Font(att));

            att.forEach((k,v) -> attList.add(new AttributedStringData(k,v,0,1)));
        }

        return attList;
    }

