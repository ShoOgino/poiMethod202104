    /**
     * Returns an ImageRenderer for the PictureData
     *
     * @param graphics the graphics context
     * @return the image renderer
     */
    public static ImageRenderer getImageRenderer(Graphics2D graphics, String contentType) {
        final ImageRenderer renderer = (graphics != null) ? (ImageRenderer)graphics.getRenderingHint(Drawable.IMAGE_RENDERER) : null;
        if (renderer != null && renderer.canRender(contentType)) {
            return renderer;
        }

        final BitmapImageRenderer fallback = new BitmapImageRenderer();
        if (fallback.canRender(contentType)) {
            return fallback;
        }

        // the fallback is the BitmapImageRenderer, at least it gracefully handles invalid images
        final Supplier<ImageRenderer> getFallback = () -> {
            LOG.log(POILogger.WARN, "No suitable image renderer found for content-type '"+
            contentType+"' - include poi-scratchpad (for wmf/emf) or poi-ooxml (for svg) jars!");
            return fallback;
        };

        ClassLoader cl = DrawPictureShape.class.getClassLoader();
        return StreamSupport
            .stream(ServiceLoader.load(ImageRenderer.class, cl).spliterator(), false)
            .filter(ir -> ir.canRender(contentType))
            .findFirst()
            .orElseGet(getFallback)
        ;
    }

