    /**
     * Returns an ImageRenderer for the PictureData
     *
     * @param graphics the graphics context
     * @return the image renderer
     */
    public static ImageRenderer getImageRenderer(Graphics2D graphics, String contentType) {
        final ImageRenderer renderer = (graphics != null) ? (ImageRenderer)graphics.getRenderingHint(Drawable.IMAGE_RENDERER) : null;
        if (renderer != null && renderer.canRender(contentType)) {
            return renderer;
        }

        final BitmapImageRenderer fallback = new BitmapImageRenderer();
        if (fallback.canRender(contentType)) {
            return fallback;
        }

        ClassLoader cl = DrawPictureShape.class.getClassLoader();
        Iterator<ImageRenderer> iter = ServiceLoader.load(ImageRenderer.class, cl).iterator();
        for (;;) {
            // Batik / SVGImageRenderer fails when executed on the module-path, hence we try/skip it in that case
            try {
                ImageRenderer ir = iter.next();
                if (ir.canRender(contentType)) {
                    return ir;
                }
            } catch (NoSuchElementException ignored) {
                break;
            } catch (Exception | ServiceConfigurationError ignored) {
            }
        }

        // the fallback is the BitmapImageRenderer, at least it gracefully handles invalid images
        LOG.atWarn().log("No suitable image renderer found for content-type '{}' - include " +
            "poi-scratchpad (for wmf/emf) or poi-ooxml (for svg) jars - " +
            "svgs/batik doesn't work on the module-path!", contentType);
        return fallback;
    }

