    /**
     * Renders the text specified by the specified <code>String</code>,
     * using the current text attribute state in the <code>Graphics2D</code> context.
     * The baseline of the first character is at position
     * (<i>x</i>,&nbsp;<i>y</i>) in the User Space.
     * The rendering attributes applied include the <code>Clip</code>,
     * <code>Transform</code>, <code>Paint</code>, <code>Font</code> and
     * <code>Composite</code> attributes. For characters in script systems
     * such as Hebrew and Arabic, the glyphs can be rendered from right to
     * left, in which case the coordinate supplied is the location of the
     * leftmost character on the baseline.
     * @param s the <code>String</code> to be rendered
     * @param x the x coordinate of the location where the
     * <code>String</code> should be rendered
     * @param y the y coordinate of the location where the
     * <code>String</code> should be rendered
     * @throws NullPointerException if <code>str</code> is
     *         <code>null</code>
     * @see #setPaint
     * @see Graphics#setColor
     * @see Graphics#setFont
     * @see #setTransform
     * @see #setComposite
     * @see #setClip
     */
    public void drawString(String s, float x, float y) {
        TextBox<?,?> txt = _group.createTextBox();

        TextRun rt = txt.getTextParagraphs().get(0).getTextRuns().get(0);
        rt.setFontSize((double)_font.getSize());
        rt.setFontFamily(_font.getFamily());

        if (getColor() != null) rt.setFontColor(DrawPaint.createSolidPaint(getColor()));
        if (_font.isBold()) rt.setBold(true);
        if (_font.isItalic()) rt.setItalic(true);

        txt.setText(s);

        txt.setInsets(new Insets2D(0,0,0,0));
        txt.setWordWrap(false);
        txt.setHorizontalCentered(false);
        txt.setVerticalAlignment(VerticalAlignment.MIDDLE);


        TextLayout layout = new TextLayout(s, _font, getFontRenderContext());
        float ascent = layout.getAscent();

        float width = (float) Math.floor(layout.getAdvance());

        /*
         * Even if top and bottom margins are set to 0 PowerPoint
         * always sets extra space between the text and its bounding box.
         *
         * The approximation height = ascent*2 works good enough in most cases
         */
        float height = ascent * 2;

        /*
          In powerpoint anchor of a shape is its top left corner.
          Java graphics sets string coordinates by the baseline of the first character
          so we need to shift up by the height of the textbox
        */
        y -= height / 2 + ascent / 2;

        /*
          In powerpoint anchor of a shape is its top left corner.
          Java graphics sets string coordinates by the baseline of the first character
          so we need to shift down by the height of the textbox
        */
        txt.setAnchor(new Rectangle((int)x, (int)y, (int)width, (int)height));
    }

