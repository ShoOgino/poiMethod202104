    /**
     * break text into lines, each representing a line of text that fits in the wrapping width
     *
     * @param graphics The drawing context for computing text-lengths.
     */
    protected void breakText(Graphics2D graphics){
        lines.clear();

        DrawFactory fact = DrawFactory.getInstance(graphics);
        StringBuilder text = new StringBuilder();

        List<AttributedStringData> attList = getAttributedString(graphics, text);
        AttributedString as = new AttributedString(text.toString());
        AttributedString asNoCR = new AttributedString(text.toString().replaceAll("[\\r\\n]", " "));

        for (AttributedStringData asd : attList) {
            as.addAttribute(asd.attribute, asd.value, asd.beginIndex, asd.endIndex);
            asNoCR.addAttribute(asd.attribute, asd.value, asd.beginIndex, asd.endIndex);
        }

        AttributedCharacterIterator it = as.getIterator();
        AttributedCharacterIterator itNoCR = asNoCR.getIterator();
        LineBreakMeasurer measurer = new LineBreakMeasurer(it, graphics.getFontRenderContext());
        for (;;) {
            int startIndex = measurer.getPosition();

            // add a pixel to compensate rounding errors
            double wrappingWidth = getWrappingWidth(lines.isEmpty(), graphics) + 1;
            // shape width can be smaller that the sum of insets (this was proved by a test file)
            if(wrappingWidth < 0) {
                wrappingWidth = 1;
            }

            // usually "\n" is added after a line, if it occurs before it - only possible as first char -
            // we need to add an empty line
            TextLayout layout;
            int endIndex;
            if (startIndex == 0 && text.toString().startsWith("\n")) {
                layout = measurer.nextLayout((float) wrappingWidth, 1, false);
                endIndex = 1;
            } else {
                int nextBreak = text.indexOf("\n", startIndex + 1);
                if (nextBreak == -1) {
                    nextBreak = it.getEndIndex();
                }

                layout = measurer.nextLayout((float) wrappingWidth, nextBreak, true);
                if (layout == null) {
                    // layout can be null if the entire word at the current position
                    // does not fit within the wrapping width. Try with requireNextWord=false.
                    layout = measurer.nextLayout((float) wrappingWidth, nextBreak, false);
                }

                if (layout == null) {
                    // exit if can't break any more
                    break;
                }

                endIndex = measurer.getPosition();
                // skip over new line breaks (we paint 'clear' text runs not starting or ending with \n)
                if (endIndex < it.getEndIndex() && text.charAt(endIndex) == '\n') {
                    measurer.setPosition(endIndex + 1);
                }

                TextAlign hAlign = paragraph.getTextAlign();
                if (hAlign == TextAlign.JUSTIFY || hAlign == TextAlign.JUSTIFY_LOW) {
                    layout = layout.getJustifiedLayout((float) wrappingWidth);
                }
            }

            AttributedString str = new AttributedString(itNoCR, startIndex, endIndex);
            DrawTextFragment line = fact.getTextFragment(layout, str);
            lines.add(line);

            if(endIndex == it.getEndIndex()) {
                break;
            }
        }

        rawText = text.toString();
    }

