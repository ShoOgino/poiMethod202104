   public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {
      if (args.length < 3) { //First 3 parameters are mandatory
         return ErrorEval.VALUE_INVALID;
      }

      double periods, payment, present_val, future_val = 0, type = 0, estimate = 0.1, rate;

      try {
         ValueEval v1 = OperandResolver.getSingleValue(args[0], srcRowIndex, srcColumnIndex);
         ValueEval v2 = OperandResolver.getSingleValue(args[1], srcRowIndex, srcColumnIndex);
         ValueEval v3 = OperandResolver.getSingleValue(args[2], srcRowIndex, srcColumnIndex);
         ValueEval v4 = null;
         if (args.length >= 4)
            v4 = OperandResolver.getSingleValue(args[3], srcRowIndex, srcColumnIndex);
         ValueEval v5 = null;
         if (args.length >= 5)
            v5 = OperandResolver.getSingleValue(args[4], srcRowIndex, srcColumnIndex);
         ValueEval v6 = null;
         if (args.length >= 6)
            v6 = OperandResolver.getSingleValue(args[5], srcRowIndex, srcColumnIndex);

         periods = OperandResolver.coerceValueToDouble(v1); 
         payment = OperandResolver.coerceValueToDouble(v2);
         present_val = OperandResolver.coerceValueToDouble(v3);
         if (args.length >= 4)
            future_val = OperandResolver.coerceValueToDouble(v4);
         if (args.length >= 5)
            type = OperandResolver.coerceValueToDouble(v5);
         if (args.length >= 6)
            estimate = OperandResolver.coerceValueToDouble(v6);
         rate = calculateRate(periods, payment, present_val, future_val, type, estimate) ;

         checkValue(rate);
      } catch (EvaluationException e) {
          LOG.atError().withThrowable(e).log("Can't evaluate rate function");
         return e.getErrorEval();
      }

      return new NumberEval( rate ) ;
   }

