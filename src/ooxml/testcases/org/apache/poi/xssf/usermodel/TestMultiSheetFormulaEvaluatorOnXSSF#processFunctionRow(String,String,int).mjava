    @ParameterizedTest
	@MethodSource("data")
    public void processFunctionRow(String targetTestName, String targetFunctionName, int formulasRowIdx) {
        Row r = sheet.getRow(formulasRowIdx);

        Cell expValue = r.getCell(SS.COLUMN_INDEX_EXPECTED_VALUE);
        assertNotNull(expValue,
			"Missing expected values cell for function '"
            + targetFunctionName + ", test" + targetTestName + " (row " +
            formulasRowIdx + 1 + ")");

        Cell c = r.getCell(SS.COLUMN_INDEX_ACTUAL_VALUE);
        assumeTrue(c != null);
        assumeTrue(c.getCellType() == CellType.FORMULA);

        CellValue actValue = evaluator.evaluate(c);

        String msg = String.format(Locale.ROOT, "Function '%s': Test: '%s': Formula: %s @ %d:%d",
            targetFunctionName, targetTestName, c.getCellFormula(), formulasRowIdx, SS.COLUMN_INDEX_ACTUAL_VALUE);

        assertNotNull(actValue, msg + " - actual value was null");

        final CellType expectedCellType = expValue.getCellType();
        switch (expectedCellType) {
            case BLANK:
                assertEquals(CellType.BLANK, actValue.getCellType(), msg);
                break;
            case BOOLEAN:
                assertEquals(CellType.BOOLEAN, actValue.getCellType(), msg);
                assertEquals(expValue.getBooleanCellValue(), actValue.getBooleanValue(), msg);
                break;
            case ERROR:
                assertEquals(CellType.ERROR, actValue.getCellType(), msg);
//              if(false) { // TODO: fix ~45 functions which are currently returning incorrect error values
//                  assertEquals(msg, expected.getErrorCellValue(), actual.getErrorValue());
//              }
                break;
            case FORMULA: // will never be used, since we will call method after formula evaluation
                fail("Cannot expect formula as result of formula evaluation: " + msg);
            case NUMERIC:
                assertEquals(CellType.NUMERIC, actValue.getCellType(), msg);
				BaseTestNumeric.assertDouble(msg, expValue.getNumericCellValue(), actValue.getNumberValue(), BaseTestNumeric.POS_ZERO, BaseTestNumeric.DIFF_TOLERANCE_FACTOR);
//              double delta = Math.abs(expected.getNumericCellValue()-actual.getNumberValue());
//              double pctExpected = Math.abs(0.00001*expected.getNumericCellValue());
//              assertTrue(msg, delta <= pctExpected);
                break;
            case STRING:
                assertEquals(CellType.STRING, actValue.getCellType(), msg);
                assertEquals(expValue.getRichStringCellValue().getString(), actValue.getStringValue(), msg);
                break;
            default:
                fail("Unexpected cell type: " + expectedCellType);
        }
    }

