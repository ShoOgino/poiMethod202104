    /**
     * Verify that the cell addresses are consistent
     */
    private void testCellAddresses(String procName,int nRowsToShift,int nColsToShift) {
        final int nNumRows = nRowsToShift+ numCols;
        final int nNumCols = nColsToShift+ numCols;
        for(int nRow = 0;nRow<nNumRows;++nRow) {
            final XSSFRow row = sheet.getRow(nRow);
            if(row == null) {
                System.out.println(String.format(Locale.US, "%s: Row %d is empty", procName,nRow));
                continue;
            }
            for(int nCol = 0;nCol<nNumCols;++nCol) {
                final String address = new CellAddress(nRow,nCol).formatAsString();
                final XSSFCell cell = row.getCell(nCol);
                if(cell == null) {
                    System.out.println(String.format(Locale.US, "%s: Cell %s is empty", procName,address));
                    continue;
                }
                final CTCell ctCell = cell.getCTCell();
                final Object cellAddress = cell.getAddress().formatAsString();
                final Object r = ctCell.getR();

                if(nCol == 0 || nRow == 0) {
                    System.out.println(String.format(Locale.US, "%s: Row %d col %d address=%s cell.address=%s cell.getR=%s", procName, nRow,
                            nCol, address, cellAddress, ctCell.getR()));
                }
                assertEquals(String.format(Locale.US, "%s: Testing cell.getAddress",procName),address,cellAddress);
                assertEquals(String.format(Locale.US, "%s: Testing ctCell.getR",procName),address,r);
            }
        }

    }

