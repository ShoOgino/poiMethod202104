    @Test
    public void testCreateColumn() throws IOException {
        try (XSSFWorkbook wb = new XSSFWorkbook()) {
            XSSFSheet sh = wb.createSheet();

            AreaReference tableArea = new AreaReference("A2:A3", wb.getSpreadsheetVersion());
            XSSFTable table = sh.createTable(tableArea);

            assertEquals(1, table.getColumnCount());
            assertEquals(2, table.getRowCount());

            // add columns
            XSSFTableColumn c1 = table.getColumns().get(0);
            XSSFTableColumn cB = table.createColumn("Column B");
            XSSFTableColumn cD = table.createColumn("Column D");
            XSSFTableColumn cC = table.createColumn("Column C", 2); // add between B and D
            table.updateReferences();
            table.updateHeaders();

            assertEquals(4, table.getColumnCount());
            assertEquals(2, table.getRowCount());

            // column IDs start at 1, and increase in the order columns are added (see bug #62740)
            assertEquals(1, c1.getId(), "Column c ID");
            assertTrue  (c1.getId() < cB.getId(), "Column B ID");
            assertTrue  (cB.getId() < cD.getId(), "Column D ID");
            assertTrue  (cD.getId() < cC.getId(), "Column C ID");
            // generated name
            assertEquals(table.getColumns().get(0).getName(), "Column 1");
            assertEquals(table.getColumns().get(1).getName(), "Column B");
            assertEquals(table.getColumns().get(2).getName(), "Column C");
            assertEquals(table.getColumns().get(3).getName(), "Column D");
        }
    }

