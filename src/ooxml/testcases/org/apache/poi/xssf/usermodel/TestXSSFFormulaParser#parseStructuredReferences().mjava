    @Test
    void parseStructuredReferences() throws IOException {
        XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook("StructuredReferences.xlsx");

        XSSFEvaluationWorkbook fpb = XSSFEvaluationWorkbook.create(wb);
        Ptg[] ptgs;

        /*
        The following cases are tested (copied from FormulaParser.parseStructuredReference)
           1 Table1[col]
           2 Table1[[#Totals],[col]]
           3 Table1[#Totals]
           4 Table1[#All]
           5 Table1[#Data]
           6 Table1[#Headers]
           7 Table1[#Totals]
           8 Table1[#This Row]
           9 Table1[[#All],[col]]
          10 Table1[[#Headers],[col]]
          11 Table1[[#Totals],[col]]
          12 Table1[[#All],[col1]:[col2]]
          13 Table1[[#Data],[col1]:[col2]]
          14 Table1[[#Headers],[col1]:[col2]]
          15 Table1[[#Totals],[col1]:[col2]]
          16 Table1[[#Headers],[#Data],[col2]]
          17 Table1[[#This Row], [col1]]
          18 Table1[ [col1]:[col2] ]
        */

        final String tbl = "\\_Prime.1";
        final String noTotalsRowReason = ": Tables without a Totals row should return #REF! on [#Totals]";

        ////// Case 1: Evaluate Table1[col] with apostrophe-escaped #-signs ////////
        ptgs = parse(fpb, "SUM("+tbl+"[calc='#*'#])");
        assertEquals(2, ptgs.length);

        // Area3DPxg [sheet=Table ! A2:A7]
        assertTrue(ptgs[0] instanceof Area3DPxg);
        Area3DPxg ptg0 = (Area3DPxg) ptgs[0];
        assertEquals("Table", ptg0.getSheetName());
        assertEquals("A2:A7", ptg0.format2DRefAsString());
        // Note: structured references are evaluated and resolved to regular 3D area references.
        assertEquals("Table!A2:A7", ptg0.toFormulaString());

        // AttrPtg [sum ]
        assertTrue(ptgs[1] instanceof AttrPtg);
        AttrPtg ptg1 = (AttrPtg) ptgs[1];
        assertTrue(ptg1.isSum());

        ////// Case 1: Evaluate "Table1[col]" ////////
        ptgs = parse(fpb, tbl+"[Name]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!B2:B7", ptgs[0].toFormulaString(), "Table1[col]");

        ////// Case 2: Evaluate "Table1[[#Totals],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#Totals],[col]]");
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.REF_INVALID, ptgs[0], "Table1[[#Totals],[col]]" + noTotalsRowReason);

        ////// Case 3: Evaluate "Table1[#Totals]" ////////
        ptgs = parse(fpb, tbl+"[#Totals]");
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.REF_INVALID, ptgs[0], "Table1[#Totals]" + noTotalsRowReason);

        ////// Case 4: Evaluate "Table1[#All]" ////////
        ptgs = parse(fpb, tbl+"[#All]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!A1:C7", ptgs[0].toFormulaString(), "Table1[#All]");

        ////// Case 5: Evaluate "Table1[#Data]" (excludes Header and Data rows) ////////
        ptgs = parse(fpb, tbl+"[#Data]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!A2:C7", ptgs[0].toFormulaString(), "Table1[#Data]");

        ////// Case 6: Evaluate "Table1[#Headers]" ////////
        ptgs = parse(fpb, tbl+"[#Headers]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!A1:C1", ptgs[0].toFormulaString(), "Table1[#Headers]");

        ////// Case 7: Evaluate "Table1[#Totals]" ////////
        ptgs = parse(fpb, tbl+"[#Totals]");
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.REF_INVALID, ptgs[0], "Table1[#Totals]" + noTotalsRowReason);

        ////// Case 8: Evaluate "Table1[#This Row]" ////////
        ptgs = parse(fpb, tbl+"[#This Row]", 2);
        assertEquals(1, ptgs.length);
        assertEquals("Table!A3:C3", ptgs[0].toFormulaString(), "Table1[#This Row]");

        ////// Evaluate "Table1[@]" (equivalent to "Table1[#This Row]") ////////
        ptgs = parse(fpb, tbl+"[@]", 2);
        assertEquals(1, ptgs.length);
        assertEquals("Table!A3:C3", ptgs[0].toFormulaString());

        ////// Evaluate "Table1[#This Row]" when rowIndex is outside Table ////////
        ptgs = parse(fpb, tbl+"[#This Row]", 10);
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.VALUE_INVALID, ptgs[0], "Table1[#This Row]");

        ////// Evaluate "Table1[@]" when rowIndex is outside Table ////////
        ptgs = parse(fpb, tbl+"[@]", 10);
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.VALUE_INVALID, ptgs[0], "Table1[@]");

        ////// Evaluate "Table1[[#Data],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#Data], [Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!C2:C7", ptgs[0].toFormulaString(), "Table1[[#Data],[col]]");


        ////// Case 9: Evaluate "Table1[[#All],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#All], [Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!C1:C7", ptgs[0].toFormulaString(), "Table1[[#All],[col]]");

        ////// Case 10: Evaluate "Table1[[#Headers],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#Headers], [Number]]");
        assertEquals(1, ptgs.length);
        // also acceptable: Table1!B1
        assertEquals("Table!C1:C1", ptgs[0].toFormulaString(), "Table1[[#Headers],[col]]");

        ////// Case 11: Evaluate "Table1[[#Totals],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#Totals],[Name]]");
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.REF_INVALID, ptgs[0], "Table1[[#Totals],[col]]" + noTotalsRowReason);

        ////// Case 12: Evaluate "Table1[[#All],[col1]:[col2]]" ////////
        ptgs = parse(fpb, tbl+"[[#All], [Name]:[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!B1:C7", ptgs[0].toFormulaString(), "Table1[[#All],[col1]:[col2]]");

        ////// Case 13: Evaluate "Table1[[#Data],[col]:[col2]]" ////////
        ptgs = parse(fpb, tbl+"[[#Data], [Name]:[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!B2:C7", ptgs[0].toFormulaString(), "Table1[[#Data],[col]:[col2]]");

        ////// Case 14: Evaluate "Table1[[#Headers],[col1]:[col2]]" ////////
        ptgs = parse(fpb, tbl+"[[#Headers], [Name]:[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!B1:C1", ptgs[0].toFormulaString(), "Table1[[#Headers],[col1]:[col2]]");

        ////// Case 15: Evaluate "Table1[[#Totals],[col]:[col2]]" ////////
        ptgs = parse(fpb, tbl+"[[#Totals], [Name]:[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals(ErrPtg.REF_INVALID, ptgs[0], "Table1[[#Totals],[col]:[col2]]" + noTotalsRowReason);

        ////// Case 16: Evaluate "Table1[[#Headers],[#Data],[col]]" ////////
        ptgs = parse(fpb, tbl+"[[#Headers],[#Data],[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!C1:C7", ptgs[0].toFormulaString(), "Table1[[#Headers],[#Data],[col]]");

        ////// Case 17: Evaluate "Table1[[#This Row], [col1]]" ////////
        ptgs = parse(fpb, tbl+"[[#This Row], [Number]]", 2);
        assertEquals(1, ptgs.length);
        // also acceptable: Table!C3
        assertEquals("Table!C3:C3", ptgs[0].toFormulaString(), "Table1[[#This Row], [col1]]");

        ////// Case 18: Evaluate "Table1[[col]:[col2]]" ////////
        ptgs = parse(fpb, tbl+"[[Name]:[Number]]");
        assertEquals(1, ptgs.length);
        assertEquals("Table!B2:C7", ptgs[0].toFormulaString(), "Table1[[col]:[col2]]");

        wb.close();
    }

