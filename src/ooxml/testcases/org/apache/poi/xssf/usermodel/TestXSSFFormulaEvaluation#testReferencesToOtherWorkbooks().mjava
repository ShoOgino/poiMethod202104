    /**
     * Related to bugs #56737 and #56752 - XSSF workbooks which have
     *  formulas that refer to cells and named ranges in multiple other
     *  workbooks, both HSSF and XSSF ones
     */
    @Test
    public void testReferencesToOtherWorkbooks() throws Exception {
        try (Workbook wb = _testDataProvider.openSampleWorkbook("ref2-56737.xlsx")) {
            FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();
            Sheet s = wb.getSheetAt(0);

            // References to a .xlsx file
            Row rXSLX = s.getRow(2);
            Cell cXSLX_cell = rXSLX.getCell(4);
            Cell cXSLX_sNR = rXSLX.getCell(6);
            Cell cXSLX_gNR = rXSLX.getCell(8);
            assertEquals("[1]Uses!$A$1", cXSLX_cell.getCellFormula());
            assertEquals("[1]Defines!NR_To_A1", cXSLX_sNR.getCellFormula());
            assertEquals("[1]!NR_Global_B2", cXSLX_gNR.getCellFormula());

            assertEquals("Hello!", cXSLX_cell.getStringCellValue());
            assertEquals("Test A1", cXSLX_sNR.getStringCellValue());
            assertEquals(142.0, cXSLX_gNR.getNumericCellValue(), 0);

            // References to a .xls file
            Row rXSL = s.getRow(4);
            Cell cXSL_cell = rXSL.getCell(4);
            Cell cXSL_sNR = rXSL.getCell(6);
            Cell cXSL_gNR = rXSL.getCell(8);
            assertEquals("[2]Uses!$C$1", cXSL_cell.getCellFormula());
            assertEquals("[2]Defines!NR_To_A1", cXSL_sNR.getCellFormula());
            assertEquals("[2]!NR_Global_B2", cXSL_gNR.getCellFormula());

            assertEquals("Hello!", cXSL_cell.getStringCellValue());
            assertEquals("Test A1", cXSL_sNR.getStringCellValue());
            assertEquals(142.0, cXSL_gNR.getNumericCellValue(), 0);

            // Try to evaluate without references, won't work
            // (At least, not unit we fix bug #56752 that is)
            assertThrows(Exception.class, () -> evaluator.evaluate(cXSL_cell),
                "Without a fix for #56752, shouldn't be able to evaluate a reference to a non-provided linked workbook");

            // Setup the environment
            Map<String, FormulaEvaluator> evaluators = new HashMap<>();
            evaluators.put("ref2-56737.xlsx", evaluator);
            try (Workbook wbEval1 = _testDataProvider.openSampleWorkbook("56737.xlsx");
                 Workbook wbEval2 = HSSFTestDataSamples.openSampleWorkbook("56737.xls")) {
                evaluators.put("56737.xlsx", wbEval1.getCreationHelper().createFormulaEvaluator());
                evaluators.put("56737.xls", wbEval2.getCreationHelper().createFormulaEvaluator());
                evaluator.setupReferencedWorkbooks(evaluators);

                // Try evaluating all of them, ensure we don't blow up
                for (Row r : s) {
                    for (Cell c : r) {
                        evaluator.evaluate(c);
                    }
                }
                // And evaluate the other way too
                evaluator.evaluateAll();

                // Static evaluator won't work, as no references passed in
                assertThrows(Exception.class, () -> XSSFFormulaEvaluator.evaluateAllFormulaCells(wb),
                    "Static method lacks references, shouldn't work");

                // Evaluate specific cells and check results
                assertEquals("\"Hello!\"", evaluator.evaluate(cXSLX_cell).formatAsString());
                assertEquals("\"Test A1\"", evaluator.evaluate(cXSLX_sNR).formatAsString());
                assertEquals("142.0", evaluator.evaluate(cXSLX_gNR).formatAsString());

                assertEquals("\"Hello!\"", evaluator.evaluate(cXSL_cell).formatAsString());
                assertEquals("\"Test A1\"", evaluator.evaluate(cXSL_sNR).formatAsString());
                assertEquals("142.0", evaluator.evaluate(cXSL_gNR).formatAsString());


                // Add another formula referencing these workbooks
                Cell cXSL_cell2 = rXSL.createCell(40);
                cXSL_cell2.setCellFormula("[56737.xls]Uses!$C$1");
                // TODO Shouldn't it become [2] like the others?
                assertEquals("[56737.xls]Uses!$C$1", cXSL_cell2.getCellFormula());
                assertEquals("\"Hello!\"", evaluator.evaluate(cXSL_cell2).formatAsString());


                // Now add a formula that refers to yet another (different) workbook
                // Won't work without the workbook being linked
                Cell cXSLX_nw_cell = rXSLX.createCell(42);
                assertThrows(Exception.class, () -> cXSLX_nw_cell.setCellFormula("[alt.xlsx]Sheet1!$A$1"),
                    "New workbook not linked, shouldn't be able to add");
            }

            // Link and re-try
            try (Workbook alt = new XSSFWorkbook()) {
                alt.createSheet().createRow(0).createCell(0).setCellValue("In another workbook");
                // TODO Implement the rest of this, see bug #57184
/*
            wb.linkExternalWorkbook("alt.xlsx", alt);

            cXSLX_nw_cell.setCellFormula("[alt.xlsx]Sheet1!$A$1");
            // Check it - TODO Is this correct? Or should it become [3]Sheet1!$A$1 ?
            assertEquals("[alt.xlsx]Sheet1!$A$1", cXSLX_nw_cell.getCellFormula());

            // Evaluate it, without a link to that workbook
            assertThrows(Exception.class, () -> evaluator.evaluate(cXSLX_nw_cell),
                "No cached value and no link to workbook, shouldn't evaluate");

            // Add a link, check it does
            evaluators.put("alt.xlsx", alt.getCreationHelper().createFormulaEvaluator());
            evaluator.setupReferencedWorkbooks(evaluators);

            evaluator.evaluate(cXSLX_nw_cell);
            assertEquals("In another workbook", cXSLX_nw_cell.getStringCellValue());
*/
            }
        }
    }

