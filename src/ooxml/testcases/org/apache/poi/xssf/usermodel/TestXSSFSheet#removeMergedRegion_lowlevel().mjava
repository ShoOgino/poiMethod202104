    @Test
    public void removeMergedRegion_lowlevel() throws IOException {
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet();
        CTWorksheet ctWorksheet = sheet.getCTWorksheet();
        CellRangeAddress region_1 = CellRangeAddress.valueOf("A1:B2");
        CellRangeAddress region_2 = CellRangeAddress.valueOf("C3:D4");
        CellRangeAddress region_3 = CellRangeAddress.valueOf("E5:F6");
        CellRangeAddress region_4 = CellRangeAddress.valueOf("G7:H8");
        assertEquals(0, sheet.addMergedRegion(region_1));
        assertEquals(1, sheet.addMergedRegion(region_2));
        assertEquals(2, sheet.addMergedRegion(region_3));
        assertEquals("C3:D4", ctWorksheet.getMergeCells().getMergeCellArray(1).getRef());
        assertEquals(3, sheet.getNumMergedRegions());
        sheet.removeMergedRegion(1);
        assertEquals("E5:F6", ctWorksheet.getMergeCells().getMergeCellArray(1).getRef());
        assertEquals(2, sheet.getNumMergedRegions());
        sheet.removeMergedRegion(1);
        sheet.removeMergedRegion(0);
        assertEquals(0, sheet.getNumMergedRegions());
        assertNull(sheet.getCTWorksheet().getMergeCells(),
            "CTMergeCells should be deleted after removing the last merged region on the sheet.");
        assertEquals(0, sheet.addMergedRegion(region_1));
        assertEquals(1, sheet.addMergedRegion(region_2));
        assertEquals(2, sheet.addMergedRegion(region_3));
        assertEquals(3, sheet.addMergedRegion(region_4));
        // test invalid indexes OOBE
        Set<Integer> rmIdx = new HashSet<>(Arrays.asList(5, 6));
        sheet.removeMergedRegions(rmIdx);
        rmIdx = new HashSet<>(Arrays.asList(1, 3));
        sheet.removeMergedRegions(rmIdx);
        assertEquals("A1:B2", ctWorksheet.getMergeCells().getMergeCellArray(0).getRef());
        assertEquals("E5:F6", ctWorksheet.getMergeCells().getMergeCellArray(1).getRef());
        workbook.close();
    }

