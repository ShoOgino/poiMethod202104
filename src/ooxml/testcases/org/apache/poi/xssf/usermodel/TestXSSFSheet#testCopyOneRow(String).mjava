    private void testCopyOneRow(String copyRowsTestWorkbook) throws IOException {
        final double FLOAT_PRECISION = 1e-9;
        final XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(copyRowsTestWorkbook);
        final XSSFSheet sheet = wb.getSheetAt(0);
        final CellCopyPolicy defaultCopyPolicy = new CellCopyPolicy();
        sheet.copyRows(1, 1, 6, defaultCopyPolicy);

        final Row srcRow = sheet.getRow(1);
        final Row destRow = sheet.getRow(6);
        int col = 0;
        Cell cell;

        cell = CellUtil.getCell(destRow, col++);
        assertEquals("Source row ->", cell.getStringCellValue());

        // Style
        cell = CellUtil.getCell(destRow, col++);
        assertEquals("Red", cell.getStringCellValue(), "[Style] B7 cell value");
        assertEquals(CellUtil.getCell(srcRow, 1).getCellStyle(), cell.getCellStyle(), "[Style] B7 cell style");

        // Blank
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.BLANK, cell.getCellType(), "[Blank] C7 cell type");

        // Error
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.ERROR, cell.getCellType(), "[Error] D7 cell type");
        final FormulaError error = FormulaError.forInt(cell.getErrorCellValue());
        //FIXME: XSSFCell and HSSFCell expose different interfaces. getErrorCellString would be helpful here
        assertEquals(FormulaError.NA, error, "[Error] D7 cell value");

        // Date
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Date] E7 cell type");
        final Date date = LocaleUtil.getLocaleCalendar(2000, Calendar.JANUARY, 1).getTime();
        assertEquals(date, cell.getDateCellValue(), "[Date] E7 cell value");

        // Boolean
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.BOOLEAN, cell.getCellType(), "[Boolean] F7 cell type");
        assertTrue(cell.getBooleanCellValue(), "[Boolean] F7 cell value");

        // String
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.STRING, cell.getCellType(), "[String] G7 cell type");
        assertEquals("Hello", cell.getStringCellValue(), "[String] G7 cell value");

        // Int
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Int] H7 cell type");
        assertEquals(15, (int) cell.getNumericCellValue(), "[Int] H7 cell value");

        // Float
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Float] I7 cell type");
        assertEquals(12.5, cell.getNumericCellValue(), FLOAT_PRECISION, "[Float] I7 cell value");

        // Cell Formula
        cell = CellUtil.getCell(destRow, col++);
        assertEquals("Sheet1!J7", new CellReference(cell).formatAsString());
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula] J7 cell type");
        assertEquals("5+2", cell.getCellFormula(), "[Cell Formula] J7 cell formula");
        //System.out.println("Cell formula evaluation currently unsupported");

        // Cell Formula with Reference
        // Formula row references should be adjusted by destRowNum-srcRowNum
        cell = CellUtil.getCell(destRow, col++);
        assertEquals("Sheet1!K7", new CellReference(cell).formatAsString());
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference] K7 cell type");
        assertEquals("J7+H$2", cell.getCellFormula(), "[Cell Formula with Reference] K7 cell formula");

        // Cell Formula with Reference spanning multiple rows
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference spanning multiple rows] L7 cell type");
        assertEquals("G7&\" \"&G8", cell.getCellFormula(), "[Cell Formula with Reference spanning multiple rows] L7 cell formula");

        // Cell Formula with Reference spanning multiple rows
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Area Reference] M7 cell type");
        assertEquals("SUM(H7:I8)", cell.getCellFormula(), "[Cell Formula with Area Reference] M7 cell formula");

        // Array Formula
        cell = CellUtil.getCell(destRow, col++);
        //System.out.println("Array formulas currently unsupported");
        // FIXME: Array Formula set with Sheet.setArrayFormula() instead of cell.setFormula()
        /*
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Array Formula] N7 cell type");
        assertEquals("{SUM(H7:J7*{1,2,3})}", cell.getCellFormula(), "[Array Formula] N7 cell formula");
        */

        // Data Format
        cell = CellUtil.getCell(destRow, col++);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Data Format] O7 cell type");
        assertEquals(100.20, cell.getNumericCellValue(), FLOAT_PRECISION, "[Data Format] O7 cell value");
        //FIXME: currently fails
        final String moneyFormat = "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)";
        assertEquals(moneyFormat, cell.getCellStyle().getDataFormatString(), "[Data Format] O7 data format");

        // Merged
        cell = CellUtil.getCell(destRow, col);
        assertEquals("Merged cells", cell.getStringCellValue(), "[Merged] P7:Q7 cell value");
        assertTrue(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("P7:Q7")), "[Merged] P7:Q7 merged region");

        // Merged across multiple rows
        // Microsoft Excel 2013 does not copy a merged region unless all rows of
        // the source merged region are selected
        // POI's behavior should match this behavior
        col += 2;
        cell = CellUtil.getCell(destRow, col);
        // Note: this behavior deviates from Microsoft Excel,
        // which will not overwrite a cell in destination row if merged region extends beyond the copied row.
        // The Excel way would require:
        //assertEquals("[Merged across multiple rows] R7:S8 merged region", "Should NOT be overwritten", cell.getStringCellValue());
        //assertFalse("[Merged across multiple rows] R7:S8 merged region",
        //        sheet.getMergedRegions().contains(CellRangeAddress.valueOf("R7:S8")));
        // As currently implemented, cell value is copied but merged region is not copied
        assertEquals("Merged cells across multiple rows", cell.getStringCellValue(), "[Merged across multiple rows] R7:S8 cell value");
        // shouldn't do 1-row merge
        assertFalse(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("R7:S7")), "[Merged across multiple rows] R7:S7 merged region (one row)");
        //shouldn't do 2-row merge
        assertFalse(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("R7:S8")), "[Merged across multiple rows] R7:S8 merged region");

        // Make sure other rows are blank (off-by-one errors)
        assertNull(sheet.getRow(5));
        assertNull(sheet.getRow(7));

        wb.close();
    }

