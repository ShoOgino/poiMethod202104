    private void testCopyMultipleRows(String copyRowsTestWorkbook) throws IOException {
        final double FLOAT_PRECISION = 1e-9;
        final XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(copyRowsTestWorkbook);
        final XSSFSheet sheet = wb.getSheetAt(0);
        final CellCopyPolicy defaultCopyPolicy = new CellCopyPolicy();
        sheet.copyRows(0, 3, 8, defaultCopyPolicy);

        sheet.getRow(0);
        final Row srcRow1 = sheet.getRow(1);
        final Row srcRow2 = sheet.getRow(2);
        final Row srcRow3 = sheet.getRow(3);
        final Row destHeaderRow = sheet.getRow(8);
        final Row destRow1 = sheet.getRow(9);
        final Row destRow2 = sheet.getRow(10);
        final Row destRow3 = sheet.getRow(11);
        int col = 0;
        Cell cell;

        // Header row should be copied
        assertNotNull(destHeaderRow);

        // Data rows
        cell = CellUtil.getCell(destRow1, col);
        assertEquals("Source row ->", cell.getStringCellValue());

        // Style
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals("Red", cell.getStringCellValue(), "[Style] B10 cell value");
        assertEquals(CellUtil.getCell(srcRow1, 1).getCellStyle(), cell.getCellStyle(), "[Style] B10 cell style");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals("Blue", cell.getStringCellValue(), "[Style] B11 cell value");
        assertEquals(CellUtil.getCell(srcRow2, 1).getCellStyle(), cell.getCellStyle(), "[Style] B11 cell style");

        // Blank
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.BLANK, cell.getCellType(), "[Blank] C10 cell type");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.BLANK, cell.getCellType(), "[Blank] C11 cell type");

        // Error
        col++;
        cell = CellUtil.getCell(destRow1, col);
        FormulaError error = FormulaError.forInt(cell.getErrorCellValue());
        //FIXME: XSSFCell and HSSFCell expose different interfaces. getErrorCellString would be helpful here
        assertEquals(CellType.ERROR, cell.getCellType(), "[Error] D10 cell type");
        assertEquals(FormulaError.NA, error, "[Error] D10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        error = FormulaError.forInt(cell.getErrorCellValue());
        //FIXME: XSSFCell and HSSFCell expose different interfaces. getErrorCellString would be helpful here
        assertEquals(CellType.ERROR, cell.getCellType(), "[Error] D11 cell type");
        assertEquals(FormulaError.NAME, error, "[Error] D11 cell value");

        // Date
        col++;
        cell = CellUtil.getCell(destRow1, col);
        Date date = LocaleUtil.getLocaleCalendar(2000, Calendar.JANUARY, 1).getTime();
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Date] E10 cell type");
        assertEquals(date, cell.getDateCellValue(), "[Date] E10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        date = LocaleUtil.getLocaleCalendar(2000, Calendar.JANUARY, 2).getTime();
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Date] E11 cell type");
        assertEquals(date, cell.getDateCellValue(), "[Date] E11 cell value");

        // Boolean
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.BOOLEAN, cell.getCellType(), "[Boolean] F10 cell type");
        assertTrue(cell.getBooleanCellValue(), "[Boolean] F10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.BOOLEAN, cell.getCellType(), "[Boolean] F11 cell type");
        assertFalse(cell.getBooleanCellValue(), "[Boolean] F11 cell value");

        // String
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.STRING, cell.getCellType(), "[String] G10 cell type");
        assertEquals("Hello", cell.getStringCellValue(), "[String] G10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.STRING, cell.getCellType(), "[String] G11 cell type");
        assertEquals("World", cell.getStringCellValue(), "[String] G11 cell value");

        // Int
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Int] H10 cell type");
        assertEquals(15, (int) cell.getNumericCellValue(), "[Int] H10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Int] H11 cell type");
        assertEquals(42, (int) cell.getNumericCellValue(), "[Int] H11 cell value");

        // Float
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Float] I10 cell type");
        assertEquals(12.5, cell.getNumericCellValue(), FLOAT_PRECISION, "[Float] I10 cell value");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Float] I11 cell type");
        assertEquals(5.5, cell.getNumericCellValue(), FLOAT_PRECISION, "[Float] I11 cell value");

        // Cell Formula
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula] J10 cell type");
        assertEquals("5+2", cell.getCellFormula(), "[Cell Formula] J10 cell formula");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula] J11 cell type");
        assertEquals("6+18", cell.getCellFormula(), "[Cell Formula] J11 cell formula");

        // Cell Formula with Reference
        col++;
        // Formula row references should be adjusted by destRowNum-srcRowNum
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference] K10 cell type");
        assertEquals("J10+H$2", cell.getCellFormula(), "[Cell Formula with Reference] K10 cell formula");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference] K11 cell type");
        assertEquals("J11+H$2", cell.getCellFormula(), "[Cell Formula with Reference] K11 cell formula");

        // Cell Formula with Reference spanning multiple rows
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference spanning multiple rows] L10 cell type");
        assertEquals("G10&\" \"&G11", cell.getCellFormula(), "[Cell Formula with Reference spanning multiple rows] L10 cell formula");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Reference spanning multiple rows] L11 cell type");
        assertEquals("G11&\" \"&G12", cell.getCellFormula(), "[Cell Formula with Reference spanning multiple rows] L11 cell formula");

        // Cell Formula with Area Reference
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Area Reference] M10 cell type");
        assertEquals("SUM(H10:I11)", cell.getCellFormula(), "[Cell Formula with Area Reference] M10 cell formula");

        cell = CellUtil.getCell(destRow2, col);
        // Also acceptable: SUM($H10:I$3), but this AreaReference isn't in ascending order
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Cell Formula with Area Reference] M11 cell type");
        assertEquals("SUM($H$3:I10)", cell.getCellFormula(), "[Cell Formula with Area Reference] M11 cell formula");

        // Array Formula
        col++;
        cell = CellUtil.getCell(destRow1, col);
        // System.out.println("Array formulas currently unsupported");
    /*
        // FIXME: Array Formula set with Sheet.setArrayFormula() instead of cell.setFormula()
        assertEquals(CellType.FORMULA, cell.getCellType(), "[Array Formula] N10 cell type");
        assertEquals("{SUM(H10:J10*{1,2,3})}", cell.getCellFormula(), "[Array Formula] N10 cell formula");

        cell = CellUtil.getCell(destRow2, col);
        // FIXME: Array Formula set with Sheet.setArrayFormula() instead of cell.setFormula()
        assertEquals(CellType.FORMULA, cell.getCellType(). "[Array Formula] N11 cell type");
        assertEquals("{SUM(H11:J11*{1,2,3})}", cell.getCellFormula(). "[Array Formula] N11 cell formula");
     */

        // Data Format
        col++;
        cell = CellUtil.getCell(destRow2, col);
        assertEquals(CellType.NUMERIC, cell.getCellType(), "[Data Format] O10 cell type");
        assertEquals(100.20, cell.getNumericCellValue(), FLOAT_PRECISION, "[Data Format] O10 cell value");
        final String moneyFormat = "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)";
        assertEquals(moneyFormat, cell.getCellStyle().getDataFormatString(), "[Data Format] O10 cell data format");

        // Merged
        col++;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals("Merged cells", cell.getStringCellValue(), "[Merged] P10:Q10 cell value");
        assertTrue(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("P10:Q10")), "[Merged] P10:Q10 merged region");

        cell = CellUtil.getCell(destRow2, col);
        assertEquals("Merged cells", cell.getStringCellValue(), "[Merged] P11:Q11 cell value");
        assertTrue(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("P11:Q11")), "[Merged] P11:Q11 merged region");

        // Should Q10/Q11 be checked?

        // Merged across multiple rows
        // Microsoft Excel 2013 does not copy a merged region unless all rows of
        // the source merged region are selected
        // POI's behavior should match this behavior
        col += 2;
        cell = CellUtil.getCell(destRow1, col);
        assertEquals("Merged cells across multiple rows", cell.getStringCellValue(), "[Merged across multiple rows] R10:S11 cell value");
        assertTrue(sheet.getMergedRegions().contains(CellRangeAddress.valueOf("R10:S11")), "[Merged across multiple rows] R10:S11 merged region");

        // Row 3 (zero-based) was empty, so Row 11 (zero-based) should be empty too.
        if (srcRow3 == null) {
            assertNull(destRow3, "Row 3 was empty, so Row 11 should be empty");
        }

        // Make sure other rows are blank (off-by-one errors)
        assertNull(sheet.getRow(7), "Off-by-one lower edge case"); //one row above destHeaderRow
        assertNull(sheet.getRow(12), "Off-by-one upper edge case"); //one row below destRow3

        wb.close();
    }

