    /**
     * Ensure that, for a file with themes, we can correctly
     *  read both the themed and non-themed colours back.
     * Column A = Theme Foreground
     * Column B = Theme Foreground
     * Column C = Explicit Colour Foreground
     * Column E = Explicit Colour Background, Black Foreground
     * Column G = Conditional Formatting Backgrounds
     *
     * Note - Grey Row has an odd way of doing the styling...
     */
    @Test
    public void themedAndNonThemedColours() throws IOException {
        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(testFileComplex)) {
            XSSFSheet sheet = wb.getSheetAt(0);

            String[] names = {"White", "Black", "Grey", "Dark Blue", "Blue", "Red", "Green"};
            String[] explicitFHexes = {"FFFFFFFF", "FF000000", "FFC0C0C0", "FF002060",
                    "FF0070C0", "FFFF0000", "FF00B050"};
            String[] explicitBHexes = {"FFFFFFFF", "FF000000", "FFC0C0C0", "FF002060",
                    "FF0000FF", "FFFF0000", "FF00FF00"};
            assertEquals(7, names.length);

            // Check the non-CF colours in Columns A, B, C and E
            for (int rn = 1; rn < 8; rn++) {
                int idx = rn - 1;
                XSSFRow row = sheet.getRow(rn);
                assertNotNull("Missing row " + rn, row);

                // Theme cells come first
                XSSFCell themeCell = row.getCell(0);
                ThemeElement themeElem = ThemeElement.byId(idx);
                assertCellContents(themeElem.name, themeCell);

                // Sanity check names
                assertCellContents(names[idx], row.getCell(1));
                assertCellContents(names[idx], row.getCell(2));
                assertCellContents(names[idx], row.getCell(4));


                // Check the colours

                //  A: Theme Based, Foreground
                XSSFCellStyle style = themeCell.getCellStyle();
                XSSFColor color = style.getFont().getXSSFColor();
                assertTrue(color.isThemed());
                assertEquals(idx, color.getTheme());
                assertEquals(rgbExpected[idx], Hex.encodeHexString(color.getRGB()));

                //  B: Theme Based, Foreground
                XSSFCell cell = row.getCell(1);
                style = cell.getCellStyle();
                color = style.getFont().getXSSFColor();
                assertTrue(color.isThemed());
                if (idx != 2) {
                    assertEquals(idx, color.getTheme());
                    assertEquals(rgbExpected[idx], Hex.encodeHexString(color.getRGB()));
                } else {
                    assertEquals(1, color.getTheme());
                    assertEquals(0.50, color.getTint(), 0.001);
                }

                //  C: Explicit, Foreground
                cell = row.getCell(2);
                style = cell.getCellStyle();
                color = style.getFont().getXSSFColor();
                assertFalse(color.isThemed());
                assertEquals(explicitFHexes[idx], color.getARGBHex());

                // E: Explicit Background, Foreground all Black
                cell = row.getCell(4);
                style = cell.getCellStyle();

                color = style.getFont().getXSSFColor();
                assertTrue(color.isThemed());
                assertEquals("FF000000", color.getARGBHex());

                color = style.getFillForegroundXSSFColor();
                assertFalse(color.isThemed());
                assertEquals(explicitBHexes[idx], color.getARGBHex());
                color = style.getFillBackgroundColorColor();
                assertFalse(color.isThemed());
                assertNull(color.getARGBHex());
            }
        }

        // Check the CF colours
        // TODO
    }

