    @Test
    void testExportToXMLInverseOrder() throws Exception {
        try (XSSFWorkbook wb = XSSFTestDataSamples
                .openSampleWorkbook("CustomXmlMappings-inverse-order.xlsx")) {

            boolean found = false;
            for (POIXMLDocumentPart p : wb.getRelations()) {

                if (!(p instanceof MapInfo)) {
                    continue;
                }
                MapInfo mapInfo = (MapInfo) p;

                XSSFMap map = mapInfo.getXSSFMapById(1);
                XSSFExportToXml exporter = new XSSFExportToXml(map);
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                exporter.exportToXML(os, true);
                String xml = os.toString("UTF-8");

                assertNotNull(xml);
                assertFalse(xml.isEmpty());

                String docente = xml.split("<DOCENTE>")[1].split("</DOCENTE>")[0].trim();
                String nome = xml.split("<NOME>")[1].split("</NOME>")[0].trim();
                String tutor = xml.split("<TUTOR>")[1].split("</TUTOR>")[0].trim();
                String cdl = xml.split("<CDL>")[1].split("</CDL>")[0].trim();
                String durata = xml.split("<DURATA>")[1].split("</DURATA>")[0].trim();
                String argomento = xml.split("<ARGOMENTO>")[1].split("</ARGOMENTO>")[0].trim();
                String progetto = xml.split("<PROGETTO>")[1].split("</PROGETTO>")[0].trim();
                String crediti = xml.split("<CREDITI>")[1].split("</CREDITI>")[0].trim();

                assertEquals("aa", nome);
                assertEquals("aaaa", docente);
                assertEquals("gvvv", tutor);
                assertEquals("g", cdl);
                assertEquals("gs", durata);
                assertEquals("ds", argomento);
                assertEquals("ro", progetto);
                assertEquals("ro", crediti);

                parseXML(xml);

                found = true;
            }
            assertTrue(found);
        }
    }

