    @Test
    void workbookAndRevisionPassword() throws Exception {
        String password = "test";

        // validate password with an actual office file (Excel 2010)
        try (XSSFWorkbook workbook = openSampleWorkbook("workbookProtection-workbook_password_user_range-2010.xlsx")) {
            assertTrue(workbook.validateWorkbookPassword(password));
        }

        // validate with another office file (Excel 2013)
        try (XSSFWorkbook workbook = openSampleWorkbook("workbookProtection-workbook_password-2013.xlsx")){
            assertTrue(workbook.validateWorkbookPassword(password));
        }


        try (XSSFWorkbook workbook = openSampleWorkbook("workbookProtection_not_protected.xlsx")) {
            // setting a null password shouldn't introduce the protection element
            workbook.setWorkbookPassword(null, null);
            assertNull(workbook.getCTWorkbook().getWorkbookProtection());

            // compare the hashes
            workbook.setWorkbookPassword(password, null);
            int hashVal = CryptoFunctions.createXorVerifier1(password);
            int actualVal = Integer.parseInt(workbook.getCTWorkbook().getWorkbookProtection().xgetWorkbookPassword().getStringValue(), 16);
            assertEquals(hashVal, actualVal);
            assertTrue(workbook.validateWorkbookPassword(password));

            // removing the password again
            workbook.setWorkbookPassword(null, null);
            assertFalse(workbook.getCTWorkbook().getWorkbookProtection().isSetWorkbookPassword());

            // removing the whole protection structure
            workbook.unLock();
            assertNull(workbook.getCTWorkbook().getWorkbookProtection());

            // setting a null password shouldn't introduce the protection element
            workbook.setRevisionsPassword(null, null);
            assertNull(workbook.getCTWorkbook().getWorkbookProtection());

            // compare the hashes
            password = "T\u0400ST\u0100passwordWhichIsLongerThan15Chars";
            workbook.setRevisionsPassword(password, null);
            hashVal = CryptoFunctions.createXorVerifier1(password);
            actualVal = Integer.parseInt(workbook.getCTWorkbook().getWorkbookProtection().xgetRevisionsPassword().getStringValue(), 16);
            assertEquals(hashVal, actualVal);
            assertTrue(workbook.validateRevisionsPassword(password));
        }
    }

