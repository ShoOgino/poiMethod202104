    /**
     * When working with >9 images, make sure the sorting ensures
     * that image10.foo isn't between image1.foo and image2.foo
     */
    @Test
    public void test57552() throws Exception {
        XMLSlideShow ss = new XMLSlideShow();
        for (String s : new String[]{"Slide1", "Slide2"}) {
            ss.createSlide().createTextBox().setText(s);
        }

        // Slide starts with just layout relation
        XSLFSlide slide = ss.getSlides().get(0);
        assertEquals(0, ss.getPictureData().size());
        assertEquals(1, slide.getShapes().size());

        assertEquals(1, slide.getRelations().size());

        final XSLFRelation expected = XSLFRelation.SLIDE_LAYOUT;
        final POIXMLDocumentPart relation = slide.getRelations().get(0);

        assertEquals(expected.getContentType(), relation.getPackagePart().getContentType());
        assertEquals(expected.getFileName(expected.getFileNameIndex(relation)), relation.getPackagePart().getPartName().getName());

        // Some dummy pictures
        byte[][] pics = new byte[15][3];
        for (int i = 0; i < pics.length; i++) {
            Arrays.fill(pics[i], (byte) i);
        }

        // Add a few pictures
        addPictures(ss, slide, pics, 0, 10);

        // Re-fetch the pictures and check
        for (int i = 0; i < 10; i++) {
            XSLFPictureShape shape = (XSLFPictureShape) slide.getShapes().get(i + 1);
            assertNotNull(shape.getPictureData());
            assertArrayEquals(pics[i], shape.getPictureData().getData());
        }

        // Add past 10
        addPictures(ss, slide, pics, 10, 15);

        // Check all pictures
        for (int i = 0; i < 15; i++) {
            XSLFPictureShape shape = (XSLFPictureShape) slide.getShapes().get(i + 1);
            assertNotNull(shape.getPictureData());
            assertArrayEquals(pics[i], shape.getPictureData().getData());
        }

        // Add a duplicate, check the right one is picked
        XSLFPictureData data = ss.addPicture(pics[3], PictureType.JPEG);
        assertEquals(3, data.getIndex());
        assertEquals(15, ss.getPictureData().size());

        XSLFPictureShape shape = slide.createPicture(data);
        assertNotNull(shape.getPictureData());
        assertArrayEquals(pics[3], shape.getPictureData().getData());
        assertEquals(17, slide.getShapes().size());


        // Save and re-load
        XMLSlideShow ss2 = XSLFTestDataSamples.writeOutAndReadBack(ss);
        slide = ss2.getSlides().get(0);

        // Check the 15 individual ones added
        for (int i = 0; i < 15; i++) {
            shape = (XSLFPictureShape) slide.getShapes().get(i + 1);
            assertNotNull(shape.getPictureData());
            assertArrayEquals(pics[i], shape.getPictureData().getData());
        }

        // Check the duplicate
        shape = (XSLFPictureShape) slide.getShapes().get(16);
        assertNotNull(shape.getPictureData());
        assertArrayEquals(pics[3], shape.getPictureData().getData());

        // Add another duplicate
        data = ss2.addPicture(pics[5], PictureType.JPEG);
        assertEquals(5, data.getIndex());
        assertEquals(15, ss2.getPictureData().size());

        shape = slide.createPicture(data);
        assertNotNull(shape.getPictureData());
        assertArrayEquals(pics[5], shape.getPictureData().getData());
        assertEquals(18, slide.getShapes().size());

        ss2.close();
        ss.close();
    }

