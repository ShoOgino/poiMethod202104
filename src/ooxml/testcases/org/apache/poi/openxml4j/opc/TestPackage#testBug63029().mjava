	@SuppressWarnings("UnstableApiUsage")
	@Test
	public void testBug63029() throws Exception {
		File testFile = getSampleFile("sample.docx");
		File tmpFile = getOutputFile("Bug63029.docx");
		Files.copy(testFile, tmpFile);

		int numPartsBefore = 0;
		String md5Before = Files.asByteSource(tmpFile).hash(Hashing.sha256()).toString();

		try(OPCPackage pkg = OPCPackage.open(tmpFile, PackageAccess.READ_WRITE))
		{
			numPartsBefore = pkg.getParts().size();

			// add a marshaller that will throw an exception on save
			pkg.addMarshaller("poi/junit", (part, out) -> {
				throw new RuntimeException("Bugzilla 63029");
			});

			pkg.createPart(createPartName("/poi/test.xml"), "poi/junit");

			RuntimeException ex = assertThrows(RuntimeException.class, pkg::close);
			// verify there was an exception while closing the file
			assertEquals("Fail to save: an error occurs while saving the package : Bugzilla 63029", ex.getMessage());
		}

		// assert that md5 after closing is the same, i.e. the source is left intact
		String md5After = Files.asByteSource(tmpFile).hash(Hashing.sha256()).toString();
		assertEquals(md5Before, md5After);

		// try to read the source file once again
		try ( OPCPackage pkg = OPCPackage.open(tmpFile, PackageAccess.READ_WRITE)){
			// the source is still a valid zip archive.
			// prior to the fix this used to throw NotOfficeXmlFileException("archive is not a ZIP archive")

			// assert that the number of parts remained the same
			assertEquals(pkg.getParts().size(), numPartsBefore);
		}

	}

