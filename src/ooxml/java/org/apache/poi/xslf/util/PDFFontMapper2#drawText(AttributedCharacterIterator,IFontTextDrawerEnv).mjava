    @Override
    public void drawText(AttributedCharacterIterator iterator, IFontTextDrawerEnv env)
            throws IOException, FontFormatException
    {
        PDPageContentStream contentStream = env.getContentStream();

        contentStream.beginText();

        Matrix textMatrix = new Matrix();
        textMatrix.scale(1, -1);
        contentStream.setTextMatrix(textMatrix);

        StringBuilder sb = new StringBuilder();
        boolean run = true;
        while (run)
        {

            Font attributeFont = (Font) iterator.getAttribute(TextAttribute.FONT);
            if (attributeFont == null)
                attributeFont = env.getFont();

            Number fontSize = ((Number) iterator.getAttribute(TextAttribute.SIZE));
            if (fontSize != null)
                attributeFont = attributeFont.deriveFont(fontSize.floatValue());
            PDFont font = applyFont(attributeFont, env);

            Paint paint = (Paint) iterator.getAttribute(TextAttribute.FOREGROUND);
            if (paint == null)
                paint = env.getPaint();

            boolean isStrikeThrough = TextAttribute.STRIKETHROUGH_ON
                    .equals(iterator.getAttribute(TextAttribute.STRIKETHROUGH));
            boolean isUnderline = TextAttribute.UNDERLINE_ON
                    .equals(iterator.getAttribute(TextAttribute.UNDERLINE));
            boolean isLigatures = TextAttribute.LIGATURES_ON
                    .equals(iterator.getAttribute(TextAttribute.LIGATURES));

            run = iterateRun(iterator, sb);
            String text = sb.toString();

            /*
             * Apply the paint
             */
            env.applyPaint(paint, null);

            /*
             * If we force the text write we may encounter situations where the font can not
             * display the characters. PDFBox will throw an exception in this case. We will
             * just silently ignore the text and not display it instead.
             */
            try
            {
                showTextOnStream(env, contentStream, attributeFont, font, isStrikeThrough,
                                 isUnderline, isLigatures, text);
            }
            catch (IllegalArgumentException e)
            {
                if (font instanceof PDType1Font && !font.isEmbedded())
                {
                    /*
                     * We tried to use a builtin default font, but it does not have the needed
                     * characters. So we use a embedded font as fallback.
                     */
                    try
                    {
                        if (fallbackFontUnknownEncodings == null)
                            fallbackFontUnknownEncodings = findFallbackFont(env);
                        if (fallbackFontUnknownEncodings != null)
                        {
                            env.getContentStream().setFont(fallbackFontUnknownEncodings,
                                                           attributeFont.getSize2D());
                            showTextOnStream(env, contentStream, attributeFont,
                                             fallbackFontUnknownEncodings, isStrikeThrough, isUnderline,
                                             isLigatures, text);
                            e = null;
                        }
                    }
                    catch (IllegalArgumentException e1)
                    {
                        e = e1;
                    }
                }

                if (e != null)
                    System.err.println("PDFBoxGraphics: Can not map text " + text + " with font "
                                               + attributeFont.getFontName() + ": " + e.getMessage());
            }
        }
        contentStream.endText();
    }

