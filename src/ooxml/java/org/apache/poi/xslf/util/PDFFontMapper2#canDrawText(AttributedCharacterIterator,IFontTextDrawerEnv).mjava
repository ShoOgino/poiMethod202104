    @Override
    public boolean canDrawText(AttributedCharacterIterator iterator, IFontTextDrawerEnv env)
            throws IOException, FontFormatException
    {
        /*
         * When no font is registered we can not display the text using a font...
         */
        if (fontMap.size() == 0 && fontFiles.size() == 0 && !hasDynamicFontMapping())
            return false;

        boolean run = true;
        StringBuilder sb = new StringBuilder();
        while (run)
        {

            Font attributeFont = (Font) iterator.getAttribute(TextAttribute.FONT);
            if (attributeFont == null)
                attributeFont = env.getFont();
            if (mapFont(attributeFont, env) == null)
                return false;

            /*
             * We can not do a Background on the text currently.
             */
            if (iterator.getAttribute(TextAttribute.BACKGROUND) != null)
                return false;

            boolean isStrikeThrough = TextAttribute.STRIKETHROUGH_ON
                    .equals(iterator.getAttribute(TextAttribute.STRIKETHROUGH));
            boolean isUnderline = TextAttribute.UNDERLINE_ON
                    .equals(iterator.getAttribute(TextAttribute.UNDERLINE));
            boolean isLigatures = TextAttribute.LIGATURES_ON
                    .equals(iterator.getAttribute(TextAttribute.LIGATURES));
            if (isStrikeThrough || isUnderline || isLigatures)
                return false;

            run = iterateRun(iterator, sb);
            String s = sb.toString();
            int l = s.length();
            for (int i = 0; i < l; )
            {
                int codePoint = s.codePointAt(i);
                switch (Character.getDirectionality(codePoint))
                {
                    /*
                     * We can handle normal LTR.
                     */
                    case Character.DIRECTIONALITY_LEFT_TO_RIGHT:
                    case Character.DIRECTIONALITY_EUROPEAN_NUMBER:
                    case Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR:
                    case Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR:
                    case Character.DIRECTIONALITY_WHITESPACE:
                    case Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR:
                    case Character.DIRECTIONALITY_NONSPACING_MARK:
                    case Character.DIRECTIONALITY_BOUNDARY_NEUTRAL:
                    case Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR:
                    case Character.DIRECTIONALITY_SEGMENT_SEPARATOR:
                    case Character.DIRECTIONALITY_OTHER_NEUTRALS:
                    case Character.DIRECTIONALITY_ARABIC_NUMBER:
                        break;
                    case Character.DIRECTIONALITY_RIGHT_TO_LEFT:
                    case Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC:
                    case Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING:
                    case Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE:
                    case Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT:
                        /*
                         * We can not handle this
                         */
                        return false;
                    default:
                        /*
                         * Default: We can not handle this
                         */
                        return false;
                }

                if (!attributeFont.canDisplay(codePoint))
                    return false;

                i += Character.charCount(codePoint);
            }
        }
        return true;
    }

