    /**
     * Calculate the preferred size for this picture.
     *
     * @param scale the amount by which image dimensions are multiplied relative to the original size.
     * @return XSSFClientAnchor with the preferred size for this image
     */
    public XSSFClientAnchor getPreferredSize(double scale){
        XSSFClientAnchor anchor = getClientAnchor();
        if (anchor == null) {
            LOG.log(POILogger.WARN, "picture is not anchored via client anchor - ignoring resize call");
            return null;
        }

        XSSFPictureData data = getPictureData();
        Dimension size = getImageDimension(data.getPackagePart(), data.getPictureType());
        double scaledWidth = size.getWidth() * scale;
        double scaledHeight = size.getHeight() * scale;

        float w = 0;
        int col2 = anchor.getCol1()-1;

        while (w <= scaledWidth) {
            w += getColumnWidthInPixels(++col2);
        }

        assert (w > scaledWidth);
        double cw = getColumnWidthInPixels(col2);
        double deltaW = w - scaledWidth;
        int dx2 = (int)(Units.EMU_PER_PIXEL * (cw - deltaW));

        anchor.setCol2(col2);
        anchor.setDx2(dx2);

        double h = 0;
        int row2 = anchor.getRow1()-1;

        while (h <= scaledHeight) {
            h += getRowHeightInPixels(++row2);
        }

        assert (h > scaledHeight);
        double ch = getRowHeightInPixels(row2);
        double deltaH = h - scaledHeight;
        int dy2 = (int)(Units.EMU_PER_PIXEL * (ch - deltaH));
        anchor.setRow2(row2);
        anchor.setDy2(dy2);

        CTPositiveSize2D size2d =  getCTPicture().getSpPr().getXfrm().getExt();
        size2d.setCx((long)(scaledWidth * Units.EMU_PER_PIXEL));
        size2d.setCy((long)(scaledHeight * Units.EMU_PER_PIXEL));

        return anchor;
    }

