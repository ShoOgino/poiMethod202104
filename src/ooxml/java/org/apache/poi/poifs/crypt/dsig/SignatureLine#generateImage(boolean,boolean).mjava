    /**
     * Generate the image for a signature line
     * @param showSignature show signature image - use {@code false} for placeholder images in to-be-signed documents
     * @param showInvalidStamp print invalid stamp over the signature
     * @return the signature image in PNG format as byte array
     */
    protected byte[] generateImage(boolean showSignature, boolean showInvalidStamp) throws IOException {
        BufferedImage bi = new BufferedImage(400, 150, BufferedImage.TYPE_INT_ARGB);
        Graphics2D gfx = bi.createGraphics();
        gfx.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
        gfx.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
        gfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        gfx.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        String markX = "X\n";
        String lineX = (new String(new char[500]).replace("\0", " ")) +"\n";
        String cap = (getCaption() == null) ? getDefaultCaption() : getCaption();
        String text = markX+lineX+cap.replaceAll("(?m)^", "    ");

        AttributedString as = new AttributedString(text);
        as.addAttribute(TextAttribute.FAMILY, Font.SANS_SERIF);
        as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON, markX.length(), text.indexOf('\n', markX.length()));

        as.addAttribute(TextAttribute.SIZE, 15, 0, markX.length());
        as.addAttribute(TextAttribute.SIZE, 12, markX.length(), text.length());

        gfx.setColor(Color.BLACK);

        AttributedCharacterIterator chIter = as.getIterator();
        FontRenderContext frc = gfx.getFontRenderContext();
        LineBreakMeasurer measurer = new LineBreakMeasurer(chIter, frc);
        float y = 80, x = 5;
        for (int lineNr = 0; measurer.getPosition() < chIter.getEndIndex(); lineNr++) {
            int mpos = measurer.getPosition();
            int limit = text.indexOf('\n', mpos);
            limit = (limit == -1) ? text.length() : limit+1;
            TextLayout textLayout = measurer.nextLayout(bi.getWidth()-10, limit, false);
            if (lineNr != 1) {
                y += textLayout.getAscent();
            }
            textLayout.draw(gfx, x, y);
            y += textLayout.getDescent() + textLayout.getLeading();
        }

        if (showSignature && plainSignature != null && contentType != null) {

            ImageRenderer renderer = DrawPictureShape.getImageRenderer(gfx, contentType);

            renderer.loadImage(plainSignature, contentType);

            double targetX = 10;
            double targetY = 100;
            double targetWidth = bi.getWidth() - targetX;
            double targetHeight = targetY - 5;
            Dimension2D dim = renderer.getDimension();
            double scale = Math.min(targetWidth / dim.getWidth(), targetHeight / dim.getHeight());
            double effWidth = dim.getWidth() * scale;
            double effHeight = dim.getHeight() * scale;

            renderer.drawImage(gfx, new Rectangle2D.Double(targetX + ((bi.getWidth() - effWidth) / 2), targetY - effHeight, effWidth, effHeight));
        }

        if (showInvalidStamp && invalidStamp != null && !invalidStamp.isEmpty()) {
            gfx.setFont(new Font("Lucida Bright", Font.ITALIC, 60));
            gfx.rotate(Math.toRadians(-15), bi.getWidth()/2., bi.getHeight()/2.);
            TextLayout tl = new TextLayout(invalidStamp, gfx.getFont(), gfx.getFontRenderContext());
            Rectangle2D bounds = tl.getBounds();
            x = (float)((bi.getWidth()-bounds.getWidth())/2 - bounds.getX());
            y = (float)((bi.getHeight()-bounds.getHeight())/2 - bounds.getY());
            Shape outline = tl.getOutline(AffineTransform.getTranslateInstance(x+2, y+1));
            gfx.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f));
            gfx.setPaint(Color.RED);
            gfx.draw(outline);
            gfx.setPaint(new GradientPaint(0, 0, Color.RED, 30, 20, new Color(128, 128, 255), true));
            tl.draw(gfx, x, y);
        }

        gfx.dispose();

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ImageIO.write(bi, "PNG", bos);
        return bos.toByteArray();
    }

