    /**
     * Write XML signature into the OPC package
     *
     * @param document the xml signature document
     * @throws MarshalException if the document can't be serialized
     */
    protected void writeDocument(Document document) throws MarshalException {
        XmlOptions xo = new XmlOptions();
        Map<String,String> namespaceMap = new HashMap<>();
        signatureConfig.getNamespacePrefixes().forEach((k,v) -> namespaceMap.put(v,k));
        xo.setSaveSuggestedPrefixes(namespaceMap);
        xo.setUseDefaultNamespace();

        LOG.atDebug().log("output signed Office OpenXML document");

        /*
         * Copy the original OOXML content to the signed OOXML package. During
         * copying some files need to changed.
         */
        try {
            // <Default Extension="sigs" ContentType="application/vnd.openxmlformats-package.digital-signature-origin"/>
            final DSigRelation originDesc = DSigRelation.ORIGIN_SIGS;
            PackagePartName originPartName = PackagingURIHelper.createPartName(originDesc.getFileName(0));

            PackagePart originPart = opcPackage.getPart(originPartName);
            if (originPart == null) {
                // touch empty marker file
                originPart = opcPackage.createPart(originPartName, originDesc.getContentType());
                opcPackage.addRelationship(originPartName, TargetMode.INTERNAL, originDesc.getRelation());
            }

            // <Override PartName="/_xmlsignatures/sig1.xml" ContentType="application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml"/>
            final DSigRelation sigDesc = DSigRelation.SIG;
            int nextSigIdx = opcPackage.getUnusedPartIndex(sigDesc.getDefaultFileName());

            if (!signatureConfig.isAllowMultipleSignatures()) {
                PackageRelationshipCollection prc = originPart.getRelationshipsByType(sigDesc.getRelation());
                for (int i=2; i<nextSigIdx; i++) {
                    PackagePartName pn = PackagingURIHelper.createPartName(sigDesc.getFileName(i));
                    for (PackageRelationship rel : prc) {
                        PackagePart pp = originPart.getRelatedPart(rel);
                        if (pp.getPartName().equals(pn)) {
                            originPart.removeRelationship(rel.getId());
                            prc.removeRelationship(rel.getId());
                            break;
                        }
                    }

                    opcPackage.removePart(opcPackage.getPart(pn));
                }
                nextSigIdx = 1;
            }


            PackagePartName sigPartName = PackagingURIHelper.createPartName(sigDesc.getFileName(nextSigIdx));
            PackagePart sigPart = opcPackage.getPart(sigPartName);
            if (sigPart == null) {
                sigPart = opcPackage.createPart(sigPartName, sigDesc.getContentType());
                originPart.addRelationship(sigPartName, TargetMode.INTERNAL, sigDesc.getRelation());
            } else {
                sigPart.clear();
            }

            try (OutputStream os = sigPart.getOutputStream()) {
                SignatureDocument sigDoc = SignatureDocument.Factory.parse(document, DEFAULT_XML_OPTIONS);
                sigDoc.save(os, xo);
            }

        } catch (Exception e) {
            throw new MarshalException("Unable to write signature document", e);
        }
    }

