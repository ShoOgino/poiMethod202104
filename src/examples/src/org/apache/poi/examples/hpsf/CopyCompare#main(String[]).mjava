    /**
     * Runs the example program. The application expects one or two arguments:
     *
     * <ol>
     * <li>The first argument is the disk file name of the POI filesystem to copy.</li>
     * <li>The second argument is optional. If it is given, it is the name of
     * a disk file the copy of the POI filesystem will be written to. If it is
     * not given, the copy will be written to a temporary file which will be
     * deleted at the end of the program.</li>
     * </ol>
     *
     * @param args Command-line arguments.
     * @throws IOException                  if any I/O exception occurs.
     * @throws UnsupportedEncodingException if a character encoding is not
     *                                      supported.
     */
    public static void main(final String[] args) throws IOException {
        String originalFileName = null;
        String copyFileName = null;

        // Check the command-line arguments.
        if (args.length == 1) {
            originalFileName = args[0];
            File f = TempFile.createTempFile("CopyOfPOIFileSystem-", ".ole2");
            f.deleteOnExit();
            copyFileName = f.getAbsolutePath();
        } else if (args.length == 2) {
            originalFileName = args[0];
            copyFileName = args[1];
        } else {
            System.err.println("Usage: CopyCompare originPOIFS [copyPOIFS]");
            System.exit(1);
        }


        // Read the origin POIFS using the eventing API.
        final POIFSReader r = new POIFSReader();
        try (final POIFSFileSystem poiFs = new POIFSFileSystem();
             OutputStream fos = new FileOutputStream(copyFileName)) {
            r.registerListener(e -> handleEvent(poiFs, e));
            r.setNotifyEmptyDirectories(true);

            r.read(new File(originalFileName));

            // Write the new POIFS to disk.
            poiFs.writeFilesystem(fos);
        }

        // Read all documents from the original POI file system and compare them with
        // the equivalent document from the copy.
        try (POIFSFileSystem opfs = new POIFSFileSystem(new File(originalFileName));
             POIFSFileSystem cpfs = new POIFSFileSystem(new File(copyFileName))) {
            final DirectoryEntry oRoot = opfs.getRoot();
            final DirectoryEntry cRoot = cpfs.getRoot();
            out.get().println(EntryUtils.areDirectoriesIdentical(oRoot, cRoot) ? "Equal" : "Not equal");
        }
    }

