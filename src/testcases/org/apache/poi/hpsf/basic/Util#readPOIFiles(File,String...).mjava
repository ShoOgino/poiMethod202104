    /**
     * <p>Reads a set of files from a POI filesystem and returns them
     * as an array of {@link POIFile} instances. This method loads all
     * files into memory and thus does not cope well with large POI
     * filessystems.</p>
     *
     * @param poiFs The name of the POI filesystem as seen by the
     * operating system. (This is the "filename".)
     *
     * @param poiFiles The names of the POI files to be read.
     *
     * @return The POI files. The elements are ordered in the same way
     * as the files in the POI filesystem.
     *
     * @exception FileNotFoundException if the file containing the POI
     * filesystem does not exist
     *
     * @exception IOException if an I/O exception occurs
     */
    static List<POIFile> readPOIFiles(final File poiFs, final String... poiFiles) throws IOException {
        final List<POIFile> files = new ArrayList<>();
        POIFSReader r = new POIFSReader();
        POIFSReaderListener pfl = event -> assertDoesNotThrow(() -> {
            final POIFile f = new POIFile();
            f.setName(event.getName());
            f.setPath(event.getPath());
            final InputStream in = event.getStream();
            f.setBytes(IOUtils.toByteArray(in));
            in.close();
            files.add(f);
        });
        if (poiFiles.length == 0) {
            /* Register the listener for all POI files. */
            r.registerListener(pfl);
        } else {
            for (String poiFile : poiFiles) {
                r.registerListener(pfl, poiFile);
            }
        }

        /* Read the POI filesystem. */
        r.read(poiFs);

        return files;
    }

