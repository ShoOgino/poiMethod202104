	/**
	 * Tests conversion in custom fields and errors
	 */
    @Test
	public void testConvAndExistence() throws Exception {

		CustomProperties customProperties = dsi.getCustomProperties();
		if (customProperties == null) {
			customProperties = new CustomProperties();
		}

		/* Insert some custom properties into the container. */
		customProperties.put("int", 12345);
		customProperties.put("negint", -12345);
		customProperties.put("long", 12345L);
		customProperties.put("neglong", -12345L);
		customProperties.put("boolean", true);
		customProperties.put("string", "a String");
		// customProperties.put("float", new Float(12345.0)); is not valid
		// customProperties.put("negfloat", new Float(-12345.1)); is not valid
		customProperties.put("double", 12345.2);
		customProperties.put("negdouble", -12345.3);
		// customProperties.put("char", new Character('a')); is not valid

		Date date = new Date();
		customProperties.put("date", date);

		dsi.setCustomProperties(customProperties);

		closeAndReOpen();

		assertNotNull(dsi);
		assertNotNull(si);
		/*
		 * Change the category to "POI example". Any former category value will
		 * be lost. If there has been no category yet, it will be created.
		 */
		assertNull(dsi.getCategory());
		assertNull(dsi.getCompany());
		assertNull(dsi.getManager());

		assertNull(si.getAuthor());
		assertNull(si.getTitle());
		assertNull(si.getComments());
		assertNull(si.getKeywords());
		assertNull(si.getSubject());

		/*
		 * Read the custom properties. If there are no custom properties yet,
		 * the application has to create a new CustomProperties object. It will
		 * serve as a container for custom properties.
		 */
		customProperties = dsi.getCustomProperties();
		assertNotNull(customProperties);

		/* Insert some custom properties into the container. */

		Integer a3 = (Integer) customProperties.get("int");
		assertEquals(12345, (int)a3, "int");

		a3 = (Integer) customProperties.get("negint");
		assertEquals(-12345, (int)a3, "negint");

		Long al = (Long) customProperties.get("neglong");
		assertEquals(-12345L, (long)al, "neglong");

		al = (Long) customProperties.get("long");
		assertEquals(12345L, (long)al, "long");

		Boolean a4 = (Boolean) customProperties.get("boolean");
		assertTrue(a4, "boolean");

		Date a5 = (Date) customProperties.get("date");
		assertEquals(date, a5, "Custom Date:");

		Double d = (Double) customProperties.get("double");
		assertEquals(12345.2, d, 0, "int");

		d = (Double) customProperties.get("negdouble");
		assertEquals(-12345.3, d, 0, "string");

		String s = (String) customProperties.get("string");
		assertEquals("a String", s, "string");


		assertTrue(customProperties.get("string") instanceof String);
		assertTrue(customProperties.get("boolean") instanceof Boolean);
		assertTrue(customProperties.get("int") instanceof Integer);
		assertTrue(customProperties.get("negint") instanceof Integer);
		assertTrue(customProperties.get("long") instanceof Long);
		assertTrue(customProperties.get("neglong") instanceof Long);
		assertTrue(customProperties.get("double") instanceof Double);
		assertTrue(customProperties.get("negdouble") instanceof Double);
		assertTrue(customProperties.get("date") instanceof Date);
	}

