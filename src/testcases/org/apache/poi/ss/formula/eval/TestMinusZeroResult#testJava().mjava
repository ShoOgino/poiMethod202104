	/**
	 * Not really a POI test - just shows similar behaviour of '-0.0' in Java.
	 */
	@Test
	void testJava() {
		assertEquals(0x8000000000000000L, Double.doubleToLongBits(MINUS_ZERO));

		// The simple operators consider all zeros to be the same
		//noinspection SimplifiableJUnitAssertion,ConstantConditions
		assertTrue(MINUS_ZERO == MINUS_ZERO);
		//noinspection SimplifiableJUnitAssertion,ConstantConditions
		assertTrue(MINUS_ZERO == +0.0);
		//noinspection ConstantConditions
		assertFalse(MINUS_ZERO < +0.0);

		// Double.compare() considers them different
		assertTrue(Double.compare(MINUS_ZERO, +0.0) < 0);

		// multiplying zero by any negative quantity yields minus zero
		assertDouble(MINUS_ZERO, 0.0*-1);
		assertDouble(MINUS_ZERO, 0.0*-1e300);
		assertDouble(MINUS_ZERO, 0.0*-1e-300);

		// minus zero can be produced as a result of underflow
		assertDouble(MINUS_ZERO, -1e-300 / 1e100);

		// multiplying or dividing minus zero by a positive quantity yields minus zero
		assertDouble(MINUS_ZERO, MINUS_ZERO * 1.0);
		assertDouble(MINUS_ZERO, MINUS_ZERO / 1.0);

		// subtracting positive zero gives minus zero
		assertDouble(MINUS_ZERO, MINUS_ZERO - 0.0);
		// BUT adding positive zero gives positive zero
		assertDouble(0.0, MINUS_ZERO + 0.0);  // <<----
	}

