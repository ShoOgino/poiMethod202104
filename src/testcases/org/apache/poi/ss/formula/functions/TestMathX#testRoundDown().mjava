    @Test
    public void testRoundDown() {
        double d;
        int p;

        d = 0; p = 0;
        assertDouble("roundDown ", 0, MathX.roundDown(d, p));

        d = 10; p = 0;
        assertDouble("roundDown ", 10, MathX.roundDown(d, p));

        d = 123.99; p = 0;
        assertDouble("roundDown ", 123, MathX.roundDown(d, p));

        d = -123.99; p = 0;
        assertDouble("roundDown ", -123, MathX.roundDown(d, p));

        d = 123.99; p = 2;
        assertDouble("roundDown ", 123.99, MathX.roundDown(d, p));

        d = 88.123459; p = 5;
        assertDouble("roundDown ", 88.12345, MathX.roundDown(d, p));

        d = 0; p = 2;
        assertDouble("roundDown ", 0, MathX.roundDown(d, p));

        d = 0; p = -1;
        assertDouble("roundDown ", 0, MathX.roundDown(d, p));

        d = 0.01; p = -1;
        assertDouble("roundDown ", 0, MathX.roundDown(d, p));

        d = 199.12; p = -2;
        assertDouble("roundDown ", 100, MathX.roundDown(d, p));

        d = 88.123459; p = -3;
        assertDouble("roundDown ", 0, MathX.roundDown(d, p));

        d = 99.00000001; p = -1;
        assertDouble("roundDown ", 90, MathX.roundDown(d, p));

        d = 100.00001; p = -2;
        assertDouble("roundDown ", 100, MathX.roundDown(d, p));

        d = 150.0; p = -2;
        assertDouble("roundDown ", 100, MathX.roundDown(d, p));

        d = 0.0499999999999975d; p = 2;
        assertDouble("roundDown ", 0.04d, MathX.roundDown(d, p));

        d = 0.049999999999999975d; p = 1;
        assertDouble("roundDown ", 0.0d, MathX.roundDown(d, p));

        d = Double.NaN; p = 1;
        assertDouble("roundDown ", Double.NaN, MathX.roundDown(d, p));

        d = Double.POSITIVE_INFINITY; p = 1;
        assertDouble("roundDown ", Double.NaN, MathX.roundDown(d, p));

        d = Double.NEGATIVE_INFINITY; p = 1;
        assertDouble("roundDown ", Double.NaN, MathX.roundDown(d, p));

        d = Double.MAX_VALUE; p = 1;
        assertDouble("roundDown ", Double.MAX_VALUE, MathX.roundDown(d, p));

        d = Double.MIN_VALUE; p = 1;
        assertDouble("roundDown ", 0.0d, MathX.roundDown(d, p));

        d = 3987 * 0.2; p = 2;
        assertDouble("roundDown ", 797.40, MathX.round(d, p));
    }

