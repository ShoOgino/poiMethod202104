	@Test
	public void testCriteriaPredicateNe_Bug46647() {
		I_MatchPredicate mp = Countif.createCriteriaPredicate(new StringEval("<>aa"), 0, 0);
		assertNotNull(mp);
		StringEval seA = new StringEval("aa"); // this should not match the criteria '<>aa'
		StringEval seB = new StringEval("bb"); // this should match
		assertFalse(mp.matches(seA) && !mp.matches(seB), "Identified bug 46647");
		assertFalse(mp.matches(seA));
		assertTrue(mp.matches(seB));

		// general tests for not-equal (<>) operator
		AreaEval range;
		ValueEval[] values;

		values = new ValueEval[] {
				new StringEval("aa"),
				new StringEval("def"),
				new StringEval("aa"),
				new StringEval("ghi"),
				new StringEval("aa"),
				new StringEval("aa"),
		};

		range = EvalFactory.createAreaEval("A1:A6", values);
		confirmCountIf(2, range, new StringEval("<>aa"));

		values = new ValueEval[] {
				new StringEval("ab"),
				new StringEval("aabb"),
				new StringEval("aa"), // match
				new StringEval("abb"),
				new StringEval("aab"),
				new StringEval("ba"), // match
		};

		range = EvalFactory.createAreaEval("A1:A6", values);
		confirmCountIf(2, range, new StringEval("<>a*b"));


		values = new ValueEval[] {
				new NumberEval(222),
				new NumberEval(222),
				new NumberEval(111),
				new StringEval("aa"),
				new StringEval("111"),
		};

		range = EvalFactory.createAreaEval("A1:A5", values);
		confirmCountIf(4, range, new StringEval("<>111"));
	}

