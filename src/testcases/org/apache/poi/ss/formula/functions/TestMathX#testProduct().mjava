    @Test
    void testProduct() {
        assertDouble("Product ", 0, MathX.product(null));
        assertDouble("Product ", 0, MathX.product(new double[] {}));
        assertDouble("Product ", 0, MathX.product(new double[] {1, 0}));

        assertDouble("Product ", 1, MathX.product(new double[] { 1 }));
        assertDouble("Product ", 1, MathX.product(new double[] { 1, 1 }));
        assertDouble("Product ", 10, MathX.product(new double[] { 10, 1 }));
        assertDouble("Product ", -2, MathX.product(new double[] { 2, -1 }));
        assertDouble("Product ", 99988000209999d, MathX.product(new double[] { 99999, 99999, 9999 }));

        double[] d = new double[100];
        d[0] = 1.1;     d[1] = 2.1;     d[2] = 3.1;     d[3] = 4.1;
        d[4] = 5.1;     d[5] = 6.1;     d[6] = 7.1;     d[7] = 8.1;
        d[8] = 9.1;     d[9] = 10.1;    d[10] = 11.1;   d[11] = 12.1;
        d[12] = 13.1;   d[13] = 14.1;   d[14] = 15.1;   d[15] = 16.1;
        d[16] = 17.1;   d[17] = 18.1;   d[18] = 19.1;   d[19] = 20.1;

        double m = MathX.product(d);
        assertDouble("Product ", 0, m);

        d = new double[20];
        d[0] = 1.1;     d[1] = 2.1;     d[2] = 3.1;     d[3] = 4.1;
        d[4] = 5.1;     d[5] = 6.1;     d[6] = 7.1;     d[7] = 8.1;
        d[8] = 9.1;     d[9] = 10.1;    d[10] = 11.1;   d[11] = 12.1;
        d[12] = 13.1;   d[13] = 14.1;   d[14] = 15.1;   d[15] = 16.1;
        d[16] = 17.1;   d[17] = 18.1;   d[18] = 19.1;   d[19] = 20.1;

        m = MathX.product(d);
        assertDouble("Product ", 3459946360003355534d, m);

        d = new double[1000];
        m = MathX.product(d);
        assertDouble("Product ", 0, m);

        d = new double[20];
        d[0] = -1.1;     d[1] = -2.1;     d[2] = -3.1;     d[3] = -4.1;
        d[4] = -5.1;     d[5] = -6.1;     d[6] = -7.1;     d[7] = -8.1;
        d[8] = -9.1;     d[9] = -10.1;    d[10] = -11.1;   d[11] = -12.1;
        d[12] = -13.1;   d[13] = -14.1;   d[14] = -15.1;   d[15] = -16.1;
        d[16] = -17.1;   d[17] = -18.1;   d[18] = -19.1;   d[19] = -20.1;
        m = MathX.product(d);
        assertDouble("Product ", 3459946360003355534d, m);
    }

