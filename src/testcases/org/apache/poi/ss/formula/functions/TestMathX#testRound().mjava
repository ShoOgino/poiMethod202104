    @Test
    public void testRound() {
        double d;
        int p;

        d = 0; p = 0;
        assertDouble("round ", 0, MathX.round(d, p));

        d = 10; p = 0;
        assertDouble("round ", 10, MathX.round(d, p));

        d = 123.23; p = 0;
        assertDouble("round ", 123, MathX.round(d, p));

        d = -123.23; p = 0;
        assertDouble("round ", -123, MathX.round(d, p));

        d = 123.12; p = 2;
        assertDouble("round ", 123.12, MathX.round(d, p));

        d = 88.123459; p = 5;
        assertDouble("round ", 88.12346, MathX.round(d, p));

        d = 0; p = 2;
        assertDouble("round ", 0, MathX.round(d, p));

        d = 0; p = -1;
        assertDouble("round ", 0, MathX.round(d, p));

        d = 0.01; p = -1;
        assertDouble("round ", 0, MathX.round(d, p));

        d = 123.12; p = -2;
        assertDouble("round ", 100, MathX.round(d, p));

        d = 88.123459; p = -3;
        assertDouble("round ", 0, MathX.round(d, p));

        d = 49.00000001; p = -1;
        assertDouble("round ", 50, MathX.round(d, p));

        d = 149.999999; p = -2;
        assertDouble("round ", 100, MathX.round(d, p));

        d = 150.0; p = -2;
        assertDouble("round ", 200, MathX.round(d, p));

        d = 2162.615d; p = 2;
        assertDouble("round ", 2162.62d, MathX.round(d, p));

        d = 0.049999999999999975d; p = 2;
        assertDouble("round ", 0.05d, MathX.round(d, p));

        d = 0.049999999999999975d; p = 1;
        assertDouble("round ", 0.1d, MathX.round(d, p));

        d = Double.NaN; p = 1;
        assertDouble("round ", Double.NaN, MathX.round(d, p));

        d = Double.POSITIVE_INFINITY; p = 1;
        assertDouble("round ", Double.NaN, MathX.round(d, p));

        d = Double.NEGATIVE_INFINITY; p = 1;
        assertDouble("round ", Double.NaN, MathX.round(d, p));

        d = Double.MAX_VALUE; p = 1;
        assertDouble("round ", Double.MAX_VALUE, MathX.round(d, p));

        d = Double.MIN_VALUE; p = 1;
        assertDouble("round ", 0.0d, MathX.round(d, p));
    }

