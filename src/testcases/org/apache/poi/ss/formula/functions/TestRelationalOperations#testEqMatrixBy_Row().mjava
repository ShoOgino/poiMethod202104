    @Test
    public void testEqMatrixBy_Row() {
        ValueEval[] matrix = {
                new NumberEval(-1), new NumberEval(1),
                new NumberEval(-1), new NumberEval(1)
        };


        ValueEval[] row = {
                new NumberEval(1), new NumberEval(1), new NumberEval(1)
        };

        ValueEval[] expected = {
                BoolEval.FALSE, BoolEval.TRUE, ErrorEval.VALUE_INVALID,
                BoolEval.FALSE, BoolEval.TRUE, ErrorEval.VALUE_INVALID
        };

        ValueEval arg1 = EvalFactory.createAreaEval("A1:B2", matrix);
        ValueEval arg2 = EvalFactory.createAreaEval("A4:C4", row);
        RelationalOperationEval eq = (RelationalOperationEval)RelationalOperationEval.EqualEval;
        ValueEval result = eq.evaluateArray(new ValueEval[]{ arg1, arg2}, 4, 5);

        assertEquals(CacheAreaEval.class, result.getClass(), "expected CacheAreaEval");
        CacheAreaEval ce = (CacheAreaEval)result;
        assertEquals(3, ce.getWidth());
        assertEquals(2, ce.getHeight());
        int idx = 0;
        for(int i =0; i < ce.getHeight(); i++){
            for(int j = 0; j < ce.getWidth(); j++){
                assertEquals(expected[idx++], ce.getRelativeValue(i, j), "[" + i + "," + j + "]");
            }
        }
    }

