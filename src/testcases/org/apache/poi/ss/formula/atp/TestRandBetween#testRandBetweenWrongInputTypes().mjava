	/**
	 * Check where input values are of wrong type
	 */
	@Test
	void testRandBetweenWrongInputTypes() {
		// Check case where bottom input is of the wrong type
		bottomValueCell.setCellValue("STRING");
		topValueCell.setCellValue(1);
		formulaCell.setCellFormula("RANDBETWEEN($A$1,$B$1)");
		evaluator.clearAllCachedResultValues();
		evaluator.evaluateFormulaCell(formulaCell);
		assertEquals(CellType.ERROR, formulaCell.getCachedFormulaResultType());
		assertEquals(ErrorEval.VALUE_INVALID.getErrorCode(), formulaCell.getErrorCellValue());


		// Check case where top input is of the wrong type
		bottomValueCell.setCellValue(1);
		topValueCell.setCellValue("STRING");
		formulaCell.setCellFormula("RANDBETWEEN($A$1,$B$1)");
		evaluator.clearAllCachedResultValues();
		evaluator.evaluateFormulaCell(formulaCell);
		assertEquals(CellType.ERROR, formulaCell.getCachedFormulaResultType());
		assertEquals(ErrorEval.VALUE_INVALID.getErrorCode(), formulaCell.getErrorCellValue());

		// Check case where both inputs are of wrong type
		bottomValueCell.setCellValue("STRING");
		topValueCell.setCellValue("STRING");
		formulaCell.setCellFormula("RANDBETWEEN($A$1,$B$1)");
		evaluator.clearAllCachedResultValues();
		evaluator.evaluateFormulaCell(formulaCell);
		assertEquals(CellType.ERROR, formulaCell.getCachedFormulaResultType());
		assertEquals(ErrorEval.VALUE_INVALID.getErrorCode(), formulaCell.getErrorCellValue());
	}

