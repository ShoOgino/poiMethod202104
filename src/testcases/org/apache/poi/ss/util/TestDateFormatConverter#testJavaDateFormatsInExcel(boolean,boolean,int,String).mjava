    @ParameterizedTest
    @CsvSource({
        "true, false, " + DateFormat.DEFAULT + ", Default",
        "true, false, " + DateFormat.SHORT + ", Short",
        "true, false, " + DateFormat.MEDIUM + ", Medium",
        "true, false, " + DateFormat.LONG + ", Long",
        "true, false, " + DateFormat.FULL + ", Full",
        "true, true, " + DateFormat.DEFAULT + ", Default",
        "true, true, " + DateFormat.SHORT + ", Short",
        "true, true, " + DateFormat.MEDIUM + ", Medium",
        "true, true, " + DateFormat.LONG + ", Long",
        "true, true, " + DateFormat.FULL + ", Full",
        "false, true, " + DateFormat.DEFAULT + ", Default",
        "false, true, " + DateFormat.SHORT + ", Short",
        "false, true, " + DateFormat.MEDIUM + ", Medium",
        "false, true, " + DateFormat.LONG + ", Long",
        "false, true, " + DateFormat.FULL + ", Full"
    })
    void testJavaDateFormatsInExcel(boolean dates, boolean times, int style, String styleName ) throws Exception {
        String sheetName = (dates) ? ((times) ? "DateTimes" : "Dates") : "Times";
        String[] headers = {
            "locale", "DisplayName", "Excel " + styleName, "java.text.DateFormat",
            "Equals", "Java pattern", "Excel pattern"
        };

        Locale[] locales = Arrays.stream(DateFormat.getAvailableLocales())
            // only use locale with known LocaleIDs
            .filter(l -> !getPrefixForLocale(l).isEmpty() || Locale.ROOT.equals(l) || l.toLanguageTag().isEmpty())
            .sorted(Comparator.comparing(Locale::toString))
            .toArray(Locale[]::new);


        try (Workbook workbook = new HSSFWorkbook()) {
            Sheet sheet = workbook.createSheet(sheetName);
            Row header = sheet.createRow(0);
            IntStream.range(0, headers.length).forEach(i -> header.createCell(i).setCellValue(headers[i]));

            int rowNum = 1;
            final Cell[] cell = new Cell[7];
            final Date date = new Date();

            for (Locale locale : locales) {
                DateFormat dateFormat = (dates)
                    ? (times ? getDateTimeInstance(style, style, locale) : getDateInstance(style, locale))
                    : getTimeInstance(style, locale);
                String javaDateFormatPattern = ((SimpleDateFormat) dateFormat).toPattern();
                String excelFormatPattern = DateFormatConverter.convert(locale, javaDateFormatPattern);

                Row row = sheet.createRow(rowNum++);
                IntStream.range(0, headers.length).forEach(i -> cell[i] = row.createCell(i));
                CellStyle cellStyle = workbook.createCellStyle();
                DataFormat poiFormat = workbook.createDataFormat();
                cellStyle.setDataFormat(poiFormat.getFormat(excelFormatPattern));

                cell[0].setCellValue(locale.toString());
                cell[1].setCellValue(locale.getDisplayName(Locale.ROOT));
                cell[2].setCellValue(date);
                cell[2].setCellStyle(cellStyle);
                cell[3].setCellValue(dateFormat.format(date));

                // the formula returns TRUE is the formatted date in column C equals to the string in column D
                cell[4].setCellFormula("TEXT(C" + rowNum + ",G" + rowNum + ")=D" + rowNum);
                cell[5].setCellValue(javaDateFormatPattern);
                cell[6].setCellValue(excelFormatPattern);
            }

            assertDoesNotThrow(() -> workbook.write(new NullOutputStream()));
        }
    }

