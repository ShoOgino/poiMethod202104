    @Test
    void drawBorders() throws IOException {
        CellRangeAddress a1c3 = new CellRangeAddress(0, 2, 0, 2);
        PropertyTemplate pt = new PropertyTemplate();
        pt.drawBorders(a1c3, BorderStyle.THIN,
                BorderExtent.ALL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(4, pt.getNumBorders(i, j));
                assertEquals(BorderStyle.THIN,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                assertEquals(BorderStyle.THIN,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
                assertEquals(BorderStyle.THIN,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                assertEquals(BorderStyle.THIN,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
            }
        }
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.OUTSIDE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(4, pt.getNumBorders(i, j));
                if (i == 0) {
                    if (j == 0) {
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else {
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    }
                } else if (i == 2) {
                    if (j == 0) {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    }
                } else {
                    if (j == 0) {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else if (j == 2) {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.MEDIUM,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    } else {
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_TOP));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_BOTTOM));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_LEFT));
                        assertEquals(BorderStyle.THIN,
                                pt.getBorderStyle(i, j,
                                        CellUtil.BORDER_RIGHT));
                    }
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(0, pt.getNumBorders(i, j));
            }
        }
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.TOP);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.BOTTOM);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.LEFT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.RIGHT);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(2, pt.getNumBorders(i, j));
                assertEquals(BorderStyle.MEDIUM,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                assertEquals(BorderStyle.MEDIUM,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.INSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                } else {
                    assertEquals(2, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.OUTSIDE_HORIZONTAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_TOP));
                } else if (i == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_BOTTOM));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                assertEquals(2, pt.getNumBorders(i, j));
                assertEquals(BorderStyle.MEDIUM,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                assertEquals(BorderStyle.MEDIUM,
                        pt.getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.INSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                } else {
                    assertEquals(2, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
                }
            }
        }
        pt.drawBorders(a1c3, BorderStyle.NONE,
                BorderExtent.NONE);
        pt.drawBorders(a1c3, BorderStyle.MEDIUM,
                BorderExtent.OUTSIDE_VERTICAL);
        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= 2; j++) {
                if (j == 0) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM,
                            pt.getBorderStyle(i, j, CellUtil.BORDER_LEFT));
                } else if (j == 2) {
                    assertEquals(1, pt.getNumBorders(i, j));
                    assertEquals(BorderStyle.MEDIUM, pt
                            .getBorderStyle(i, j, CellUtil.BORDER_RIGHT));
                } else {
                    assertEquals(0, pt.getNumBorders(i, j));
                }
            }
        }
    }

