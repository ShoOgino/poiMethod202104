	public static void confirmRoundTrip(int i, long rawBitsA) {
		double a = Double.longBitsToDouble(rawBitsA);
		if (a == 0.0) {
			// Can't represent 0.0 or -0.0 with NormalisedDecimal
			return;
		}
		ExpandedDouble ed1 = new ExpandedDouble(rawBitsA);
		NormalisedDecimal nd2 = ed1.normaliseBaseTen();
		checkNormaliseBaseTenResult(ed1, nd2);

		ExpandedDouble ed3 = nd2.normaliseBaseTwo();
		assertEquals(ed3.getBinaryExponent(), ed1.getBinaryExponent(), "bin exp mismatch");

		BigInteger diff = ed3.getSignificand().subtract(ed1.getSignificand()).abs();
		if (diff.signum() == 0) {
			return;
		}
		// original quantity only has 53 bits of precision
		// these quantities may have errors in the 64th bit, which hopefully don't make any difference

		// errors in the 64th bit happen from time to time
		// this is well below the 53 bits of precision required
		assertTrue(diff.bitLength() < 2);
	}

