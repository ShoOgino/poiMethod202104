    /**
     * Excel's implementation of floating number arithmetic does not fully adhere to IEEE 754:
     *
     * From http://support.microsoft.com/kb/78113:
     *
     * <ul>
     * <li> Positive/Negative Infinities:
     *   Infinities occur when you divide by 0. Excel does not support infinities, rather,
     *   it gives a #DIV/0! error in these cases.
     * </li>
     * <li>
     *   Not-a-Number (NaN):
     *   NaN is used to represent invalid operations (such as infinity/infinity,
     *   infinity-infinity, or the square root of -1). NaNs allow a program to
     *   continue past an invalid operation. Excel instead immediately generates
     *   an error such as #NUM! or #DIV/0!.
     * </li>
     * </ul>
     */
    @Test
    public void testNanAndInfinity() throws Exception {
        try (Workbook wb1 = _testDataProvider.createWorkbook()) {
            Sheet workSheet = wb1.createSheet("Sheet1");
            Row row = workSheet.createRow(0);

            Cell cell0 = row.createCell(0);
            cell0.setCellValue(Double.NaN);
            assertEquals(CellType.ERROR, cell0.getCellType(), "Double.NaN should change cell type to CellType#ERROR");
            assertEquals(FormulaError.NUM, forInt(cell0.getErrorCellValue()), "Double.NaN should change cell value to #NUM!");

            Cell cell1 = row.createCell(1);
            cell1.setCellValue(Double.POSITIVE_INFINITY);
            assertEquals(CellType.ERROR, cell1.getCellType(), "Double.POSITIVE_INFINITY should change cell type to CellType#ERROR");
            assertEquals(FormulaError.DIV0, forInt(cell1.getErrorCellValue()), "Double.POSITIVE_INFINITY should change cell value to #DIV/0!");

            Cell cell2 = row.createCell(2);
            cell2.setCellValue(Double.NEGATIVE_INFINITY);
            assertEquals(CellType.ERROR, cell2.getCellType(), "Double.NEGATIVE_INFINITY should change cell type to CellType#ERROR");
            assertEquals(FormulaError.DIV0, forInt(cell2.getErrorCellValue()), "Double.NEGATIVE_INFINITY should change cell value to #DIV/0!");

            try (Workbook wb2 = _testDataProvider.writeOutAndReadBack(wb1)) {
                row = wb2.getSheetAt(0).getRow(0);

                cell0 = row.getCell(0);
                assertEquals(CellType.ERROR, cell0.getCellType());
                assertEquals(FormulaError.NUM, forInt(cell0.getErrorCellValue()));

                cell1 = row.getCell(1);
                assertEquals(CellType.ERROR, cell1.getCellType());
                assertEquals(FormulaError.DIV0, forInt(cell1.getErrorCellValue()));

                cell2 = row.getCell(2);
                assertEquals(CellType.ERROR, cell2.getCellType());
                assertEquals(FormulaError.DIV0, forInt(cell2.getErrorCellValue()));
            }
        }
    }

