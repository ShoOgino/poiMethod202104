    /**
     * Ensures that XSSF and HSSF agree with each other,
     *  and with the docs on when fetching the wrong
     *  kind of value from a Formula cell
     */
    @Test
    protected void bug47815() throws IOException {
        try (Workbook wb = _testDataProvider.createWorkbook()) {
            Sheet s = wb.createSheet();
            Row r = s.createRow(0);

            // Setup
            Cell cn = r.createCell(0, CellType.NUMERIC);
            cn.setCellValue(1.2);
            Cell cs = r.createCell(1, CellType.STRING);
            cs.setCellValue("Testing");

            Cell cfn = r.createCell(2, CellType.FORMULA);
            cfn.setCellFormula("A1");
            Cell cfs = r.createCell(3, CellType.FORMULA);
            cfs.setCellFormula("B1");

            FormulaEvaluator fe = wb.getCreationHelper().createFormulaEvaluator();
            assertEquals(CellType.NUMERIC, fe.evaluate(cfn).getCellType());
            assertEquals(CellType.STRING, fe.evaluate(cfs).getCellType());
            fe.evaluateFormulaCell(cfn);
            fe.evaluateFormulaCell(cfs);

            // Now test
            assertEquals(CellType.NUMERIC, cn.getCellType());
            assertEquals(CellType.STRING, cs.getCellType());
            assertEquals(CellType.FORMULA, cfn.getCellType());
            assertEquals(CellType.NUMERIC, cfn.getCachedFormulaResultType());
            assertEquals(CellType.FORMULA, cfs.getCellType());
            assertEquals(CellType.STRING, cfs.getCachedFormulaResultType());

            // Different ways of retrieving
            assertEquals(1.2, cn.getNumericCellValue(), 0);
            assertThrows(IllegalStateException.class, cn::getRichStringCellValue);

            assertEquals("Testing", cs.getStringCellValue());
            assertThrows(IllegalStateException.class, cs::getNumericCellValue);

            assertEquals(1.2, cfn.getNumericCellValue(), 0);
            assertThrows(IllegalStateException.class, cfn::getRichStringCellValue);

            assertEquals("Testing", cfs.getStringCellValue());
            assertThrows(IllegalStateException.class, cfs::getNumericCellValue);
        }
    }

