    /**
     * When removing one merged region, it would break
     *
     */
    @Test
    public void removeMerged() throws IOException {
        try (Workbook wb = _testDataProvider.createWorkbook()) {
            Sheet sheet = wb.createSheet();
            CellRangeAddress region = new CellRangeAddress(0, 1, 0, 1);
            assertEquals(0, sheet.addMergedRegion(region));
            region = new CellRangeAddress(2, 3, 0, 1);
            assertEquals(1, sheet.addMergedRegion(region));

            sheet.removeMergedRegion(0);

            region = sheet.getMergedRegion(0);
            assertEquals(2, region.getFirstRow(), "Left over region should be starting at row 2");

            sheet.removeMergedRegion(0);

            assertEquals(0, sheet.getNumMergedRegions(), "there should be no merged regions left!");

            //an, add, remove, get(0) would null pointer
            assertEquals(0, sheet.addMergedRegion(region));
            assertEquals(1, sheet.getNumMergedRegions(), "there should now be one merged region!");
            sheet.removeMergedRegion(0);
            assertEquals(0, sheet.getNumMergedRegions(), "there should now be zero merged regions!");
            //add it again!
            region.setLastRow(4);

            assertEquals(0, sheet.addMergedRegion(region));
            assertEquals(1, sheet.getNumMergedRegions(), "there should now be one merged region!");

            //should exist now!
            assertTrue(1 <= sheet.getNumMergedRegions(), "there isn't more than one merged region in there");
            region = sheet.getMergedRegion(0);
            assertEquals(4, region.getLastRow(), "the merged row to doesn't match the one we put in ");
        }
    }

