    /**
     * Tests that we deal with time-zones properly
     */
    @Test
    public void calendarConversion() {
        TimeZone userTZ = LocaleUtil.getUserTimeZone();
        LocaleUtil.setUserTimeZone(TimeZone.getTimeZone("CET"));
        try {
            Calendar cal = LocaleUtil.getLocaleCalendar(2002,JANUARY,1,12,1,1);
            Date expected = cal.getTime();

            // Iterating over the hours exposes any rounding issues.
            for (int hour = -12; hour <= 12; hour++)
            {
                String id = "GMT" + (hour < 0 ? "" : "+") + hour + ":00";
                cal.setTimeZone(TimeZone.getTimeZone(id));
                cal.set(Calendar.HOUR_OF_DAY, 12);
                double excelDate = DateUtil.getExcelDate(cal, false);
                Date javaDate = DateUtil.getJavaDate(excelDate);

                // Should match despite time-zone
                assertEquals(expected.getTime(), javaDate.getTime(), "Checking timezone " + id);
            }

            // Check that the timezone aware getter works correctly
            TimeZone cet = TimeZone.getTimeZone("Europe/Copenhagen");
            TimeZone ldn = TimeZone.getTimeZone("Europe/London");

            // 12:45 on 27th April 2012
            double excelDate = 41026.53125;

            // Same, no change
            assertEquals(
                DateUtil.getJavaDate(excelDate, false).getTime(),
                DateUtil.getJavaDate(excelDate, false, cet).getTime()
            );

            // London vs Copenhagen, should differ by an hour
            Date cetDate = DateUtil.getJavaDate(excelDate, false);
            Date ldnDate = DateUtil.getJavaDate(excelDate, false, ldn);
            assertEquals(ldnDate.getTime() - cetDate.getTime(), 60*60*1000);
        } finally {
            LocaleUtil.setUserTimeZone(userTZ);
        }
    }

