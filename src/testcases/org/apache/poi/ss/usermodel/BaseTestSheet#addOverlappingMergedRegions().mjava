    /**
     * Disallow creating wholly or partially overlapping merged regions
     * as this results in a corrupted workbook
     */
    @Test
    public void addOverlappingMergedRegions() throws IOException {
        try (final Workbook wb = _testDataProvider.createWorkbook()) {
            final Sheet sheet = wb.createSheet();

            final CellRangeAddress baseRegion = new CellRangeAddress(0, 1, 0, 1); //A1:B2
            assertEquals(0, sheet.addMergedRegion(baseRegion));

            final CellRangeAddress duplicateRegion = new CellRangeAddress(0, 1, 0, 1); //A1:B2
            assertThrows(
                IllegalStateException.class,
                () -> sheet.addMergedRegion(duplicateRegion),
                "Should not be able to add a merged region (" + duplicateRegion.formatAsString() + ") " +
                "if sheet already contains the same merged region (" + baseRegion.formatAsString() + ")"
            );

            final CellRangeAddress partiallyOverlappingRegion = new CellRangeAddress(1, 2, 1, 2); //B2:C3
            assertThrows(
                IllegalStateException.class,
                () -> sheet.addMergedRegion(partiallyOverlappingRegion),
                "Should not be able to add a merged region (" + partiallyOverlappingRegion.formatAsString() + ") " +
                "if it partially overlaps with an existing merged region (" + baseRegion.formatAsString() + ")"
            );

            final CellRangeAddress subsetRegion = new CellRangeAddress(0, 1, 0, 0); //A1:A2
            assertThrows(
                IllegalStateException.class,
                () -> sheet.addMergedRegion(subsetRegion),
                "Should not be able to add a merged region (" + subsetRegion.formatAsString() + ") " +
                "if it is a formal subset of an existing merged region (" + baseRegion.formatAsString() + ")"
            );

            final CellRangeAddress supersetRegion = new CellRangeAddress(0, 2, 0, 2); //A1:C3
            assertThrows(
                IllegalStateException.class,
                () -> sheet.addMergedRegion(supersetRegion),
                "Should not be able to add a merged region (" + supersetRegion.formatAsString() + ") " +
                "if it is a formal superset of an existing merged region (" + baseRegion.formatAsString() + ")"
            );

            final CellRangeAddress disjointRegion = new CellRangeAddress(10, 11, 10, 11);
            assertEquals(1, sheet.addMergedRegion(disjointRegion));
        }
    }

