    @Test
    public void testAdd() {
        IntList list = new IntList();
        int[] testArray =
            {
                0, 1, 2, 3, 5
            };

        for (int element : testArray) {
            list.add(element);
        }
        for (int j = 0; j < testArray.length; j++) {
            assertEquals(testArray[j], list.get(j));
        }
        assertEquals(testArray.length, list.size());

        // add at the beginning
        list.add(0, -1);
        assertEquals(-1, list.get(0));
        assertEquals(testArray.length + 1, list.size());
        for (int j = 0; j < testArray.length; j++) {
            assertEquals(testArray[j], list.get(j + 1));
        }

        // add in the middle
        list.add(5, 4);
        assertEquals(4, list.get(5));
        assertEquals(testArray.length + 2, list.size());
        for (int j = 0; j < list.size(); j++) {
            assertEquals(j - 1, list.get(j));
        }

        // add at the end
        list.add(list.size(), 6);
        assertEquals(testArray.length + 3, list.size());
        for (int j = 0; j < list.size(); j++) {
            assertEquals(j - 1, list.get(j));
        }

        // add past end
        IntList list2 = list;
        assertThrows(IndexOutOfBoundsException.class, () -> list2.add(list2.size() + 1, 8));

        // test growth
        list = new IntList(0);
        for (int j = 0; j < 1000; j++) {
            list.add(j);
        }
        assertEquals(1000, list.size());
        for (int j = 0; j < 1000; j++) {
            assertEquals(j, list.get(j));
        }
        list = new IntList(0);
        for (int j = 0; j < 1000; j++) {
            list.add(0, j);
        }
        assertEquals(1000, list.size());
        for (int j = 0; j < 1000; j++) {
            assertEquals(j, list.get(999 - j));
        }
    }

