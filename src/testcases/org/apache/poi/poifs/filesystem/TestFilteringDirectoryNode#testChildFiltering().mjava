    @Test
    public void testChildFiltering() throws Exception {
        List<String> excl = Arrays.asList("NotThere", "AlsoNotThere", eRoot.getName());
        FilteringDirectoryNode d1 = new FilteringDirectoryNode(fs.getRoot(), excl);

        assertEquals(2, d1.getEntryCount());
        assertTrue(d1.hasEntry(dirA.getName()));
        assertTrue(d1.hasEntry(dirB.getName()));
        assertFalse(d1.hasEntry(eRoot.getName()));

        assertEquals(dirA, d1.getEntry(dirA.getName()));
        assertEquals(dirB, d1.getEntry(dirB.getName()));
        assertThrows(FileNotFoundException.class, () -> d1.getEntry(eRoot.getName()));

        Iterator<Entry> i = d1.getEntries();
        assertEquals(dirA, i.next());
        assertEquals(dirB, i.next());
        assertThrows(NoSuchElementException.class, i::next, "Should throw NoSuchElementException when depleted");


        // Filter more
        excl = Arrays.asList("NotThere", "AlsoNotThere", eRoot.getName(), dirA.getName());
        FilteringDirectoryNode d2 = new FilteringDirectoryNode(fs.getRoot(), excl);

        assertEquals(1, d2.getEntryCount());
        assertFalse(d2.hasEntry(dirA.getName()));
        assertTrue(d2.hasEntry(dirB.getName()));
        assertFalse(d2.hasEntry(eRoot.getName()));
        assertThrows(FileNotFoundException.class, () -> d2.getEntry(dirA.getName()), "Should be filtered");
        assertEquals(dirB, d2.getEntry(dirB.getName()));
        assertThrows(FileNotFoundException.class, () -> d2.getEntry(eRoot.getName()), "Should be filtered");

        i = d2.getEntries();
        assertEquals(dirB, i.next());
        assertThrows(NoSuchElementException.class, i::next, "Should throw NoSuchElementException when depleted");

        // Filter everything
        excl = Arrays.asList("NotThere", eRoot.getName(), dirA.getName(), dirB.getName());
        FilteringDirectoryNode d3 = new FilteringDirectoryNode(fs.getRoot(), excl);

        assertEquals(0, d3.getEntryCount());
        assertFalse(d3.hasEntry(dirA.getName()));
        assertFalse(d3.hasEntry(dirB.getName()));
        assertFalse(d3.hasEntry(eRoot.getName()));
        assertThrows(FileNotFoundException.class, () -> d3.getEntry(dirA.getName()), "Should be filtered");
        assertThrows(FileNotFoundException.class, () -> d3.getEntry(dirB.getName()), "Should be filtered");
        assertThrows(FileNotFoundException.class, () -> d3.getEntry(eRoot.getName()), "Should be filtered");

        i = d3.getEntries();
        assertThrows(NoSuchElementException.class, i::next, "Should throw NoSuchElementException when depleted");
    }

