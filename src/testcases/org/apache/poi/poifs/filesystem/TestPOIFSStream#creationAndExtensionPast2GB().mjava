    /**
     * To ensure we can create a file >2gb in size, as well as to
     * extend existing files past the 2gb boundary.
     * <p>
     * Note that to run this test, you will require 2.5+gb of free
     * space on your TMP/TEMP partition/disk
     * <p>
     * Note that to run this test, you need to be able to mmap 2.5+gb
     * files, which may need bigger kernel.shmmax and vm.max_map_count
     * settings on Linux.
     * <p>
     * TODO Fix this to work...
     */
    @Test
    @Disabled("Work in progress test for #60670")
    public void creationAndExtensionPast2GB() throws Exception {
        File big = TempFile.createTempFile("poi-test-", ".ole2");
        assumeTrue(big.getFreeSpace() > 2.5 * 1024 * 1024 * 1024,
            "2.5gb of free space is required on your tmp/temp partition/disk to run large file tests");
        System.out.println("Slow, memory heavy test in progress....");

        int s100mb = 100 * 1024 * 1024;
        int s512mb = 512 * 1024 * 1024;
        long s2gb = 2L * 1024 * 1024 * 1024;
        DocumentEntry entry;
        POIFSFileSystem fs;

        // Create a just-sub 2gb file
        fs = POIFSFileSystem.create(big);
        for (int i = 0; i < 19; i++) {
            fs.createDocument(new DummyDataInputStream(s100mb), "Entry" + i);
        }
        fs.writeFilesystem();
        fs.close();

        // Extend it past the 2gb mark
        fs = new POIFSFileSystem(big, false);
        for (int i = 0; i < 19; i++) {
            entry = (DocumentEntry) fs.getRoot().getEntry("Entry" + i);
            assertNotNull(entry);
            assertEquals(s100mb, entry.getSize());
        }

        fs.createDocument(new DummyDataInputStream(s512mb), "Bigger");
        fs.writeFilesystem();
        fs.close();

        // Check it still works
        fs = new POIFSFileSystem(big, false);
        for (int i = 0; i < 19; i++) {
            entry = (DocumentEntry) fs.getRoot().getEntry("Entry" + i);
            assertNotNull(entry);
            assertEquals(s100mb, entry.getSize());
        }
        entry = (DocumentEntry) fs.getRoot().getEntry("Bigger");
        assertNotNull(entry);
        assertEquals(s512mb, entry.getSize());

        // Tidy
        fs.close();
        assertTrue(big.delete());


        // Create a >2gb file
        fs = POIFSFileSystem.create(big);
        for (int i = 0; i < 4; i++) {
            fs.createDocument(new DummyDataInputStream(s512mb), "Entry" + i);
        }
        fs.writeFilesystem();
        fs.close();

        // Read it
        fs = new POIFSFileSystem(big, false);
        for (int i = 0; i < 4; i++) {
            entry = (DocumentEntry) fs.getRoot().getEntry("Entry" + i);
            assertNotNull(entry);
            assertEquals(s512mb, entry.getSize());
        }

        // Extend it
        fs.createDocument(new DummyDataInputStream(s512mb), "Entry4");
        fs.writeFilesystem();
        fs.close();

        // Check it worked
        fs = new POIFSFileSystem(big, false);
        for (int i = 0; i < 5; i++) {
            entry = (DocumentEntry) fs.getRoot().getEntry("Entry" + i);
            assertNotNull(entry);
            assertEquals(s512mb, entry.getSize());
        }

        // Tidy
        fs.close();
        assertTrue(big.delete());

        // Create a file with a 2gb entry
        fs = POIFSFileSystem.create(big);
        fs.createDocument(new DummyDataInputStream(s100mb), "Small");
        // TODO Check we get a helpful error about the max size
        fs.createDocument(new DummyDataInputStream(s2gb), "Big");
    }

