    @Test
    public void addBeforeWrite() throws IOException {
        POIFSFileSystem fs1 = new POIFSFileSystem();
        DocumentEntry miniDoc;
        DocumentEntry normDoc;
        HeaderBlock hdr;

        // Initially has Properties + BAT but nothing else
        assertEquals(POIFSConstants.END_OF_CHAIN, fs1.getNextBlock(0));
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs1.getNextBlock(1));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs1.getNextBlock(2));

        hdr = writeOutAndReadHeader(fs1);
        // No mini stream, and no xbats
        // Will have fat then properties stream
        assertEquals(1, hdr.getBATCount());
        assertEquals(1, hdr.getBATArray()[0]);
        assertEquals(0, hdr.getPropertyStart());
        assertEquals(POIFSConstants.END_OF_CHAIN, hdr.getSBATStart());
        assertEquals(POIFSConstants.END_OF_CHAIN, hdr.getXBATIndex());
        assertEquals(POIFSConstants.SMALLER_BIG_BLOCK_SIZE * 3, fs1.size());
        fs1.close();

        // Get a clean filesystem to start with
        fs1 = new POIFSFileSystem();

        // Put our test files in a non-standard place
        DirectoryEntry parentDir = fs1.createDirectory("Parent Directory");
        DirectoryEntry testDir = parentDir.createDirectory("Test Directory");


        // Add to the mini stream
        byte[] mini = new byte[]{42, 0, 1, 2, 3, 4, 42};
        testDir.createDocument("Mini", new ByteArrayInputStream(mini));

        // Add to the main stream
        byte[] main4096 = new byte[4096];
        main4096[0] = -10;
        main4096[4095] = -11;
        testDir.createDocument("Normal4096", new ByteArrayInputStream(main4096));


        // Check the mini stream was added, then the main stream
        assertEquals(POIFSConstants.END_OF_CHAIN, fs1.getNextBlock(0));
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs1.getNextBlock(1));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs1.getNextBlock(2)); // Mini Fat
        assertEquals(POIFSConstants.END_OF_CHAIN, fs1.getNextBlock(3)); // Mini Stream
        assertEquals(5, fs1.getNextBlock(4)); // Main Stream
        assertEquals(6, fs1.getNextBlock(5));
        assertEquals(7, fs1.getNextBlock(6));
        assertEquals(8, fs1.getNextBlock(7));
        assertEquals(9, fs1.getNextBlock(8));
        assertEquals(10, fs1.getNextBlock(9));
        assertEquals(11, fs1.getNextBlock(10));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs1.getNextBlock(11));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs1.getNextBlock(12));
        assertEquals(POIFSConstants.SMALLER_BIG_BLOCK_SIZE * 13, fs1.size());


        // Check that we can read the right data pre-write
        miniDoc = (DocumentEntry) testDir.getEntry("Mini");
        assertContentsMatches(mini, miniDoc);

        normDoc = (DocumentEntry) testDir.getEntry("Normal4096");
        assertContentsMatches(main4096, normDoc);


        // Write, read, check
        hdr = writeOutAndReadHeader(fs1);
        POIFSFileSystem fs2 = writeOutAndReadBack(fs1);
        fs1.close();

        // Check the header details - will have the sbat near the start,
        //  then the properties at the end
        assertEquals(1, hdr.getBATCount());
        assertEquals(1, hdr.getBATArray()[0]);
        assertEquals(2, hdr.getSBATStart());
        assertEquals(0, hdr.getPropertyStart());
        assertEquals(POIFSConstants.END_OF_CHAIN, hdr.getXBATIndex());

        // Check the block allocation is unchanged, other than
        //  the properties stream going in at the end
        assertEquals(12, fs2.getNextBlock(0)); // Properties
        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs2.getNextBlock(1));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs2.getNextBlock(2));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs2.getNextBlock(3));
        assertEquals(5, fs2.getNextBlock(4));
        assertEquals(6, fs2.getNextBlock(5));
        assertEquals(7, fs2.getNextBlock(6));
        assertEquals(8, fs2.getNextBlock(7));
        assertEquals(9, fs2.getNextBlock(8));
        assertEquals(10, fs2.getNextBlock(9));
        assertEquals(11, fs2.getNextBlock(10));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs2.getNextBlock(11));
        assertEquals(POIFSConstants.END_OF_CHAIN, fs2.getNextBlock(12));
        assertEquals(POIFSConstants.UNUSED_BLOCK, fs2.getNextBlock(13));
        assertEquals(POIFSConstants.SMALLER_BIG_BLOCK_SIZE * 14, fs2.size());


        // Check the data
        DirectoryEntry fsRoot = fs2.getRoot();
        assertEquals(1, fsRoot.getEntryCount());

        parentDir = (DirectoryEntry) fsRoot.getEntry("Parent Directory");
        assertEquals(1, parentDir.getEntryCount());

        testDir = (DirectoryEntry) parentDir.getEntry("Test Directory");
        assertEquals(2, testDir.getEntryCount());

        miniDoc = (DocumentEntry) testDir.getEntry("Mini");
        assertContentsMatches(mini, miniDoc);

        normDoc = (DocumentEntry) testDir.getEntry("Normal4096");
        assertContentsMatches(main4096, normDoc);


        // Add one more stream to each, then save and re-load
        byte[] mini2 = new byte[]{-42, 0, -1, -2, -3, -4, -42};
        testDir.createDocument("Mini2", new ByteArrayInputStream(mini2));

        // Add to the main stream
        byte[] main4106 = new byte[4106];
        main4106[0] = 41;
        main4106[4105] = 42;
        testDir.createDocument("Normal4106", new ByteArrayInputStream(main4106));


        // Recheck the data in all 4 streams
        POIFSFileSystem fs3 = writeOutAndReadBack(fs2);
        fs2.close();

        fsRoot = fs3.getRoot();
        assertEquals(1, fsRoot.getEntryCount());

        parentDir = (DirectoryEntry) fsRoot.getEntry("Parent Directory");
        assertEquals(1, parentDir.getEntryCount());

        testDir = (DirectoryEntry) parentDir.getEntry("Test Directory");
        assertEquals(4, testDir.getEntryCount());

        miniDoc = (DocumentEntry) testDir.getEntry("Mini");
        assertContentsMatches(mini, miniDoc);

        miniDoc = (DocumentEntry) testDir.getEntry("Mini2");
        assertContentsMatches(mini2, miniDoc);

        normDoc = (DocumentEntry) testDir.getEntry("Normal4106");
        assertContentsMatches(main4106, normDoc);

        // All done
        fs3.close();
    }

