    /**
     * test non-trivial constructor (a DirectoryNode with children)
     */
    @Test
    public void testNonEmptyConstructor() throws IOException {
        DirectoryProperty property1 = new DirectoryProperty("parent");
        DirectoryProperty property2 = new DirectoryProperty("child1");

        property1.addChild(property2);
        property1.addChild(new DocumentProperty("child2", 2000));
        property2.addChild(new DocumentProperty("child3", 30000));

        try (POIFSFileSystem fs = new POIFSFileSystem()) {
            DirectoryNode node = new DirectoryNode(property1, fs, null);

            // verify that getEntries behaves correctly
            int count = 0;
            Iterator<Entry> iter = node.getEntries();

            while (iter.hasNext()) {
                count++;
                iter.next();
            }
            assertEquals(2, count);

            // verify behavior of isEmpty
            assertFalse(node.isEmpty());

            // verify behavior of getEntryCount
            assertEquals(2, node.getEntryCount());

            // verify behavior of getEntry
            DirectoryNode child1 = (DirectoryNode) node.getEntry("child1");

            child1.getEntry("child3");
            node.getEntry("child2");
            assertThrows(FileNotFoundException.class, () -> node.getEntry("child3"));

            // verify behavior of isDirectoryEntry
            assertTrue(node.isDirectoryEntry());

            // verify behavior of getName
            assertEquals(property1.getName(), node.getName());

            // verify behavior of isDocumentEntry
            assertFalse(node.isDocumentEntry());

            // verify behavior of getParent
            assertNull(node.getParent());
        }
    }

