    /**
     * Test complex buffered read
     */
    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Test
    void testComplexBufferRead() throws IOException {
        DocumentInputStream stream = new DocumentInputStream(_workbook_n);
        assertThrows(IllegalArgumentException.class, () -> stream.read(null, 0, 1));

        // test illegal offsets and lengths
        assertThrows(IndexOutOfBoundsException.class, () -> stream.read(new byte[5], -4, 0));
        assertThrows(IndexOutOfBoundsException.class, () -> stream.read(new byte[5], 0, -4));
        assertThrows(IndexOutOfBoundsException.class, () -> stream.read(new byte[5], 0, 6));

        // test reading zero
        assertEquals(0, stream.read(new byte[5], 0, 0));
        assertEquals(_workbook_size, available(stream));
        byte[] buffer = new byte[_workbook_size];
        int offset = 0;

        while (available(stream) >= _buffer_size) {
            Arrays.fill(buffer, (byte) 0);
            assertEquals(_buffer_size, stream.read(buffer, offset, _buffer_size));
            for (int j = 0; j < offset; j++) {
                assertEquals(0, buffer[j], "checking byte " + j);
            }
            for (int j = offset; j < (offset + _buffer_size); j++) {
                assertEquals(_workbook_data[j], buffer[j], "checking byte " + j);
            }
            for (int j = offset + _buffer_size; j < buffer.length; j++) {
                assertEquals(0, buffer[j], "checking byte " + j);
            }
            offset += _buffer_size;
            assertEquals(_workbook_size - offset, available(stream), "offset " + offset);
        }
        assertEquals(_workbook_size % _buffer_size, available(stream));
        Arrays.fill(buffer, (byte) 0);
        int count = stream.read(buffer, offset, _workbook_size % _buffer_size);

        assertEquals(_workbook_size % _buffer_size, count);
        for (int j = 0; j < offset; j++) {
            assertEquals(0, buffer[j], "checking byte " + j);
        }
        for (int j = offset; j < buffer.length; j++) {
            assertEquals(_workbook_data[j], buffer[j], "checking byte " + j);
        }
        assertEquals(_workbook_size, offset + count);
        for (int j = count; j < offset; j++) {
            assertEquals(0, buffer[j], "byte " + j);
        }

        assertEquals(-1, stream.read(buffer, 0, 1));
        stream.close();

        assertThrows(IOException.class, () -> stream.read(buffer, 0, 1));
    }

