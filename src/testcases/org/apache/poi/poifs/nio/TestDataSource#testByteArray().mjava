    @Test
    public void testByteArray() {
        byte[] data = new byte[256];
        byte b;
        for (int i = 0; i < data.length; i++) {
            b = (byte) i;
            data[i] = b;
        }

        ByteArrayBackedDataSource ds = new ByteArrayBackedDataSource(data);

        // Start
        ByteBuffer bs;
        bs = ds.read(4, 0);
        assertEquals(0, bs.position());
        assertEquals(0x00, bs.get());
        assertEquals(0x01, bs.get());
        assertEquals(0x02, bs.get());
        assertEquals(0x03, bs.get());

        // Middle
        bs = ds.read(4, 100);
        assertEquals(100, bs.position());
        assertEquals(100, bs.get());
        assertEquals(101, bs.get());
        assertEquals(102, bs.get());
        assertEquals(103, bs.get());

        // End
        bs = ds.read(4, 252);
        assertEquals(-4, bs.get());
        assertEquals(-3, bs.get());
        assertEquals(-2, bs.get());
        assertEquals(-1, bs.get());

        // Off the end
        bs = ds.read(4, 254);
        assertEquals(-2, bs.get());
        assertEquals(-1, bs.get());
        assertThrows(BufferUnderflowException.class, bs::get, "Shouldn't be able to read off the end");

        // Past the end
        assertThrows(IndexOutOfBoundsException.class, () -> ds.read(4, 256), "Shouldn't be able to read off the end");


        // Overwrite
        bs = ByteBuffer.allocate(4);
        bs.put(0, (byte) -55);
        bs.put(1, (byte) -54);
        bs.put(2, (byte) -53);
        bs.put(3, (byte) -52);

        assertEquals(256, ds.size());
        ds.write(bs, 40);
        assertEquals(256, ds.size());
        bs = ds.read(4, 40);

        assertEquals(-55, bs.get());
        assertEquals(-54, bs.get());
        assertEquals(-53, bs.get());
        assertEquals(-52, bs.get());

        // Append
        bs = ByteBuffer.allocate(4);
        bs.put(0, (byte) -55);
        bs.put(1, (byte) -54);
        bs.put(2, (byte) -53);
        bs.put(3, (byte) -52);

        assertEquals(256, ds.size());
        ds.write(bs, 256);
        assertEquals(260, ds.size());

        bs = ds.read(4, 256);
        assertEquals(256, bs.position());
        assertEquals(-55, bs.get());
        assertEquals(-54, bs.get());
        assertEquals(-53, bs.get());
        assertEquals(-52, bs.get());
    }

