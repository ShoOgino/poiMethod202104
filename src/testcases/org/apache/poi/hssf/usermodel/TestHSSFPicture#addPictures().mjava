    @Test
    void addPictures() throws IOException {
        try (HSSFWorkbook wb1 = new HSSFWorkbook()) {

            HSSFSheet sh = wb1.createSheet("Pictures");
            HSSFPatriarch dr = sh.createDrawingPatriarch();
            assertEquals(0, dr.getChildren().size());
            HSSFClientAnchor anchor = wb1.getCreationHelper().createClientAnchor();

            //register a picture
            byte[] data1 = {1, 2, 3};
            int idx1 = wb1.addPicture(data1, Workbook.PICTURE_TYPE_JPEG);
            assertEquals(1, idx1);
            HSSFPicture p1 = dr.createPicture(anchor, idx1);
            assertArrayEquals(data1, p1.getPictureData().getData());

            // register another one
            byte[] data2 = {4, 5, 6};
            int idx2 = wb1.addPicture(data2, Workbook.PICTURE_TYPE_JPEG);
            assertEquals(2, idx2);
            HSSFPicture p2 = dr.createPicture(anchor, idx2);
            assertEquals(2, dr.getChildren().size());
            assertArrayEquals(data2, p2.getPictureData().getData());

            // confirm that HSSFPatriarch.getChildren() returns two picture shapes
            assertArrayEquals(data1, ((HSSFPicture) dr.getChildren().get(0)).getPictureData().getData());
            assertArrayEquals(data2, ((HSSFPicture) dr.getChildren().get(1)).getPictureData().getData());

            // write, read back and verify that our pictures are there
            try (HSSFWorkbook wb2 = HSSFTestDataSamples.writeOutAndReadBack(wb1)) {
                List<? extends PictureData> lst2 = wb2.getAllPictures();
                assertEquals(2, lst2.size());
                assertArrayEquals(data1, lst2.get(0).getData());
                assertArrayEquals(data2, lst2.get(1).getData());

                // confirm that the pictures are in the Sheet's drawing
                sh = wb2.getSheet("Pictures");
                dr = sh.createDrawingPatriarch();
                assertEquals(2, dr.getChildren().size());
                assertArrayEquals(data1, ((HSSFPicture) dr.getChildren().get(0)).getPictureData().getData());
                assertArrayEquals(data2, ((HSSFPicture) dr.getChildren().get(1)).getPictureData().getData());

                // add a third picture
                byte[] data3 = {7, 8, 9};
                // picture index must increment across write-read
                int idx3 = wb2.addPicture(data3, Workbook.PICTURE_TYPE_JPEG);
                assertEquals(3, idx3);
                HSSFPicture p3 = dr.createPicture(anchor, idx3);
                assertArrayEquals(data3, p3.getPictureData().getData());
                assertEquals(3, dr.getChildren().size());
                assertArrayEquals(data1, ((HSSFPicture) dr.getChildren().get(0)).getPictureData().getData());
                assertArrayEquals(data2, ((HSSFPicture) dr.getChildren().get(1)).getPictureData().getData());
                assertArrayEquals(data3, ((HSSFPicture) dr.getChildren().get(2)).getPictureData().getData());

                // write and read again
                try (HSSFWorkbook wb3 = HSSFTestDataSamples.writeOutAndReadBack(wb2)) {
                    List<? extends PictureData> lst3 = wb3.getAllPictures();
                    // all three should be there
                    assertEquals(3, lst3.size());
                    assertArrayEquals(data1, lst3.get(0).getData());
                    assertArrayEquals(data2, lst3.get(1).getData());
                    assertArrayEquals(data3, lst3.get(2).getData());

                    sh = wb3.getSheet("Pictures");
                    dr = sh.createDrawingPatriarch();
                    assertEquals(3, dr.getChildren().size());

                    // forth picture
                    byte[] data4 = {10, 11, 12};
                    int idx4 = wb3.addPicture(data4, Workbook.PICTURE_TYPE_JPEG);
                    assertEquals(4, idx4);
                    dr.createPicture(anchor, idx4);
                    assertEquals(4, dr.getChildren().size());
                    assertArrayEquals(data1, ((HSSFPicture) dr.getChildren().get(0)).getPictureData().getData());
                    assertArrayEquals(data2, ((HSSFPicture) dr.getChildren().get(1)).getPictureData().getData());
                    assertArrayEquals(data3, ((HSSFPicture) dr.getChildren().get(2)).getPictureData().getData());
                    assertArrayEquals(data4, ((HSSFPicture) dr.getChildren().get(3)).getPictureData().getData());

                    try (HSSFWorkbook wb4 = HSSFTestDataSamples.writeOutAndReadBack(wb3)) {
                        List<? extends PictureData> lst4 = wb4.getAllPictures();
                        assertEquals(4, lst4.size());
                        assertArrayEquals(data1, lst4.get(0).getData());
                        assertArrayEquals(data2, lst4.get(1).getData());
                        assertArrayEquals(data3, lst4.get(2).getData());
                        assertArrayEquals(data4, lst4.get(3).getData());
                        sh = wb4.getSheet("Pictures");
                        dr = sh.createDrawingPatriarch();
                        assertEquals(4, dr.getChildren().size());
                        assertArrayEquals(data1, ((HSSFPicture) dr.getChildren().get(0)).getPictureData().getData());
                        assertArrayEquals(data2, ((HSSFPicture) dr.getChildren().get(1)).getPictureData().getData());
                        assertArrayEquals(data3, ((HSSFPicture) dr.getChildren().get(2)).getPictureData().getData());
                        assertArrayEquals(data4, ((HSSFPicture) dr.getChildren().get(3)).getPictureData().getData());
                    }
                }
            }
        }
    }

