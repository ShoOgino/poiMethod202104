    @Test
	void testAddMergedRegion() {
		InternalSheet sheet = InternalSheet.createSheet();
		final int regionsToAdd = 4096;

		//simple test that adds a load of regions
		for (int n = 0; n < regionsToAdd; n++)
		{
			int index = sheet.addMergedRegion(0, (short) 0, 1, (short) 1);
            assertEquals(index, n, "Merged region index expected to be " + n + " got " + index);
		}

		//test all the regions were indeed added
        assertEquals(sheet.getNumMergedRegions(), regionsToAdd);

		//test that the regions were spread out over the appropriate number of records
		MergedCellListener mcListener = new MergedCellListener();
		sheet.visitContainedRecords(mcListener, 0);
		int recordsAdded	= mcListener.getCount();
		int recordsExpected = regionsToAdd/1027;
		//noinspection ConstantConditions
		if ((regionsToAdd % 1027) != 0) {
			recordsExpected++;
		}
        assertEquals(recordsAdded, recordsExpected,
			"The " + regionsToAdd + " merged regions should have been spread out over "
			+ recordsExpected + " records, not " + recordsAdded);
		// Check we can't add one with invalid date
		IllegalArgumentException e;
		e = assertThrows(IllegalArgumentException.class, () -> sheet.addMergedRegion(10, (short)10, 9, (short)12));
		assertEquals("The 'to' row (9) must not be less than the 'from' row (10)", e.getMessage());

		e = assertThrows(IllegalArgumentException.class, () -> sheet.addMergedRegion(10, (short)10, 12, (short)9));
		assertEquals("The 'to' col (9) must not be less than the 'from' col (10)", e.getMessage());
	}

