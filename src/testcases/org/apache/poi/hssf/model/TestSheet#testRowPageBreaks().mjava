	/**
	 * Make sure page break functionality works (in memory)
	 *
	 */
    @Test
	public void testRowPageBreaks() {
		short colFrom = 0;
		short colTo = 255;

		InternalSheet worksheet = InternalSheet.createSheet();
		PageSettingsBlock sheet = worksheet.getPageSettings();
		sheet.setRowBreak(0, colFrom, colTo);

		assertTrue(sheet.isRowBroken(0), "no row break at 0");
		assertEquals(1, sheet.getNumRowBreaks(), "1 row break available");

		sheet.setRowBreak(0, colFrom, colTo);
		sheet.setRowBreak(0, colFrom, colTo);

		assertTrue(sheet.isRowBroken(0), "no row break at 0");
		assertEquals(1, sheet.getNumRowBreaks(), "1 row break available");

		sheet.setRowBreak(10, colFrom, colTo);
		sheet.setRowBreak(11, colFrom, colTo);

		assertTrue(sheet.isRowBroken(10), "no row break at 10");
		assertTrue(sheet.isRowBroken(11), "no row break at 11");
		assertEquals(3, sheet.getNumRowBreaks(), "3 row break available");


		boolean is10 = false;
		boolean is0 = false;
		boolean is11 = false;

		int[] rowBreaks = sheet.getRowBreaks();
		for (int main : rowBreaks) {
			assertTrue(main == 0 || main == 10 || main == 11, "Invalid page break");
			if (main == 0)	 is0 = true;
			if (main == 10) is10 = true;
			if (main == 11) is11 = true;
		}

		assertTrue(is0 && is10 && is11, "one of the breaks didnt make it");

		sheet.removeRowBreak(11);
		assertFalse(sheet.isRowBroken(11), "row should be removed");

		sheet.removeRowBreak(0);
		assertFalse(sheet.isRowBroken(0), "row should be removed");

		sheet.removeRowBreak(10);
		assertFalse(sheet.isRowBroken(10), "row should be removed");

		assertEquals(0, sheet.getNumRowBreaks(), "no more breaks");
	}

