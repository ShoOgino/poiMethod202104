	/**
	 * Make sure a NAN value is preserved
	 * This formula record is a representation of =1/0 at row 0, column 0
	 */
	@Test
	public void testCheckNanPreserve() {
		byte[] formulaByte = {
			0, 0, 0, 0,
			0x0F, 0x00,

			// 8 bytes cached number is a 'special value' in this case
			0x02, // special cached value type 'error'
			0x00,
			FormulaError.DIV0.getCode(),
			0x00,
			0x00,
			0x00,
			(byte)0xFF,
			(byte)0xFF,

			0x00,
			0x00,
			0x00,
			0x00,

			(byte)0xE0, //18
			(byte)0xFC,
			// Ptgs
			0x07, 0x00, // encoded length
			0x1E, 0x01, 0x00, // IntPtg(1)
			0x1E, 0x00,	0x00, // IntPtg(0)
			0x06, // DividePtg

		};

		FormulaRecord record = new FormulaRecord(TestcaseRecordInputStream.create(FormulaRecord.sid, formulaByte));
		assertEquals(0, record.getRow(), "Row");
		assertEquals(0, record.getColumn(), "Column");
		//noinspection deprecation
		assertEquals(CellType.ERROR.getCode(), record.getCachedResultType());
		assertEquals(CellType.ERROR, record.getCachedResultTypeEnum());

		byte[] output = record.serialize();
		// includes sid+recordlength
		assertEquals(33, output.length, "Output size");

		for (int i = 5; i < 13;i++) {
			assertEquals(formulaByte[i], output[i+4], "FormulaByte NaN doesn't match");
		}
	}

