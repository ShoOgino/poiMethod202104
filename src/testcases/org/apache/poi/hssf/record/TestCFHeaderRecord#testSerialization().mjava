	@Test
	public void testSerialization() {
		byte[] recordData =
		{
			(byte)0x03, (byte)0x00,
			(byte)0x01,	(byte)0x00,

			(byte)0x00,	(byte)0x00,
			(byte)0x03,	(byte)0x00,
			(byte)0x00,	(byte)0x00,
			(byte)0x03,	(byte)0x00,

			(byte)0x04,	(byte)0x00, // nRegions

			(byte)0x00,	(byte)0x00,
			(byte)0x01,	(byte)0x00,
			(byte)0x00,	(byte)0x00,
			(byte)0x01,	(byte)0x00,

			(byte)0x00,	(byte)0x00,
			(byte)0x01,	(byte)0x00,
			(byte)0x02,	(byte)0x00,
			(byte)0x03,	(byte)0x00,

			(byte)0x02,	(byte)0x00,
			(byte)0x03,	(byte)0x00,
			(byte)0x00,	(byte)0x00,
			(byte)0x01,	(byte)0x00,

			(byte)0x02,	(byte)0x00,
			(byte)0x03,	(byte)0x00,
			(byte)0x02,	(byte)0x00,
			(byte)0x03,	(byte)0x00,
		};

		CFHeaderRecord record = new CFHeaderRecord(TestcaseRecordInputStream.create(CFHeaderRecord.sid, recordData));

		assertEquals(3, record.getNumberOfConditionalFormats(), "#CFRULES");
		assertTrue(record.getNeedRecalculation());
		confirm(record.getEnclosingCellRange(), 0, 3, 0, 3);
		CellRangeAddress[] ranges = record.getCellRanges();
		assertEquals(4, ranges.length);
		confirm(ranges[0], 0, 1, 0, 1);
		confirm(ranges[1], 0, 1, 2, 3);
		confirm(ranges[2], 2, 3, 0, 1);
		confirm(ranges[3], 2, 3, 2, 3);
		assertEquals(recordData.length+4, record.getRecordSize());

		byte[] output = record.serialize();
		confirmRecordEncoding(CFHeaderRecord.sid, recordData, output);
	}

