	/**
	 * This problem was noted as the overt symptom of bug 46280.  The logic for skipping {@link
	 * UnknownRecord}s in the constructor {@link RowRecordsAggregate} did not allow for the
	 * possibility of tailing {@link ContinueRecord}s.<br>
	 * The functionality change being tested here is actually not critical to the overall fix
	 * for bug 46280, since the fix involved making sure the that offending <i>PivotTable</i>
	 * records do not get into {@link RowRecordsAggregate}.<br>
	 * This fix in {@link RowRecordsAggregate} was implemented anyway since any {@link
	 * UnknownRecord} has the potential of being 'continued'.
	 */
	@Test
	void testUnknownContinue_bug46280() {
		org.apache.poi.hssf.record.Record[] inRecs = {
			new RowRecord(0),
			new NumberRecord(),
			new UnknownRecord(0x5555, "dummydata".getBytes(LocaleUtil.CHARSET_1252)),
			new ContinueRecord("moredummydata".getBytes(LocaleUtil.CHARSET_1252)),
		};
		RecordStream rs = new RecordStream(Arrays.asList(inRecs), 0);
		RowRecordsAggregate rra;
		try {
			rra = new RowRecordsAggregate(rs, SharedValueManager.createEmpty());
		} catch (RuntimeException e) {
			if (e.getMessage().startsWith("Unexpected record type")) {
				fail("Identified bug 46280a");
			}
			throw e;
		}

		List<org.apache.poi.hssf.record.Record> outRecs = new ArrayList<>();
		rra.visitContainedRecords(outRecs::add);
		assertEquals(5, outRecs.size());
	}

