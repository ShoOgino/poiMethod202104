    /**
     * Check that things are as we expected. If this fails,
     * then decoding has no hope...
     */
    @Test
    void testQuickBasics() throws Exception {
        HMEFMessage msg;
        try (InputStream is = _samples.openResourceAsStream("quick-winmail.dat")) {
            msg = new HMEFMessage(is);
        }

        MAPIAttribute rtfAttr = msg.getMessageMAPIAttribute(MAPIProperty.RTF_COMPRESSED);
        assertNotNull(rtfAttr);
        assertTrue(rtfAttr instanceof MAPIRtfAttribute);

        // Check the start of the compressed version
        byte[] data = ((MAPIRtfAttribute) rtfAttr).getRawData();
        assertEquals(5907, data.length);

        // First 16 bytes is header stuff
        // Check it has the length + compressed marker
        assertEquals(5907 - 4, LittleEndian.getShort(data));
        assertEquals(
                "LZFu",
                StringUtil.getFromCompressedUnicode(data, 8, 4)
        );


        // Now Look at the code
        byte[] exp = {
            (byte) 0x07, // Flag: cccUUUUU
            (byte) 0x00, //  c1a: offset 0 / 0x000
            (byte) 0x06, //  c1b: length 6+2  -> {\rtf1\a
            (byte) 0x01, //  c2a: offset 16 / 0x010
            (byte) 0x01, //  c2b: length 1+2  ->  def
            (byte) 0x0b, //  c3a: offset 182 / 0xb6
            (byte) 0x60, //  c3b: length 0+2  -> la
            (byte) 0x6e, // n
            (byte) 0x67, // g
            (byte) 0x31, // 1
            (byte) 0x30, // 0
            (byte) 0x32, // 2

            (byte) 0x66, // Flag:  UccUUccU
            (byte) 0x35, // 5
            (byte) 0x00, //  c2a: offset 6 / 0x006
            (byte) 0x64, //  c2b: length 4+2  -> \ansi\a
            (byte) 0x00, //  c3a: offset 7 / 0x007
            (byte) 0x72, //  c3b: length 2+2  -> nsi
            (byte) 0x63, // c
            (byte) 0x70, // p
            (byte) 0x0d, //  c6a: offset 221 / 0x0dd
            (byte) 0xd0, //  c6b: length 0+2  -> g1
            (byte) 0x0e, //  c7a: offset 224 / 0x0e0
            (byte) 0x00, //  c7b: length 0+2  -> 25
            (byte) 0x32, // 2
        };

        assertArrayEquals(exp, Arrays.copyOfRange(data, 16, 16+25));
    }

