    private void checkSlide0(final HSLFSlide s) {
		final StyleTextProp9Atom[] numberedListArray = s.getNumberedListInfo();
		assertNotNull(numberedListArray);
		assertEquals(2, numberedListArray.length);
		final StyleTextProp9Atom numberedListInfoForTextBox0 = numberedListArray[0];
		final StyleTextProp9Atom numberedListInfoForTextBox1 = numberedListArray[1];
		assertNotNull(numberedListInfoForTextBox0);
		assertNotNull(numberedListInfoForTextBox1);
		final TextPFException9[] autoNumbersOfTextBox0 = numberedListInfoForTextBox0.getAutoNumberTypes();
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox0[0].getAutoNumberStartNumber());//Default value = 1 will be used
        assertSame(AutoNumberingScheme.arabicPeriod, autoNumbersOfTextBox0[0].getAutoNumberScheme());
		final TextPFException9[] autoNumbersOfTextBox1 = numberedListInfoForTextBox1.getAutoNumberTypes();
		assertEquals(Short.valueOf((short)1), autoNumbersOfTextBox1[0].getfBulletHasAutoNumber());
		assertEquals(Short.valueOf((short)6), autoNumbersOfTextBox1[0].getAutoNumberStartNumber());//Default value = 1 will be used
        assertSame(AutoNumberingScheme.arabicPeriod, autoNumbersOfTextBox1[0].getAutoNumberScheme());


		List<List<HSLFTextParagraph>> textParass = s.getTextParagraphs();
		assertEquals(2, textParass.size());

		List<HSLFTextParagraph> textParas = textParass.get(0);
		assertEquals("List Item One\rList Item Two\rList Item Three", HSLFTextParagraph.getRawText(textParas));
		assertEquals(3, textParas.size());
		assertTrue(textParas.get(0).isBullet());

		String expected =
	        "A numbered list may start at any number \r" +
	        "This would be used as a continuation list on another page\r" +
            "This list should start with #6";
		assertEquals(expected, HSLFTextParagraph.getRawText(textParass.get(1)));

		final EscherTextboxWrapper[] styleAtoms = s.getTextboxWrappers();
		assertEquals(textParass.size(), styleAtoms.length);
		checkSingleRunWrapper(44, styleAtoms[0]);
		checkSingleRunWrapper(130, styleAtoms[1]);
	}

