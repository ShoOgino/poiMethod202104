    @Test
    void testUserEditAtomsRight() throws Exception {
        // Write out to a byte array
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ss.write(baos);

        // Build an input stream of it
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

        // Create a new one from that
        HSLFSlideShowImpl wss = new HSLFSlideShowImpl(bais);

        // Find the location of the PersistPtrIncrementalBlocks and
        // UserEditAtoms
        Record[] r = wss.getRecords();
        Map<Integer,Record> pp = new HashMap<>();
        Map<Integer,Object> ue = new HashMap<>();
        ue.put(Integer.valueOf(0),Integer.valueOf(0)); // Will show 0 if first
        int pos = 0;
        int lastUEPos = -1;

        for (final Record rec : r) {
            if(rec instanceof PersistPtrHolder) {
                pp.put(Integer.valueOf(pos), rec);
            }
            if(rec instanceof UserEditAtom) {
                ue.put(Integer.valueOf(pos), rec);
                lastUEPos = pos;
            }

            ByteArrayOutputStream bc = new ByteArrayOutputStream();
            rec.writeOut(bc);
            pos += bc.size();
        }

        // Check that the UserEditAtom's point to right stuff
        for (final Record rec : r) {
            if(rec instanceof UserEditAtom) {
                UserEditAtom uea = (UserEditAtom)rec;
                int luPos = uea.getLastUserEditAtomOffset();
                int ppPos = uea.getPersistPointersOffset();

                assertContains(ue, Integer.valueOf(luPos));
                assertContains(pp, Integer.valueOf(ppPos));
            }
        }

        // Check that the CurrentUserAtom points to the right UserEditAtom
        CurrentUserAtom cua = wss.getCurrentUserAtom();
        int listedUEPos = (int)cua.getCurrentEditOffset();
        assertEquals(lastUEPos,listedUEPos);

        wss.close();
    }

