/*
    @Test
    @Disabled("Only for manual tests - need to add org.tukaani:xz:1.8 for this to work")
    void paintMultiple() throws Exception {
        Pattern fileExt = Pattern.compile("(?i)^(.+/)*(.+)\\.(emf|wmf)$");
        final byte[] buf = new byte[50_000_000];
        try (SevenZFile sevenZFile = new SevenZFile(new File("tmp/plus_emf.7z"))
            ) {
            SevenZArchiveEntry entry;
            while ((entry = sevenZFile.getNextEntry()) != null) {
                if (entry.isDirectory() || entry.getSize() == 0) continue;
                Matcher m = fileExt.matcher(entry.getName());
                if (!m.matches()) continue;

                int size = sevenZFile.read(buf);

                ByteArrayInputStream bis = new ByteArrayInputStream(buf, 0, size);
                System.setIn(bis);

                String[] args = {
                    "-format", "png", // png,gif,jpg or null for test
                    "-outdir", new File("build/tmp/").getCanonicalPath(),
                    "-outfile", m.replaceAll("$2.png"),
                    "-fixside", "long",
                    "-scale", "800",
                    "-ignoreParse",
                    "-inputtype", m.replaceAll("$3").toUpperCase(),
                    // "-dump", new File("build/tmp/", lastName.replace(".emf",".json")).getCanonicalPath(),
                    "-quiet",
                    // "-extractEmbedded",
                    "stdin"
                };
                try {
                    PPTX2PNG.main(args);
                    System.out.println("Processing "+entry.getName()+" ok");
                } catch (Exception e) {
                    System.out.println("Processing "+entry.getName()+" failed");
                }
            }
        }
    }
*/
    @Test
    void testBasicWindows() throws Exception {
        try (InputStream is = ss_samples.openResourceAsStream("SimpleEMF_windows.emf")) {
            HemfPicture pic = new HemfPicture(is);
            HemfHeader header = pic.getHeader();
            assertEquals(27864, header.getBytes());
            assertEquals(31, header.getRecords());
            assertEquals(3, header.getHandles());
            assertEquals(346000, header.getMicroDimension().getWidth(), 0);
            assertEquals(194000, header.getMicroDimension().getHeight(), 0);

            List<HemfRecord> records = pic.getRecords();

            assertEquals(31, records.size());
        }
    }

