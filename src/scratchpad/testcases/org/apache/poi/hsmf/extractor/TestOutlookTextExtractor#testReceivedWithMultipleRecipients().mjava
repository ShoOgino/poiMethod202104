    /**
     * Test that we correctly handle multiple To+CC
     * recipients in an email we received.
     */
    @Test
    void testReceivedWithMultipleRecipients() throws Exception {
        // To: 'Ashutosh Dandavate' <ashutosh.dandavate@alfresco.com>,
        //   'Paul Holmes-Higgin' <paul.hh@alfresco.com>,
        //   'Mike Farman' <mikef@alfresco.com>
        // Cc: nickb@alfresco.com, nick.burch@alfresco.com,
        //   'Roy Wetherall' <roy.wetherall@alfresco.com>
        // (No BCC shown)


        String[] files = new String[]{
                "example_received_regular.msg", "example_received_unicode.msg"
        };
        for (String file : files) {
            try (POIFSFileSystem poifs = new POIFSFileSystem(samples.getFile(file), true);
                 MAPIMessage msg = new MAPIMessage(poifs);
                 OutlookTextExtractor ext = new OutlookTextExtractor(msg)) {
                String text = ext.getText();

                assertContains(text, "From: Mike Farman\n");
                assertContains(text, "To: 'Ashutosh Dandavate' <ashutosh.dandavate@alfresco.com>; " +
                        "'Paul Holmes-Higgin' <paul.hh@alfresco.com>; 'Mike Farman' <mikef@alfresco.com>\n");
                assertContains(text, "CC: nickb@alfresco.com; " +
                        "nick.burch@alfresco.com; 'Roy Wetherall' <roy.wetherall@alfresco.com>\n");
                assertNotContained(text, "BCC:");
                assertContains(text, "Subject: This is a test message please ignore\n");
                assertContains(text, "Date: Mon, 11 Jan 2010 16:2"); // Exact times differ slightly
                assertContains(text, "The quick brown fox jumps over the lazy dog");
            }
        }
    }

