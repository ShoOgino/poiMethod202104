    /**
     * Tests the paragraph text of a unicode document
     */
    @Test
    void testUnicodeTextParagraphs() {
        Range r = u.getRange();
        assertEquals(
                u_page_1 +
                page_break + "\r" +
                u_page_2,
                r.text()
        );

        // without PAPX reconstruction
        // assertEquals( 12, r.numParagraphs() );
        // with PAPX reconstruction
        assertEquals( 13, r.numParagraphs() );
        String[] p1_parts = u_page_1.split("\r");
        String[] p2_parts = u_page_2.split("\r");

        // Check text all matches up properly
        assertEquals(p1_parts[0] + "\r", r.getParagraph(0).text());
        assertEquals(p1_parts[1] + "\r", r.getParagraph(1).text());
        assertEquals(p1_parts[2] + "\r", r.getParagraph(2).text());
        assertEquals(p1_parts[3] + "\r", r.getParagraph(3).text());
        assertEquals(p1_parts[4] + "\r", r.getParagraph(4).text());
        assertEquals(p1_parts[5] + "\r", r.getParagraph(5).text());
        assertEquals(p1_parts[6] + "\r", r.getParagraph(6).text());
        assertEquals(p1_parts[7] + "\r", r.getParagraph(7).text());
        assertEquals(p1_parts[8] + "\r", r.getParagraph(8).text());
        assertEquals(p1_parts[9] + "\r", r.getParagraph(9).text());
        // without PAPX reconstruction
        // assertEquals(page_break + "\r", r.getParagraph(10).text());
        // assertEquals(p2_parts[0] + "\r", r.getParagraph(11).text());
        // with PAPX reconstruction
        assertEquals( page_break + "", r.getParagraph( 10 ).text() );
        assertEquals( "\r", r.getParagraph( 11 ).text() );
        assertEquals( p2_parts[0] + "\r", r.getParagraph( 12 ).text() );
    }

