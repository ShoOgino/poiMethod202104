	/**
	 * Creates the appropriate chunk at the given location.
	 *
	 * @param data the chunk bytes
	 * @param offset the offset into the chunk bytes array to start reading from
	 *
	 * @return the new Chunk
	 */
	public Chunk createChunk(byte[] data, int offset) {
		// Create the header
		ChunkHeader header =
			ChunkHeader.createChunkHeader(version, data, offset);
		// Sanity check
		if(header.getLength() < 0) {
			throw new IllegalArgumentException("Found a chunk with a negative length, which isn't allowed");
		}

		// How far up to look
		int endOfDataPos = offset + header.getLength() + header.getSizeInBytes();

		// Check we have enough data, and tweak the header size
		//  as required
		if(endOfDataPos > data.length) {
			LOG.log(POILogger.WARN,
				"Header called for ", header.getLength(), " bytes, but that would take us past the end of the data!");

			endOfDataPos = data.length;
			header.setLength(data.length - offset - header.getSizeInBytes());

			if(header.hasTrailer()) {
				header.setLength(header.getLength() - 8);
				endOfDataPos  -= 8;
			}
			if(header.hasSeparator()) {
                header.setLength(header.getLength() - 4);
				endOfDataPos  -= 4;
			}
		}


		// Create the trailer and separator, if required
		ChunkTrailer trailer = null;
		ChunkSeparator separator = null;
		if(header.hasTrailer()) {
			if(endOfDataPos <= data.length-8) {
				trailer = new ChunkTrailer(
					data, endOfDataPos);
				endOfDataPos += 8;
			} else {
				LOG.log(POILogger.ERROR, "Header claims a length to ", endOfDataPos, " there's then no space for the trailer in the data (", data.length, ")");
			}
		}
		if(header.hasSeparator()) {
			if(endOfDataPos <= data.length-4) {
				separator = new ChunkSeparator(
						data, endOfDataPos);
			} else {
				LOG.log(POILogger.ERROR, "Header claims a length to ", endOfDataPos, " there's then no space for the separator in the data (", data.length, ")");
			}
		}

		// Now, create the chunk
		byte[] contents = IOUtils.safelyClone(data, offset+header.getSizeInBytes(), header.getLength(), MAX_RECORD_LENGTH);
		Chunk chunk = new Chunk(header, trailer, separator, contents);

		// Feed in the stuff from  chunks_parse_cmds.tbl
		CommandDefinition[] defs = chunkCommandDefinitions.get(header.getType());
		if (defs == null) {
		    defs = new CommandDefinition[0];
		}
		chunk.setCommandDefinitions(defs);

		// Now get the chunk to process its commands
		chunk.processCommands();

		// All done
		return chunk;
	}

