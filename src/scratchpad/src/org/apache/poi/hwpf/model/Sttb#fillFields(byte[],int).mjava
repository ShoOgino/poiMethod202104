    public void fillFields( byte[] buffer, int startOffset )
    {
        short ffff = LittleEndian.getShort( buffer, startOffset );
        int offset = startOffset + LittleEndianConsts.SHORT_SIZE;

        if ( ffff != (short) 0xffff )
        {
            LogManager.getLogger(Sttb.class).atWarn().log(
                    "Non-extended character Pascal strings are not supported right now. " +
                            "Creating empty values in the RevisionMarkAuthorTable for now.  " +
                            "Please, contact POI developers for update."
            );
            //set data and extraData to empty values to avoid
            //downstream NPE in case someone calls getEntries on RevisionMarkAuthorTable
            _data = new String[0];
            _extraData = new byte[0][];

            return;
        }
        // strings are extended character strings

        int cData = _cDataLength == 2 ? LittleEndian.getUShort( buffer, offset )
                : LittleEndian.getInt( buffer, offset );
        offset += _cDataLength;

        this._cbExtra = LittleEndian.getUShort( buffer, offset );
        offset += 2;

        _data = new String[cData];
        _extraData = new byte[cData][];

        for ( int i = 0; i < cData; i++ )
        {
            int cchData = LittleEndian.getShort( buffer, offset );
            offset += 2;

            if ( cchData < 0 )
                continue;

            _data[i] = StringUtil.getFromUnicodeLE( buffer, offset, cchData );
            offset += cchData * 2;

            _extraData[i] = Arrays.copyOfRange( buffer, offset, offset+_cbExtra );
            offset += _cbExtra;
        }
    }

