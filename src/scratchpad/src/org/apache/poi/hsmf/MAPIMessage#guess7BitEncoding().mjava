   /**
    * Tries to identify the correct encoding for 7-bit (non-unicode)
    *  strings in the file.
    * <p>Many messages store their strings as unicode, which is
    *  nice and easy. Some use one-byte encodings for their
    *  strings, but don't always store the encoding anywhere
    *  helpful in the file.</p>
    * <p>This method checks for codepage properties, and failing that
    *  looks at the headers for the message, and uses these to
    *  guess the correct encoding for your file.</p>
    * <p>Bug #49441 has more on why this is needed</p>
    */
   public void guess7BitEncoding() {
     String generalcodepage = null;
     String htmlbodycodepage = null;
     String bodycodepage = null;
     //
     // General codepage: Message codepage property.
     //
     List<PropertyValue> val = mainChunks.getProperties().get(MAPIProperty.MESSAGE_CODEPAGE);
     if (val != null && val.size() > 0) {
       int codepage = ((LongPropertyValue) val.get(0)).getValue();
       try {
         String encoding = CodePageUtil.codepageToEncoding(codepage, true);
         generalcodepage = encoding;
       } catch (UnsupportedEncodingException e) {
           LOG.atWarn().log("Invalid codepage ID {} set for the message via {}, ignoring", box(codepage), MAPIProperty.MESSAGE_CODEPAGE);
       }
     }
     //
     // General codepage fallback: Message locale ID property.
     //
     if (generalcodepage == null) {
       val = mainChunks.getProperties().get(MAPIProperty.MESSAGE_LOCALE_ID);
       if (val != null && val.size() > 0) {
         int lcid = ((LongPropertyValue) val.get(0)).getValue();
         int codepage = LocaleUtil.getDefaultCodePageFromLCID(lcid);
         try {
           if (codepage != 0) {
             String encoding = CodePageUtil.codepageToEncoding(codepage, true);
             generalcodepage = encoding;
           }
         } catch (UnsupportedEncodingException e) {
             LOG.atWarn().log("Invalid codepage ID {}from locale ID{} set for the message via {}, ignoring", box(codepage),box(lcid), MAPIProperty.MESSAGE_LOCALE_ID);
         }
       }
     }
     //
     // General codepage fallback: Charset on a content type header.
     //
     if (generalcodepage == null) {
       try {
         String[] headers = getHeaders();
         if (headers != null && headers.length > 0) {
           Pattern p = Pattern.compile("content-type:.*?charset=[\"']?([^;'\"]+)[\"']?", Pattern.CASE_INSENSITIVE);
           for (String header : headers) {
             if (header.toLowerCase(LocaleUtil.getUserLocale()).startsWith("content-type")) {
               Matcher m = p.matcher(header);
               if (m.matches()) {
                 String encoding = m.group(1);
                 generalcodepage = encoding;
               }
             }
           }
         }
       } catch (ChunkNotFoundException e) {
       }
     }
     //
     // HTML and text body encoding: Internet CPID property.
     // UTF-8 is ignored for text body. This seems to be a special Outlook behavior.
     //
     val = mainChunks.getProperties().get(MAPIProperty.INTERNET_CPID);
     if (val != null && val.size() > 0) {
       int codepage = ((LongPropertyValue) val.get(0)).getValue();
       try {
         String encoding = CodePageUtil.codepageToEncoding(codepage, true);
         htmlbodycodepage = encoding;
         if (!encoding.equalsIgnoreCase("utf-8")) {
           bodycodepage = encoding;
         }
       } catch (UnsupportedEncodingException e) {
           LOG.atWarn().log("Invalid codepage ID {} set for the message via {}, ignoring", box(codepage), MAPIProperty.INTERNET_CPID);
       }
     }
     //
     // Apply encoding
     //
     set7BitEncoding(generalcodepage, htmlbodycodepage, bodycodepage);
  }

