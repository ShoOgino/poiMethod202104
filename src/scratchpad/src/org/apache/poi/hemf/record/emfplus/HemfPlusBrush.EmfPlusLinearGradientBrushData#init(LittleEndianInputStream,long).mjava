        @Override
        public long init(LittleEndianInputStream leis, long dataSize) throws IOException {
            // A 32-bit unsigned integer that specifies the data in the OptionalData field.
            // This value MUST be composed of BrushData flags
            dataFlags = leis.readInt();

            // A 32-bit signed integer from the WrapMode enumeration that specifies whether to paint the area outside
            // the boundary of the brush. When painting outside the boundary, the wrap mode specifies how the color
            // gradient is repeated.
            wrapMode = EmfPlusWrapMode.valueOf(leis.readInt());

            int size = 2 * LittleEndianConsts.INT_SIZE;
            size += readRectF(leis, rect);

            // An EmfPlusARGB object that specifies the color at the starting/ending boundary point of the linear gradient brush.
            startColor = readARGB(leis.readInt());
            endColor = readARGB(leis.readInt());

            // skip reserved1/2 fields
            leis.skipFully(2 * LittleEndianConsts.INT_SIZE);

            size += 4 * LittleEndianConsts.INT_SIZE;

            if (TRANSFORM.isSet(dataFlags)) {
                size += readXForm(leis, (blendTransform = new AffineTransform()));
            }

            if (isPreset() && (isBlendH() || isBlendV())) {
                throw new RuntimeException("invalid combination of preset colors and blend factors v/h");
            }

            size += (isPreset()) ? readColors(leis, d -> positions = d, c -> blendColors = c) : 0;
            size += (isBlendV()) ? readFactors(leis, d -> positionsV = d, f -> blendFactorsV = f) : 0;
            size += (isBlendH()) ? readFactors(leis, d -> positionsH = d, f -> blendFactorsH = f) : 0;

            return size;
        }

